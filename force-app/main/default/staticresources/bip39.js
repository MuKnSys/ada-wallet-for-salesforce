/*! For license information please see newbundle.js.LICENSE.txt */
!function(e,r){"object"==typeof exports&&"object"==typeof module?module.exports=r():"function"==typeof define&&define.amd?define("MyCardanoLibrary",[],r):"object"==typeof exports?exports.MyCardanoLibrary=r():e.MyCardanoLibrary=r()}(this,(()=>(()=>{var e={513:(e,r,t)=>{"use strict";var a=t(841),o=t(198),i=t(573);function n(e){var r=Object.create(null);return e&&Object.keys(e).forEach((function(t){if("default"!==t){var a=Object.getOwnPropertyDescriptor(e,t);Object.defineProperty(r,t,a.get?a:{enumerable:!0,get:function(){return e[t]}})}})),r.default=e,Object.freeze(r)}var s=n(o),l=n(i);const c=a.secp256k1.ProjectivePoint,u="Expected Private",d="Expected Point",f="Expected Tweak",p="Expected Signature",h="Expected Extra Data (32 bytes)",m="Expected Scalar",b=new Uint8Array([255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,186,174,220,230,175,72,160,59,191,210,94,140,208,54,65,65]),g=new Uint8Array(32),v=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,69,81,35,25,80,183,95,196,64,45,161,114,47,201,186,238]),y=BigInt(1);function w(e,r){for(let t=0;t<32;++t)if(e[t]!==r[t])return e[t]<r[t]?-1:1;return 0}function k(e){return 0===w(e,g)}function x(e){return e instanceof Uint8Array&&32===e.length&&!(w(e,b)>=0)}function z(e){return e instanceof Uint8Array&&64===e.length&&w(e.subarray(0,32),b)<0&&w(e.subarray(32,64),b)<0}function E(e){return e instanceof Uint8Array&&32===e.length}function B(e){return void 0===e||e instanceof Uint8Array&&32===e.length}function j(e){let r;if("bigint"==typeof e)r=e;else if("number"==typeof e&&Number.isSafeInteger(e)&&e>=0)r=BigInt(e);else if("string"==typeof e){if(64!==e.length)throw new Error("Expected 32 bytes of private scalar");r=l.hexToNumber(e)}else{if(!(e instanceof Uint8Array))throw new TypeError("Expected valid private scalar");if(32!==e.length)throw new Error("Expected 32 bytes of private scalar");r=l.bytesToNumberBE(e)}if(r<0)throw new Error("Expected private scalar >= 0");return r}function A(e){return a.secp256k1.utils.normPrivateKeyToScalar(e)}function L(e,r,t){const a=U(e),o=j(r),i=c.BASE.multiplyAndAddUnsafe(a,o,y);if(!i)throw new Error("Tweaked point at infinity");return i.toRawBytes(t)}function S(e,r){return void 0===e?void 0===r||T(r):!!e}function I(e){try{return e()}catch(e){return null}}function q(e){return a.schnorr.utils.lift_x(l.bytesToNumberBE(e))}function U(e){return 32===e.length?q(e):c.fromHex(e)}function H(e,r){if(32===e.length!==r)return!1;try{return r?!!q(e):!!c.fromHex(e)}catch(e){return!1}}function O(e){return H(e,!1)}function T(e){return H(e,!1)&&33===e.length}function _(e){return a.secp256k1.utils.isValidPrivateKey(e)}function R(e){return H(e,!0)}function C(e){if(!O(e))throw new Error(d);return e.slice(1,33)}function N(e,r){if(!_(e))throw new Error(u);return I((()=>a.secp256k1.getPublicKey(e,S(r))))}r.isPoint=O,r.isPointCompressed=T,r.isPrivate=_,r.isXOnlyPoint=R,r.pointAdd=function(e,r,t){if(!O(e)||!O(r))throw new Error(d);return I((()=>{const a=U(e),o=U(r);return a.equals(o.negate())?null:a.add(o).toRawBytes(S(t,e))}))},r.pointAddScalar=function(e,r,t){if(!O(e))throw new Error(d);if(!x(r))throw new Error(f);return I((()=>L(e,r,S(t,e))))},r.pointCompress=function(e,r){if(!O(e))throw new Error(d);return U(e).toRawBytes(S(r,e))},r.pointFromScalar=N,r.pointMultiply=function(e,r,t){if(!O(e))throw new Error(d);if(!x(r))throw new Error(f);return I((()=>function(e,r,t){const a=U(e),o="string"==typeof r?r:l.bytesToHex(r),i=l.hexToNumber(o);return a.multiply(i).toRawBytes(t)}(e,r,S(t,e))))},r.privateAdd=function(e,r){if(!_(e))throw new Error(u);if(!x(r))throw new Error(f);return I((()=>function(e,r){const t=A(e),o=j(r),i=l.numberToBytesBE(s.mod(t+o,a.secp256k1.CURVE.n),32);return a.secp256k1.utils.isValidPrivateKey(i)?i:null}(e,r)))},r.privateNegate=function(e){if(!_(e))throw new Error(u);return function(e){const r=A(e),t=l.numberToBytesBE(a.secp256k1.CURVE.n-r,32);return a.secp256k1.utils.isValidPrivateKey(t)?t:null}(e)},r.privateSub=function(e,r){if(!_(e))throw new Error(u);if(!x(r))throw new Error(f);return I((()=>function(e,r){const t=A(e),o=j(r),i=l.numberToBytesBE(s.mod(t-o,a.secp256k1.CURVE.n),32);return a.secp256k1.utils.isValidPrivateKey(i)?i:null}(e,r)))},r.recover=function(e,r,t,o){if(!E(e))throw new Error("Expected Hash");if(!z(r)||!function(e){return!(k(e.subarray(0,32))||k(e.subarray(32,64)))}(r))throw new Error(p);if(2&t&&!function(e){return e instanceof Uint8Array&&64===e.length&&w(e.subarray(0,32),v)<0}(r))throw new Error("Bad Recovery Id");if(!R(r.subarray(0,32)))throw new Error(p);const i=a.secp256k1.Signature.fromCompact(r).addRecoveryBit(t).recoverPublicKey(e);if(!i)throw new Error(p);return i.toRawBytes(S(o))},r.sign=function(e,r,t){if(!_(r))throw new Error(u);if(!E(e))throw new Error(m);if(!B(t))throw new Error(h);return a.secp256k1.sign(e,r,{extraEntropy:t}).toCompactRawBytes()},r.signRecoverable=function(e,r,t){if(!_(r))throw new Error(u);if(!E(e))throw new Error(m);if(!B(t))throw new Error(h);const o=a.secp256k1.sign(e,r,{extraEntropy:t});return{signature:o.toCompactRawBytes(),recoveryId:o.recovery}},r.signSchnorr=function(e,r,t){if(!_(r))throw new Error(u);if(!E(e))throw new Error(m);if(!B(t))throw new Error(h);return a.schnorr.sign(e,r,t)},r.verify=function(e,r,t,o){if(!O(r))throw new Error(d);if(!z(t))throw new Error(p);if(!E(e))throw new Error(m);return a.secp256k1.verify(t,e,r,{lowS:o})},r.verifySchnorr=function(e,r,t){if(!R(r))throw new Error(d);if(!z(t))throw new Error(p);if(!E(e))throw new Error(m);return a.schnorr.verify(t,e,r)},r.xOnlyPointAddTweak=function(e,r){if(!R(e))throw new Error(d);if(!x(r))throw new Error(f);return I((()=>{const t=L(e,r,!0);return{parity:t[0]%2==1?1:0,xOnlyPubkey:t.slice(1)}}))},r.xOnlyPointFromPoint=C,r.xOnlyPointFromScalar=function(e){if(!_(e))throw new Error(u);return C(N(e))}},322:(e,r,t)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.getHash=n,r.createCurve=function(e,r){const t=r=>(0,i.weierstrass)({...e,...n(r)});return{...t(r),create:t}};const a=t(862),o=t(664),i=t(420);function n(e){return{hash:e,hmac:(r,...t)=>(0,a.hmac)(e,r,(0,o.concatBytes)(...t)),randomBytes:o.randomBytes}}},647:(e,r,t)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.wNAF=function(e,r){return{constTimeNegate:s,hasPrecomputes:e=>1!==h(e),unsafeLadder(r,t,a=e.ZERO){let o=r;for(;t>i;)t&n&&(a=a.add(o)),o=o.double(),t>>=n;return a},precomputeWindow(e,t){const{windows:a,windowSize:o}=c(t,r),i=[];let n=e,s=n;for(let e=0;e<a;e++){s=n,i.push(s);for(let e=1;e<o;e++)s=s.add(n),i.push(s);n=s.double()}return i},wNAF(t,a,o){const{windows:i,windowSize:l}=c(t,r);let u=e.ZERO,d=e.BASE;const f=BigInt(2**t-1),p=2**t,h=BigInt(t);for(let e=0;e<i;e++){const r=e*l;let t=Number(o&f);o>>=h,t>l&&(t-=p,o+=n);const i=r,c=r+Math.abs(t)-1,m=e%2!=0,b=t<0;0===t?d=d.add(s(m,a[i])):u=u.add(s(b,a[c]))}return{p:u,f:d}},wNAFUnsafe(t,a,o,s=e.ZERO){const{windows:l,windowSize:u}=c(t,r),d=BigInt(2**t-1),f=2**t,p=BigInt(t);for(let e=0;e<l;e++){const r=e*u;if(o===i)break;let t=Number(o&d);if(o>>=p,t>u&&(t-=f,o+=n),0===t)continue;let l=a[r+Math.abs(t)-1];t<0&&(l=l.negate()),s=s.add(l)}return s},getPrecomputes(e,r,t){let a=f.get(r);return a||(a=this.precomputeWindow(r,e),1!==e&&f.set(r,t(a))),a},wNAFCached(e,r,t){const a=h(e);return this.wNAF(a,this.getPrecomputes(a,e,t),r)},wNAFCachedUnsafe(e,r,t,a){const o=h(e);return 1===o?this.unsafeLadder(e,r,a):this.wNAFUnsafe(o,this.getPrecomputes(o,e,t),r,a)},setWindowSize(e,t){l(t,r),p.set(e,t),f.delete(e)}}},r.pippenger=function(e,r,t,a){if(u(t,e),d(a,r),t.length!==a.length)throw new Error("arrays of points and scalars must have equal length");const i=e.ZERO,n=(0,o.bitLen)(BigInt(t.length)),s=n>12?n-3:n>4?n-2:n?2:1,l=(1<<s)-1,c=new Array(l+1).fill(i);let f=i;for(let e=Math.floor((r.BITS-1)/s)*s;e>=0;e-=s){c.fill(i);for(let r=0;r<a.length;r++){const o=a[r],i=Number(o>>BigInt(e)&BigInt(l));c[i]=c[i].add(t[r])}let r=i;for(let e=c.length-1,t=i;e>0;e--)t=t.add(c[e]),r=r.add(t);if(f=f.add(r),0!==e)for(let e=0;e<s;e++)f=f.double()}return f},r.precomputeMSMUnsafe=function(e,r,t,a){l(a,r.BITS),u(t,e);const o=e.ZERO,i=2**a-1,n=Math.ceil(r.BITS/a),s=BigInt((1<<a)-1),c=t.map((e=>{const r=[];for(let t=0,a=e;t<i;t++)r.push(a),a=a.add(e);return r}));return e=>{if(d(e,r),e.length>t.length)throw new Error("array of scalars must be smaller than array of points");let i=o;for(let r=0;r<n;r++){if(i!==o)for(let e=0;e<a;e++)i=i.double();const t=BigInt(n*a-(r+1)*a);for(let r=0;r<e.length;r++){const a=e[r],o=Number(a>>t&s);o&&(i=i.add(c[r][o-1]))}}return i}},r.validateBasic=function(e){return(0,a.validateField)(e.Fp),(0,o.validateObject)(e,{n:"bigint",h:"bigint",Gx:"field",Gy:"field"},{nBitLength:"isSafeInteger",nByteLength:"isSafeInteger"}),Object.freeze({...(0,a.nLength)(e.n,e.nBitLength),...e,p:e.Fp.ORDER})};const a=t(198),o=t(573),i=BigInt(0),n=BigInt(1);function s(e,r){const t=r.negate();return e?t:r}function l(e,r){if(!Number.isSafeInteger(e)||e<=0||e>r)throw new Error("invalid window size, expected [1.."+r+"], got W="+e)}function c(e,r){return l(e,r),{windows:Math.ceil(r/e)+1,windowSize:2**(e-1)}}function u(e,r){if(!Array.isArray(e))throw new Error("array expected");e.forEach(((e,t)=>{if(!(e instanceof r))throw new Error("invalid point at index "+t)}))}function d(e,r){if(!Array.isArray(e))throw new Error("array of scalars expected");e.forEach(((e,t)=>{if(!r.isValid(e))throw new Error("invalid scalar at index "+t)}))}const f=new WeakMap,p=new WeakMap;function h(e){return p.get(e)||1}},476:(e,r,t)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.expand_message_xmd=c,r.expand_message_xof=u,r.hash_to_field=d,r.isogenyMap=function(e,r){const t=r.map((e=>Array.from(e).reverse()));return(r,a)=>{const[o,i,n,s]=t.map((t=>t.reduce(((t,a)=>e.add(e.mul(t,r),a)))));return r=e.div(o,i),a=e.mul(a,e.div(n,s)),{x:r,y:a}}},r.createHasher=function(e,r,t){if("function"!=typeof r)throw new Error("mapToCurve() must be defined");return{hashToCurve(a,o){const i=d(a,2,{...t,DST:t.DST,...o}),n=e.fromAffine(r(i[0])),s=e.fromAffine(r(i[1])),l=n.add(s).clearCofactor();return l.assertValidity(),l},encodeToCurve(a,o){const i=d(a,1,{...t,DST:t.encodeDST,...o}),n=e.fromAffine(r(i[0])).clearCofactor();return n.assertValidity(),n},mapToCurve(t){if(!Array.isArray(t))throw new Error("mapToCurve: expected array of bigints");for(const e of t)if("bigint"!=typeof e)throw new Error("mapToCurve: expected array of bigints");const a=e.fromAffine(r(t)).clearCofactor();return a.assertValidity(),a}}};const a=t(198),o=t(573),i=o.bytesToNumberBE;function n(e,r){if(l(e),l(r),e<0||e>=1<<8*r)throw new Error("invalid I2OSP input: "+e);const t=Array.from({length:r}).fill(0);for(let a=r-1;a>=0;a--)t[a]=255&e,e>>>=8;return new Uint8Array(t)}function s(e,r){const t=new Uint8Array(e.length);for(let a=0;a<e.length;a++)t[a]=e[a]^r[a];return t}function l(e){if(!Number.isSafeInteger(e))throw new Error("number expected")}function c(e,r,t,a){(0,o.abytes)(e),(0,o.abytes)(r),l(t),r.length>255&&(r=a((0,o.concatBytes)((0,o.utf8ToBytes)("H2C-OVERSIZE-DST-"),r)));const{outputLen:i,blockLen:c}=a,u=Math.ceil(t/i);if(t>65535||u>255)throw new Error("expand_message_xmd: invalid lenInBytes");const d=(0,o.concatBytes)(r,n(r.length,1)),f=n(0,c),p=n(t,2),h=new Array(u),m=a((0,o.concatBytes)(f,e,p,n(0,1),d));h[0]=a((0,o.concatBytes)(m,n(1,1),d));for(let e=1;e<=u;e++){const r=[s(m,h[e-1]),n(e+1,1),d];h[e]=a((0,o.concatBytes)(...r))}return(0,o.concatBytes)(...h).slice(0,t)}function u(e,r,t,a,i){if((0,o.abytes)(e),(0,o.abytes)(r),l(t),r.length>255){const e=Math.ceil(2*a/8);r=i.create({dkLen:e}).update((0,o.utf8ToBytes)("H2C-OVERSIZE-DST-")).update(r).digest()}if(t>65535||r.length>255)throw new Error("expand_message_xof: invalid lenInBytes");return i.create({dkLen:t}).update(e).update(n(t,2)).update(r).update(n(r.length,1)).digest()}function d(e,r,t){(0,o.validateObject)(t,{DST:"stringOrUint8Array",p:"bigint",m:"isSafeInteger",k:"isSafeInteger",hash:"hash"});const{p:n,k:s,m:d,hash:f,expand:p,DST:h}=t;(0,o.abytes)(e),l(r);const m="string"==typeof h?(0,o.utf8ToBytes)(h):h,b=n.toString(2).length,g=Math.ceil((b+s)/8),v=r*d*g;let y;if("xmd"===p)y=c(e,m,v,f);else if("xof"===p)y=u(e,m,v,s,f);else{if("_internal_pass"!==p)throw new Error('expand must be "xmd" or "xof"');y=e}const w=new Array(r);for(let e=0;e<r;e++){const r=new Array(d);for(let t=0;t<d;t++){const o=g*(t+e*d),s=y.subarray(o,o+g);r[t]=(0,a.mod)(i(s),n)}w[e]=r}return w}},198:(e,r,t)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.isNegativeLE=void 0,r.mod=d,r.pow=f,r.pow2=function(e,r,t){let a=e;for(;r-- >o;)a*=a,a%=t;return a},r.invert=p,r.tonelliShanks=h,r.FpSqrt=m,r.validateField=function(e){const r=b.reduce(((e,r)=>(e[r]="function",e)),{ORDER:"bigint",MASK:"bigint",BYTES:"isSafeInteger",BITS:"isSafeInteger"});return(0,a.validateObject)(e,r)},r.FpPow=g,r.FpInvertBatch=v,r.FpDiv=function(e,r,t){return e.mul(r,"bigint"==typeof t?p(t,e.ORDER):e.inv(t))},r.FpLegendre=y,r.FpIsSquare=function(e){const r=y(e.ORDER);return t=>{const a=r(e,t);return e.eql(a,e.ZERO)||e.eql(a,e.ONE)}},r.nLength=w,r.Field=function(e,r,t=!1,n={}){if(e<=o)throw new Error("invalid field: expected ORDER > 0, got "+e);const{nBitLength:s,nByteLength:l}=w(e,r);if(l>2048)throw new Error("invalid field: expected ORDER of <= 2048 bytes");let c;const u=Object.freeze({ORDER:e,isLE:t,BITS:s,BYTES:l,MASK:(0,a.bitMask)(s),ZERO:o,ONE:i,create:r=>d(r,e),isValid:r=>{if("bigint"!=typeof r)throw new Error("invalid field element: expected bigint, got "+typeof r);return o<=r&&r<e},is0:e=>e===o,isOdd:e=>(e&i)===i,neg:r=>d(-r,e),eql:(e,r)=>e===r,sqr:r=>d(r*r,e),add:(r,t)=>d(r+t,e),sub:(r,t)=>d(r-t,e),mul:(r,t)=>d(r*t,e),pow:(e,r)=>g(u,e,r),div:(r,t)=>d(r*p(t,e),e),sqrN:e=>e*e,addN:(e,r)=>e+r,subN:(e,r)=>e-r,mulN:(e,r)=>e*r,inv:r=>p(r,e),sqrt:n.sqrt||(r=>(c||(c=m(e)),c(u,r))),invertBatch:e=>v(u,e),cmov:(e,r,t)=>t?r:e,toBytes:e=>t?(0,a.numberToBytesLE)(e,l):(0,a.numberToBytesBE)(e,l),fromBytes:e=>{if(e.length!==l)throw new Error("Field.fromBytes: expected "+l+" bytes, got "+e.length);return t?(0,a.bytesToNumberLE)(e):(0,a.bytesToNumberBE)(e)}});return Object.freeze(u)},r.FpSqrtOdd=function(e,r){if(!e.isOdd)throw new Error("Field doesn't have isOdd");const t=e.sqrt(r);return e.isOdd(t)?t:e.neg(t)},r.FpSqrtEven=function(e,r){if(!e.isOdd)throw new Error("Field doesn't have isOdd");const t=e.sqrt(r);return e.isOdd(t)?e.neg(t):t},r.hashToPrivateScalar=function(e,r,t=!1){const o=(e=(0,a.ensureBytes)("privateHash",e)).length,n=w(r).nByteLength+8;if(n<24||o<n||o>1024)throw new Error("hashToPrivateScalar: expected "+n+"-1024 bytes of input, got "+o);return d(t?(0,a.bytesToNumberLE)(e):(0,a.bytesToNumberBE)(e),r-i)+i},r.getFieldBytesLength=k,r.getMinHashLength=x,r.mapHashToField=function(e,r,t=!1){const o=e.length,n=k(r),s=x(r);if(o<16||o<s||o>1024)throw new Error("expected "+s+"-1024 bytes of input, got "+o);const l=d(t?(0,a.bytesToNumberLE)(e):(0,a.bytesToNumberBE)(e),r-i)+i;return t?(0,a.numberToBytesLE)(l,n):(0,a.numberToBytesBE)(l,n)};const a=t(573),o=BigInt(0),i=BigInt(1),n=BigInt(2),s=BigInt(3),l=BigInt(4),c=BigInt(5),u=BigInt(8);function d(e,r){const t=e%r;return t>=o?t:r+t}function f(e,r,t){if(r<o)throw new Error("invalid exponent, negatives unsupported");if(t<=o)throw new Error("invalid modulus");if(t===i)return o;let a=i;for(;r>o;)r&i&&(a=a*e%t),e=e*e%t,r>>=i;return a}function p(e,r){if(e===o)throw new Error("invert: expected non-zero number");if(r<=o)throw new Error("invert: expected positive modulus, got "+r);let t=d(e,r),a=r,n=o,s=i,l=i,c=o;for(;t!==o;){const e=a/t,r=a%t,o=n-l*e,i=s-c*e;a=t,t=r,n=l,s=c,l=o,c=i}if(a!==i)throw new Error("invert: does not exist");return d(n,r)}function h(e){const r=(e-i)/n;let t,a,s;for(t=e-i,a=0;t%n===o;t/=n,a++);for(s=n;s<e&&f(s,r,e)!==e-i;s++)if(s>1e3)throw new Error("Cannot find square root: likely non-prime P");if(1===a){const r=(e+i)/l;return function(e,t){const a=e.pow(t,r);if(!e.eql(e.sqr(a),t))throw new Error("Cannot find square root");return a}}const c=(t+i)/n;return function(e,o){if(e.pow(o,r)===e.neg(e.ONE))throw new Error("Cannot find square root");let n=a,l=e.pow(e.mul(e.ONE,s),t),u=e.pow(o,c),d=e.pow(o,t);for(;!e.eql(d,e.ONE);){if(e.eql(d,e.ZERO))return e.ZERO;let r=1;for(let t=e.sqr(d);r<n&&!e.eql(t,e.ONE);r++)t=e.sqr(t);const t=e.pow(l,i<<BigInt(n-r-1));l=e.sqr(t),u=e.mul(u,t),d=e.mul(d,l),n=r}return u}}function m(e){if(e%l===s){const r=(e+i)/l;return function(e,t){const a=e.pow(t,r);if(!e.eql(e.sqr(a),t))throw new Error("Cannot find square root");return a}}if(e%u===c){const r=(e-c)/u;return function(e,t){const a=e.mul(t,n),o=e.pow(a,r),i=e.mul(t,o),s=e.mul(e.mul(i,n),o),l=e.mul(i,e.sub(s,e.ONE));if(!e.eql(e.sqr(l),t))throw new Error("Cannot find square root");return l}}return h(e)}r.isNegativeLE=(e,r)=>(d(e,r)&i)===i;const b=["create","isValid","is0","neg","inv","sqrt","sqr","eql","add","sub","mul","pow","div","addN","subN","mulN","sqrN"];function g(e,r,t){if(t<o)throw new Error("invalid exponent, negatives unsupported");if(t===o)return e.ONE;if(t===i)return r;let a=e.ONE,n=r;for(;t>o;)t&i&&(a=e.mul(a,n)),n=e.sqr(n),t>>=i;return a}function v(e,r){const t=new Array(r.length),a=r.reduce(((r,a,o)=>e.is0(a)?r:(t[o]=r,e.mul(r,a))),e.ONE),o=e.inv(a);return r.reduceRight(((r,a,o)=>e.is0(a)?r:(t[o]=e.mul(r,t[o]),e.mul(r,a))),o),t}function y(e){const r=(e-i)/n;return(e,t)=>e.pow(t,r)}function w(e,r){const t=void 0!==r?r:e.toString(2).length;return{nBitLength:t,nByteLength:Math.ceil(t/8)}}function k(e){if("bigint"!=typeof e)throw new Error("field order must be bigint");const r=e.toString(2).length;return Math.ceil(r/8)}function x(e){const r=k(e);return r+Math.ceil(r/2)}},573:(e,r)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.notImplemented=r.bitMask=void 0,r.isBytes=i,r.abytes=n,r.abool=function(e,r){if("boolean"!=typeof r)throw new Error(e+" boolean expected, got "+r)},r.bytesToHex=l,r.numberToHexUnpadded=c,r.hexToNumber=u,r.hexToBytes=p,r.bytesToNumberBE=function(e){return u(l(e))},r.bytesToNumberLE=function(e){return n(e),u(l(Uint8Array.from(e).reverse()))},r.numberToBytesBE=h,r.numberToBytesLE=function(e,r){return h(e,r).reverse()},r.numberToVarBytesBE=function(e){return p(c(e))},r.ensureBytes=function(e,r,t){let a;if("string"==typeof r)try{a=p(r)}catch(r){throw new Error(e+" must be hex string or Uint8Array, cause: "+r)}else{if(!i(r))throw new Error(e+" must be hex string or Uint8Array");a=Uint8Array.from(r)}const o=a.length;if("number"==typeof t&&o!==t)throw new Error(e+" of length "+t+" expected, got "+o);return a},r.concatBytes=m,r.equalBytes=function(e,r){if(e.length!==r.length)return!1;let t=0;for(let a=0;a<e.length;a++)t|=e[a]^r[a];return 0===t},r.utf8ToBytes=function(e){if("string"!=typeof e)throw new Error("string expected");return new Uint8Array((new TextEncoder).encode(e))},r.inRange=g,r.aInRange=function(e,r,t,a){if(!g(r,t,a))throw new Error("expected valid "+e+": "+t+" <= n < "+a+", got "+r)},r.bitLen=function(e){let r;for(r=0;e>t;e>>=a,r+=1);return r},r.bitGet=function(e,r){return e>>BigInt(r)&a},r.bitSet=function(e,r,o){return e|(o?a:t)<<BigInt(r)},r.createHmacDrbg=function(e,r,t){if("number"!=typeof e||e<2)throw new Error("hashLen must be a number");if("number"!=typeof r||r<2)throw new Error("qByteLen must be a number");if("function"!=typeof t)throw new Error("hmacFn must be a function");let a=v(e),o=v(e),i=0;const n=()=>{a.fill(1),o.fill(0),i=0},s=(...e)=>t(o,a,...e),l=(e=v())=>{o=s(y([0]),e),a=s(),0!==e.length&&(o=s(y([1]),e),a=s())},c=()=>{if(i++>=1e3)throw new Error("drbg: tried 1000 values");let e=0;const t=[];for(;e<r;){a=s();const r=a.slice();t.push(r),e+=a.length}return m(...t)};return(e,r)=>{let t;for(n(),l(e);!(t=r(c()));)l();return n(),t}},r.validateObject=function(e,r,t={}){const a=(r,t,a)=>{const o=w[t];if("function"!=typeof o)throw new Error("invalid validator function");const i=e[r];if(!(a&&void 0===i||o(i,e)))throw new Error("param "+String(r)+" is invalid. Expected "+t+", got "+i)};for(const[e,t]of Object.entries(r))a(e,t,!1);for(const[e,r]of Object.entries(t))a(e,r,!0);return e},r.memoized=function(e){const r=new WeakMap;return(t,...a)=>{const o=r.get(t);if(void 0!==o)return o;const i=e(t,...a);return r.set(t,i),i}};const t=BigInt(0),a=BigInt(1),o=BigInt(2);function i(e){return e instanceof Uint8Array||ArrayBuffer.isView(e)&&"Uint8Array"===e.constructor.name}function n(e){if(!i(e))throw new Error("Uint8Array expected")}const s=Array.from({length:256},((e,r)=>r.toString(16).padStart(2,"0")));function l(e){n(e);let r="";for(let t=0;t<e.length;t++)r+=s[e[t]];return r}function c(e){const r=e.toString(16);return 1&r.length?"0"+r:r}function u(e){if("string"!=typeof e)throw new Error("hex string expected, got "+typeof e);return""===e?t:BigInt("0x"+e)}const d={_0:48,_9:57,A:65,F:70,a:97,f:102};function f(e){return e>=d._0&&e<=d._9?e-d._0:e>=d.A&&e<=d.F?e-(d.A-10):e>=d.a&&e<=d.f?e-(d.a-10):void 0}function p(e){if("string"!=typeof e)throw new Error("hex string expected, got "+typeof e);const r=e.length,t=r/2;if(r%2)throw new Error("hex string expected, got unpadded hex of length "+r);const a=new Uint8Array(t);for(let r=0,o=0;r<t;r++,o+=2){const t=f(e.charCodeAt(o)),i=f(e.charCodeAt(o+1));if(void 0===t||void 0===i){const r=e[o]+e[o+1];throw new Error('hex string expected, got non-hex character "'+r+'" at index '+o)}a[r]=16*t+i}return a}function h(e,r){return p(e.toString(16).padStart(2*r,"0"))}function m(...e){let r=0;for(let t=0;t<e.length;t++){const a=e[t];n(a),r+=a.length}const t=new Uint8Array(r);for(let r=0,a=0;r<e.length;r++){const o=e[r];t.set(o,a),a+=o.length}return t}const b=e=>"bigint"==typeof e&&t<=e;function g(e,r,t){return b(e)&&b(r)&&b(t)&&r<=e&&e<t}r.bitMask=e=>(o<<BigInt(e-1))-a;const v=e=>new Uint8Array(e),y=e=>Uint8Array.from(e),w={bigint:e=>"bigint"==typeof e,function:e=>"function"==typeof e,boolean:e=>"boolean"==typeof e,string:e=>"string"==typeof e,stringOrUint8Array:e=>"string"==typeof e||i(e),isSafeInteger:e=>Number.isSafeInteger(e),array:e=>Array.isArray(e),field:(e,r)=>r.Fp.isValid(e),hash:e=>"function"==typeof e&&Number.isSafeInteger(e.outputLen)};r.notImplemented=()=>{throw new Error("not implemented")}},420:(e,r,t)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.DER=r.DERErr=void 0,r.weierstrassPoints=b,r.weierstrass=function(e){const t=function(e){const r=(0,a.validateBasic)(e);return i.validateObject(r,{hash:"hash",hmac:"function",randomBytes:"function"},{bits2int:"function",bits2int_modN:"function",lowS:"boolean"}),Object.freeze({lowS:!0,...r})}(e),{Fp:l,n:c}=t,u=l.BYTES+1,p=2*l.BYTES+1;function h(e){return(0,o.mod)(e,c)}function m(e){return(0,o.invert)(e,c)}const{ProjectivePoint:g,normPrivateKeyToScalar:v,weierstrassEquation:y,isWithinCurveOrder:w}=b({...t,toBytes(e,r,t){const a=r.toAffine(),o=l.toBytes(a.x),s=i.concatBytes;return(0,n.abool)("isCompressed",t),t?s(Uint8Array.from([r.hasEvenY()?2:3]),o):s(Uint8Array.from([4]),o,l.toBytes(a.y))},fromBytes(e){const r=e.length,t=e[0],a=e.subarray(1);if(r!==u||2!==t&&3!==t){if(r===p&&4===t)return{x:l.fromBytes(a.subarray(0,l.BYTES)),y:l.fromBytes(a.subarray(l.BYTES,2*l.BYTES))};throw new Error("invalid Point, expected length of "+u+", or uncompressed "+p+", got "+r)}{const e=i.bytesToNumberBE(a);if(!i.inRange(e,f,l.ORDER))throw new Error("Point is not on curve");const r=y(e);let o;try{o=l.sqrt(r)}catch(e){const r=e instanceof Error?": "+e.message:"";throw new Error("Point is not on curve"+r)}return!(1&~t)!=((o&f)===f)&&(o=l.neg(o)),{x:e,y:o}}}}),k=e=>i.bytesToHex(i.numberToBytesBE(e,t.nByteLength));function x(e){return e>c>>f}const z=(e,r,t)=>i.bytesToNumberBE(e.slice(r,t));class E{constructor(e,r,t){this.r=e,this.s=r,this.recovery=t,this.assertValidity()}static fromCompact(e){const r=t.nByteLength;return e=(0,n.ensureBytes)("compactSignature",e,2*r),new E(z(e,0,r),z(e,r,2*r))}static fromDER(e){const{r:t,s:a}=r.DER.toSig((0,n.ensureBytes)("DER",e));return new E(t,a)}assertValidity(){i.aInRange("r",this.r,f,c),i.aInRange("s",this.s,f,c)}addRecoveryBit(e){return new E(this.r,this.s,e)}recoverPublicKey(e){const{r,s:a,recovery:o}=this,i=L((0,n.ensureBytes)("msgHash",e));if(null==o||![0,1,2,3].includes(o))throw new Error("recovery id invalid");const s=2===o||3===o?r+t.n:r;if(s>=l.ORDER)throw new Error("recovery id 2 or 3 invalid");const c=1&o?"03":"02",u=g.fromHex(c+k(s)),d=m(s),f=h(-i*d),p=h(a*d),b=g.BASE.multiplyAndAddUnsafe(u,f,p);if(!b)throw new Error("point at infinify");return b.assertValidity(),b}hasHighS(){return x(this.s)}normalizeS(){return this.hasHighS()?new E(this.r,h(-this.s),this.recovery):this}toDERRawBytes(){return i.hexToBytes(this.toDERHex())}toDERHex(){return r.DER.hexFromSig({r:this.r,s:this.s})}toCompactRawBytes(){return i.hexToBytes(this.toCompactHex())}toCompactHex(){return k(this.r)+k(this.s)}}const B={isValidPrivateKey(e){try{return v(e),!0}catch(e){return!1}},normPrivateKeyToScalar:v,randomPrivateKey:()=>{const e=(0,o.getMinHashLength)(t.n);return(0,o.mapHashToField)(t.randomBytes(e),t.n)},precompute:(e=8,r=g.BASE)=>(r._setWindowSize(e),r.multiply(BigInt(3)),r)};function j(e){const r=i.isBytes(e),t="string"==typeof e,a=(r||t)&&e.length;return r?a===u||a===p:t?a===2*u||a===2*p:e instanceof g}const A=t.bits2int||function(e){if(e.length>8192)throw new Error("input is too large");const r=i.bytesToNumberBE(e),a=8*e.length-t.nBitLength;return a>0?r>>BigInt(a):r},L=t.bits2int_modN||function(e){return h(A(e))},S=i.bitMask(t.nBitLength);function I(e){return i.aInRange("num < 2^"+t.nBitLength,e,d,S),i.numberToBytesBE(e,t.nByteLength)}const q={lowS:t.lowS,prehash:!1},U={lowS:t.lowS,prehash:!1};return g.BASE._setWindowSize(8),{CURVE:t,getPublicKey:function(e,r=!0){return g.fromPrivateKey(e).toRawBytes(r)},getSharedSecret:function(e,r,t=!0){if(j(e))throw new Error("first arg must be private key");if(!j(r))throw new Error("second arg must be public key");return g.fromHex(r).multiply(v(e)).toRawBytes(t)},sign:function(e,r,a=q){const{seed:o,k2sig:c}=function(e,r,a=q){if(["recovered","canonical"].some((e=>e in a)))throw new Error("sign() legacy options not supported");const{hash:o,randomBytes:c}=t;let{lowS:u,prehash:p,extraEntropy:b}=a;null==u&&(u=!0),e=(0,n.ensureBytes)("msgHash",e),s(a),p&&(e=(0,n.ensureBytes)("prehashed msgHash",o(e)));const y=L(e),k=v(r),z=[I(k),I(y)];if(null!=b&&!1!==b){const e=!0===b?c(l.BYTES):b;z.push((0,n.ensureBytes)("extraEntropy",e))}const B=i.concatBytes(...z),j=y;return{seed:B,k2sig:function(e){const r=A(e);if(!w(r))return;const t=m(r),a=g.BASE.multiply(r).toAffine(),o=h(a.x);if(o===d)return;const i=h(t*h(j+o*k));if(i===d)return;let n=(a.x===o?0:2)|Number(a.y&f),s=i;return u&&x(i)&&(s=function(e){return x(e)?h(-e):e}(i),n^=1),new E(o,s,n)}}}(e,r,a),u=t;return i.createHmacDrbg(u.hash.outputLen,u.nByteLength,u.hmac)(o,c)},verify:function(e,a,o,l=U){const c=e;a=(0,n.ensureBytes)("msgHash",a),o=(0,n.ensureBytes)("publicKey",o);const{lowS:u,prehash:d,format:f}=l;if(s(l),"strict"in l)throw new Error("options.strict was renamed to lowS");if(void 0!==f&&"compact"!==f&&"der"!==f)throw new Error("format must be compact or der");const p="string"==typeof c||i.isBytes(c),b=!p&&!f&&"object"==typeof c&&null!==c&&"bigint"==typeof c.r&&"bigint"==typeof c.s;if(!p&&!b)throw new Error("invalid signature, expected Uint8Array, hex string or Signature instance");let v,y;try{if(b&&(v=new E(c.r,c.s)),p){try{"compact"!==f&&(v=E.fromDER(c))}catch(e){if(!(e instanceof r.DER.Err))throw e}v||"der"===f||(v=E.fromCompact(c))}y=g.fromHex(o)}catch(e){return!1}if(!v)return!1;if(u&&v.hasHighS())return!1;d&&(a=t.hash(a));const{r:w,s:k}=v,x=L(a),z=m(k),B=h(x*z),j=h(w*z),A=g.BASE.multiplyAndAddUnsafe(y,B,j)?.toAffine();return!!A&&h(A.x)===w},ProjectivePoint:g,Signature:E,utils:B}},r.SWUFpSqrtRatio=g,r.mapToCurveSimpleSWU=function(e,r){if((0,o.validateField)(e),!e.isValid(r.A)||!e.isValid(r.B)||!e.isValid(r.Z))throw new Error("mapToCurveSimpleSWU: invalid opts");const t=g(e,r.Z);if(!e.isOdd)throw new Error("Fp.isOdd is not implemented!");return a=>{let o,i,n,s,l,c,u,d;o=e.sqr(a),o=e.mul(o,r.Z),i=e.sqr(o),i=e.add(i,o),n=e.add(i,e.ONE),n=e.mul(n,r.B),s=e.cmov(r.Z,e.neg(i),!e.eql(i,e.ZERO)),s=e.mul(s,r.A),i=e.sqr(n),c=e.sqr(s),l=e.mul(c,r.A),i=e.add(i,l),i=e.mul(i,n),c=e.mul(c,s),l=e.mul(c,r.B),i=e.add(i,l),u=e.mul(o,n);const{isValid:f,value:p}=t(i,c);d=e.mul(o,a),d=e.mul(d,p),u=e.cmov(u,n,f),d=e.cmov(d,p,f);const h=e.isOdd(a)===e.isOdd(d);return d=e.cmov(e.neg(d),d,h),u=e.div(u,s),{x:u,y:d}}};const a=t(647),o=t(198),i=t(573),n=t(573);function s(e){void 0!==e.lowS&&(0,n.abool)("lowS",e.lowS),void 0!==e.prehash&&(0,n.abool)("prehash",e.prehash)}const{bytesToNumberBE:l,hexToBytes:c}=i;class u extends Error{constructor(e=""){super(e)}}r.DERErr=u,r.DER={Err:u,_tlv:{encode:(e,t)=>{const{Err:a}=r.DER;if(e<0||e>256)throw new a("tlv.encode: wrong tag");if(1&t.length)throw new a("tlv.encode: unpadded data");const o=t.length/2,n=i.numberToHexUnpadded(o);if(n.length/2&128)throw new a("tlv.encode: long form length too big");const s=o>127?i.numberToHexUnpadded(n.length/2|128):"";return i.numberToHexUnpadded(e)+s+n+t},decode(e,t){const{Err:a}=r.DER;let o=0;if(e<0||e>256)throw new a("tlv.encode: wrong tag");if(t.length<2||t[o++]!==e)throw new a("tlv.decode: wrong tlv");const i=t[o++];let n=0;if(128&i){const e=127&i;if(!e)throw new a("tlv.decode(long): indefinite length not supported");if(e>4)throw new a("tlv.decode(long): byte length is too big");const r=t.subarray(o,o+e);if(r.length!==e)throw new a("tlv.decode: length bytes not complete");if(0===r[0])throw new a("tlv.decode(long): zero leftmost byte");for(const e of r)n=n<<8|e;if(o+=e,n<128)throw new a("tlv.decode(long): not minimal encoding")}else n=i;const s=t.subarray(o,o+n);if(s.length!==n)throw new a("tlv.decode: wrong value length");return{v:s,l:t.subarray(o+n)}}},_int:{encode(e){const{Err:t}=r.DER;if(e<d)throw new t("integer: negative integers are not allowed");let a=i.numberToHexUnpadded(e);if(8&Number.parseInt(a[0],16)&&(a="00"+a),1&a.length)throw new t("unexpected DER parsing assertion: unpadded hex");return a},decode(e){const{Err:t}=r.DER;if(128&e[0])throw new t("invalid signature integer: negative");if(0===e[0]&&!(128&e[1]))throw new t("invalid signature integer: unnecessary leading zero");return l(e)}},toSig(e){const{Err:t,_int:a,_tlv:o}=r.DER,n="string"==typeof e?c(e):e;i.abytes(n);const{v:s,l}=o.decode(48,n);if(l.length)throw new t("invalid signature: left bytes after parsing");const{v:u,l:d}=o.decode(2,s),{v:f,l:p}=o.decode(2,d);if(p.length)throw new t("invalid signature: left bytes after parsing");return{r:a.decode(u),s:a.decode(f)}},hexFromSig(e){const{_tlv:t,_int:a}=r.DER,o=t.encode(2,a.encode(e.r))+t.encode(2,a.encode(e.s));return t.encode(48,o)}};const d=BigInt(0),f=BigInt(1),p=BigInt(2),h=BigInt(3),m=BigInt(4);function b(e){const r=function(e){const r=(0,a.validateBasic)(e);i.validateObject(r,{a:"field",b:"field"},{allowedPrivateKeyLengths:"array",wrapPrivateKey:"boolean",isTorsionFree:"function",clearCofactor:"function",allowInfinityPoint:"boolean",fromBytes:"function",toBytes:"function"});const{endo:t,Fp:o,a:n}=r;if(t){if(!o.eql(n,o.ZERO))throw new Error("invalid endomorphism, can only be defined for Koblitz curves that have a=0");if("object"!=typeof t||"bigint"!=typeof t.beta||"function"!=typeof t.splitScalar)throw new Error("invalid endomorphism, expected beta: bigint and splitScalar: function")}return Object.freeze({...r})}(e),{Fp:t}=r,s=(0,o.Field)(r.n,r.nBitLength),l=r.toBytes||((e,r,a)=>{const o=r.toAffine();return i.concatBytes(Uint8Array.from([4]),t.toBytes(o.x),t.toBytes(o.y))}),c=r.fromBytes||(e=>{const r=e.subarray(1);return{x:t.fromBytes(r.subarray(0,t.BYTES)),y:t.fromBytes(r.subarray(t.BYTES,2*t.BYTES))}});function u(e){const{a,b:o}=r,i=t.sqr(e),n=t.mul(i,e);return t.add(t.add(n,t.mul(e,a)),o)}if(!t.eql(t.sqr(r.Gy),u(r.Gx)))throw new Error("bad generator point: equation left != right");function p(e){const{allowedPrivateKeyLengths:t,nByteLength:a,wrapPrivateKey:s,n:l}=r;if(t&&"bigint"!=typeof e){if(i.isBytes(e)&&(e=i.bytesToHex(e)),"string"!=typeof e||!t.includes(e.length))throw new Error("invalid private key");e=e.padStart(2*a,"0")}let c;try{c="bigint"==typeof e?e:i.bytesToNumberBE((0,n.ensureBytes)("private key",e,a))}catch(r){throw new Error("invalid private key, expected hex or "+a+" bytes, got "+typeof e)}return s&&(c=(0,o.mod)(c,l)),i.aInRange("private key",c,f,l),c}function m(e){if(!(e instanceof v))throw new Error("ProjectivePoint expected")}const b=(0,n.memoized)(((e,r)=>{const{px:a,py:o,pz:i}=e;if(t.eql(i,t.ONE))return{x:a,y:o};const n=e.is0();null==r&&(r=n?t.ONE:t.inv(i));const s=t.mul(a,r),l=t.mul(o,r),c=t.mul(i,r);if(n)return{x:t.ZERO,y:t.ZERO};if(!t.eql(c,t.ONE))throw new Error("invZ was invalid");return{x:s,y:l}})),g=(0,n.memoized)((e=>{if(e.is0()){if(r.allowInfinityPoint&&!t.is0(e.py))return;throw new Error("bad point: ZERO")}const{x:a,y:o}=e.toAffine();if(!t.isValid(a)||!t.isValid(o))throw new Error("bad point: x or y not FE");const i=t.sqr(o),n=u(a);if(!t.eql(i,n))throw new Error("bad point: equation left != right");if(!e.isTorsionFree())throw new Error("bad point: not in prime-order subgroup");return!0}));class v{constructor(e,r,a){if(this.px=e,this.py=r,this.pz=a,null==e||!t.isValid(e))throw new Error("x required");if(null==r||!t.isValid(r))throw new Error("y required");if(null==a||!t.isValid(a))throw new Error("z required");Object.freeze(this)}static fromAffine(e){const{x:r,y:a}=e||{};if(!e||!t.isValid(r)||!t.isValid(a))throw new Error("invalid affine point");if(e instanceof v)throw new Error("projective point not allowed");const o=e=>t.eql(e,t.ZERO);return o(r)&&o(a)?v.ZERO:new v(r,a,t.ONE)}get x(){return this.toAffine().x}get y(){return this.toAffine().y}static normalizeZ(e){const r=t.invertBatch(e.map((e=>e.pz)));return e.map(((e,t)=>e.toAffine(r[t]))).map(v.fromAffine)}static fromHex(e){const r=v.fromAffine(c((0,n.ensureBytes)("pointHex",e)));return r.assertValidity(),r}static fromPrivateKey(e){return v.BASE.multiply(p(e))}static msm(e,r){return(0,a.pippenger)(v,s,e,r)}_setWindowSize(e){w.setWindowSize(this,e)}assertValidity(){g(this)}hasEvenY(){const{y:e}=this.toAffine();if(t.isOdd)return!t.isOdd(e);throw new Error("Field doesn't support isOdd")}equals(e){m(e);const{px:r,py:a,pz:o}=this,{px:i,py:n,pz:s}=e,l=t.eql(t.mul(r,s),t.mul(i,o)),c=t.eql(t.mul(a,s),t.mul(n,o));return l&&c}negate(){return new v(this.px,t.neg(this.py),this.pz)}double(){const{a:e,b:a}=r,o=t.mul(a,h),{px:i,py:n,pz:s}=this;let l=t.ZERO,c=t.ZERO,u=t.ZERO,d=t.mul(i,i),f=t.mul(n,n),p=t.mul(s,s),m=t.mul(i,n);return m=t.add(m,m),u=t.mul(i,s),u=t.add(u,u),l=t.mul(e,u),c=t.mul(o,p),c=t.add(l,c),l=t.sub(f,c),c=t.add(f,c),c=t.mul(l,c),l=t.mul(m,l),u=t.mul(o,u),p=t.mul(e,p),m=t.sub(d,p),m=t.mul(e,m),m=t.add(m,u),u=t.add(d,d),d=t.add(u,d),d=t.add(d,p),d=t.mul(d,m),c=t.add(c,d),p=t.mul(n,s),p=t.add(p,p),d=t.mul(p,m),l=t.sub(l,d),u=t.mul(p,f),u=t.add(u,u),u=t.add(u,u),new v(l,c,u)}add(e){m(e);const{px:a,py:o,pz:i}=this,{px:n,py:s,pz:l}=e;let c=t.ZERO,u=t.ZERO,d=t.ZERO;const f=r.a,p=t.mul(r.b,h);let b=t.mul(a,n),g=t.mul(o,s),y=t.mul(i,l),w=t.add(a,o),k=t.add(n,s);w=t.mul(w,k),k=t.add(b,g),w=t.sub(w,k),k=t.add(a,i);let x=t.add(n,l);return k=t.mul(k,x),x=t.add(b,y),k=t.sub(k,x),x=t.add(o,i),c=t.add(s,l),x=t.mul(x,c),c=t.add(g,y),x=t.sub(x,c),d=t.mul(f,k),c=t.mul(p,y),d=t.add(c,d),c=t.sub(g,d),d=t.add(g,d),u=t.mul(c,d),g=t.add(b,b),g=t.add(g,b),y=t.mul(f,y),k=t.mul(p,k),g=t.add(g,y),y=t.sub(b,y),y=t.mul(f,y),k=t.add(k,y),b=t.mul(g,k),u=t.add(u,b),b=t.mul(x,k),c=t.mul(w,c),c=t.sub(c,b),b=t.mul(w,g),d=t.mul(x,d),d=t.add(d,b),new v(c,u,d)}subtract(e){return this.add(e.negate())}is0(){return this.equals(v.ZERO)}wNAF(e){return w.wNAFCached(this,e,v.normalizeZ)}multiplyUnsafe(e){const{endo:a,n:o}=r;i.aInRange("scalar",e,d,o);const n=v.ZERO;if(e===d)return n;if(this.is0()||e===f)return this;if(!a||w.hasPrecomputes(this))return w.wNAFCachedUnsafe(this,e,v.normalizeZ);let{k1neg:s,k1:l,k2neg:c,k2:u}=a.splitScalar(e),p=n,h=n,m=this;for(;l>d||u>d;)l&f&&(p=p.add(m)),u&f&&(h=h.add(m)),m=m.double(),l>>=f,u>>=f;return s&&(p=p.negate()),c&&(h=h.negate()),h=new v(t.mul(h.px,a.beta),h.py,h.pz),p.add(h)}multiply(e){const{endo:a,n:o}=r;let n,s;if(i.aInRange("scalar",e,f,o),a){const{k1neg:r,k1:o,k2neg:i,k2:l}=a.splitScalar(e);let{p:c,f:u}=this.wNAF(o),{p:d,f}=this.wNAF(l);c=w.constTimeNegate(r,c),d=w.constTimeNegate(i,d),d=new v(t.mul(d.px,a.beta),d.py,d.pz),n=c.add(d),s=u.add(f)}else{const{p:r,f:t}=this.wNAF(e);n=r,s=t}return v.normalizeZ([n,s])[0]}multiplyAndAddUnsafe(e,r,t){const a=v.BASE,o=(e,r)=>r!==d&&r!==f&&e.equals(a)?e.multiply(r):e.multiplyUnsafe(r),i=o(this,r).add(o(e,t));return i.is0()?void 0:i}toAffine(e){return b(this,e)}isTorsionFree(){const{h:e,isTorsionFree:t}=r;if(e===f)return!0;if(t)return t(v,this);throw new Error("isTorsionFree() has not been declared for the elliptic curve")}clearCofactor(){const{h:e,clearCofactor:t}=r;return e===f?this:t?t(v,this):this.multiplyUnsafe(r.h)}toRawBytes(e=!0){return(0,n.abool)("isCompressed",e),this.assertValidity(),l(v,this,e)}toHex(e=!0){return(0,n.abool)("isCompressed",e),i.bytesToHex(this.toRawBytes(e))}}v.BASE=new v(r.Gx,r.Gy,t.ONE),v.ZERO=new v(t.ZERO,t.ONE,t.ZERO);const y=r.nBitLength,w=(0,a.wNAF)(v,r.endo?Math.ceil(y/2):y);return{CURVE:r,ProjectivePoint:v,normPrivateKeyToScalar:p,weierstrassEquation:u,isWithinCurveOrder:function(e){return i.inRange(e,f,r.n)}}}function g(e,r){const t=e.ORDER;let a=d;for(let e=t-f;e%p===d;e/=p)a+=f;const o=a,i=p<<o-f-f,n=i*p,s=(t-f)/n,l=(s-f)/p,c=n-f,u=i,b=e.pow(r,s),g=e.pow(r,(s+f)/p);let v=(r,t)=>{let a=b,i=e.pow(t,c),n=e.sqr(i);n=e.mul(n,t);let s=e.mul(r,n);s=e.pow(s,l),s=e.mul(s,i),i=e.mul(s,t),n=e.mul(s,r);let d=e.mul(n,i);s=e.pow(d,u);let h=e.eql(s,e.ONE);i=e.mul(n,g),s=e.mul(d,a),n=e.cmov(i,n,h),d=e.cmov(s,d,h);for(let r=o;r>f;r--){let t=r-p;t=p<<t-f;let o=e.pow(d,t);const s=e.eql(o,e.ONE);i=e.mul(n,a),a=e.mul(a,a),o=e.mul(d,a),n=e.cmov(i,n,s),d=e.cmov(o,d,s)}return{isValid:h,value:n}};if(e.ORDER%m===h){const t=(e.ORDER-h)/m,a=e.sqrt(e.neg(r));v=(r,o)=>{let i=e.sqr(o);const n=e.mul(r,o);i=e.mul(i,n);let s=e.pow(i,t);s=e.mul(s,n);const l=e.mul(s,a),c=e.mul(e.sqr(s),o),u=e.eql(c,r);return{isValid:u,value:e.cmov(l,s,u)}}}return v}},841:(e,r,t)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.encodeToCurve=r.hashToCurve=r.schnorr=r.secp256k1=void 0;const a=t(794),o=t(664),i=t(322),n=t(476),s=t(198),l=t(573),c=t(420),u=BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"),d=BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"),f=BigInt(1),p=BigInt(2),h=(e,r)=>(e+r/p)/r;function m(e){const r=u,t=BigInt(3),a=BigInt(6),o=BigInt(11),i=BigInt(22),n=BigInt(23),l=BigInt(44),c=BigInt(88),d=e*e*e%r,f=d*d*e%r,h=(0,s.pow2)(f,t,r)*f%r,m=(0,s.pow2)(h,t,r)*f%r,g=(0,s.pow2)(m,p,r)*d%r,v=(0,s.pow2)(g,o,r)*g%r,y=(0,s.pow2)(v,i,r)*v%r,w=(0,s.pow2)(y,l,r)*y%r,k=(0,s.pow2)(w,c,r)*w%r,x=(0,s.pow2)(k,l,r)*y%r,z=(0,s.pow2)(x,t,r)*f%r,E=(0,s.pow2)(z,n,r)*v%r,B=(0,s.pow2)(E,a,r)*d%r,j=(0,s.pow2)(B,p,r);if(!b.eql(b.sqr(j),e))throw new Error("Cannot find square root");return j}const b=(0,s.Field)(u,void 0,void 0,{sqrt:m});r.secp256k1=(0,i.createCurve)({a:BigInt(0),b:BigInt(7),Fp:b,n:d,Gx:BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),Gy:BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),h:BigInt(1),lowS:!0,endo:{beta:BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),splitScalar:e=>{const r=d,t=BigInt("0x3086d221a7d46bcde86c90e49284eb15"),a=-f*BigInt("0xe4437ed6010e88286f547fa90abfe4c3"),o=BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"),i=t,n=BigInt("0x100000000000000000000000000000000"),l=h(i*e,r),c=h(-a*e,r);let u=(0,s.mod)(e-l*t-c*o,r),p=(0,s.mod)(-l*a-c*i,r);const m=u>n,b=p>n;if(m&&(u=r-u),b&&(p=r-p),u>n||p>n)throw new Error("splitScalar: Endomorphism failed, k="+e);return{k1neg:m,k1:u,k2neg:b,k2:p}}}},a.sha256);const g=BigInt(0),v={};function y(e,...r){let t=v[e];if(void 0===t){const r=(0,a.sha256)(Uint8Array.from(e,(e=>e.charCodeAt(0))));t=(0,l.concatBytes)(r,r),v[e]=t}return(0,a.sha256)((0,l.concatBytes)(t,...r))}const w=e=>e.toRawBytes(!0).slice(1),k=e=>(0,l.numberToBytesBE)(e,32),x=e=>(0,s.mod)(e,u),z=e=>(0,s.mod)(e,d),E=r.secp256k1.ProjectivePoint,B=(e,r,t)=>E.BASE.multiplyAndAddUnsafe(e,r,t);function j(e){let t=r.secp256k1.utils.normPrivateKeyToScalar(e),a=E.fromPrivateKey(t);return{scalar:a.hasEvenY()?t:z(-t),bytes:w(a)}}function A(e){(0,l.aInRange)("x",e,f,u);const r=x(e*e);let t=m(x(r*e+BigInt(7)));t%p!==g&&(t=x(-t));const a=new E(e,t,f);return a.assertValidity(),a}const L=l.bytesToNumberBE;function S(...e){return z(L(y("BIP0340/challenge",...e)))}function I(e,r,t){const a=(0,l.ensureBytes)("signature",e,64),o=(0,l.ensureBytes)("message",r),i=(0,l.ensureBytes)("publicKey",t,32);try{const e=A(L(i)),r=L(a.subarray(0,32));if(!(0,l.inRange)(r,f,u))return!1;const t=L(a.subarray(32,64));if(!(0,l.inRange)(t,f,d))return!1;const n=S(k(r),w(e),o),s=B(e,t,z(-n));return!(!s||!s.hasEvenY()||s.toAffine().x!==r)}catch(e){return!1}}r.schnorr={getPublicKey:function(e){return j(e).bytes},sign:function(e,r,t=(0,o.randomBytes)(32)){const a=(0,l.ensureBytes)("message",e),{bytes:i,scalar:n}=j(r),s=(0,l.ensureBytes)("auxRand",t,32),c=k(n^L(y("BIP0340/aux",s))),u=y("BIP0340/nonce",c,i,a),d=z(L(u));if(d===g)throw new Error("sign failed: k is zero");const{bytes:f,scalar:p}=j(d),h=S(f,i,a),m=new Uint8Array(64);if(m.set(f,0),m.set(k(z(p+h*n)),32),!I(m,a,i))throw new Error("sign: Invalid signature produced");return m},verify:I,utils:{randomPrivateKey:r.secp256k1.utils.randomPrivateKey,lift_x:A,pointToBytes:w,numberToBytesBE:l.numberToBytesBE,bytesToNumberBE:l.bytesToNumberBE,taggedHash:y,mod:s.mod}};const q=(()=>(0,n.isogenyMap)(b,[["0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7","0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581","0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262","0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c"],["0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b","0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14","0x0000000000000000000000000000000000000000000000000000000000000001"],["0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c","0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3","0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931","0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84"],["0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b","0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573","0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f","0x0000000000000000000000000000000000000000000000000000000000000001"]].map((e=>e.map((e=>BigInt(e)))))))(),U=(()=>(0,c.mapToCurveSimpleSWU)(b,{A:BigInt("0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533"),B:BigInt("1771"),Z:b.create(BigInt("-11"))}))(),H=(()=>(0,n.createHasher)(r.secp256k1.ProjectivePoint,(e=>{const{x:r,y:t}=U(b.create(e[0]));return q(r,t)}),{DST:"secp256k1_XMD:SHA-256_SSWU_RO_",encodeDST:"secp256k1_XMD:SHA-256_SSWU_NU_",p:b.ORDER,m:1,k:128,expand:"xmd",hash:a.sha256}))();r.hashToCurve=H.hashToCurve,r.encodeToCurve=H.encodeToCurve},721:(e,r)=>{"use strict";function t(e){if(!Number.isSafeInteger(e)||e<0)throw new Error("positive integer expected, got "+e)}function a(e,...r){if(!((t=e)instanceof Uint8Array||ArrayBuffer.isView(t)&&"Uint8Array"===t.constructor.name))throw new Error("Uint8Array expected");var t;if(r.length>0&&!r.includes(e.length))throw new Error("Uint8Array expected of length "+r+", got length="+e.length)}Object.defineProperty(r,"__esModule",{value:!0}),r.anumber=t,r.abytes=a,r.ahash=function(e){if("function"!=typeof e||"function"!=typeof e.create)throw new Error("Hash should be wrapped by utils.wrapConstructor");t(e.outputLen),t(e.blockLen)},r.aexists=function(e,r=!0){if(e.destroyed)throw new Error("Hash instance has been destroyed");if(r&&e.finished)throw new Error("Hash#digest() has already been called")},r.aoutput=function(e,r){a(e);const t=r.outputLen;if(e.length<t)throw new Error("digestInto() expects output buffer of length at least "+t)}},861:(e,r,t)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.HashMD=void 0,r.setBigUint64=i,r.Chi=function(e,r,t){return e&r^~e&t},r.Maj=function(e,r,t){return e&r^e&t^r&t};const a=t(721),o=t(664);function i(e,r,t,a){if("function"==typeof e.setBigUint64)return e.setBigUint64(r,t,a);const o=BigInt(32),i=BigInt(4294967295),n=Number(t>>o&i),s=Number(t&i),l=a?4:0,c=a?0:4;e.setUint32(r+l,n,a),e.setUint32(r+c,s,a)}class n extends o.Hash{constructor(e,r,t,a){super(),this.blockLen=e,this.outputLen=r,this.padOffset=t,this.isLE=a,this.finished=!1,this.length=0,this.pos=0,this.destroyed=!1,this.buffer=new Uint8Array(e),this.view=(0,o.createView)(this.buffer)}update(e){(0,a.aexists)(this);const{view:r,buffer:t,blockLen:i}=this,n=(e=(0,o.toBytes)(e)).length;for(let a=0;a<n;){const s=Math.min(i-this.pos,n-a);if(s!==i)t.set(e.subarray(a,a+s),this.pos),this.pos+=s,a+=s,this.pos===i&&(this.process(r,0),this.pos=0);else{const r=(0,o.createView)(e);for(;i<=n-a;a+=i)this.process(r,a)}}return this.length+=e.length,this.roundClean(),this}digestInto(e){(0,a.aexists)(this),(0,a.aoutput)(e,this),this.finished=!0;const{buffer:r,view:t,blockLen:n,isLE:s}=this;let{pos:l}=this;r[l++]=128,this.buffer.subarray(l).fill(0),this.padOffset>n-l&&(this.process(t,0),l=0);for(let e=l;e<n;e++)r[e]=0;i(t,n-8,BigInt(8*this.length),s),this.process(t,0);const c=(0,o.createView)(e),u=this.outputLen;if(u%4)throw new Error("_sha2: outputLen should be aligned to 32bit");const d=u/4,f=this.get();if(d>f.length)throw new Error("_sha2: outputLen bigger than state");for(let e=0;e<d;e++)c.setUint32(4*e,f[e],s)}digest(){const{buffer:e,outputLen:r}=this;this.digestInto(e);const t=e.slice(0,r);return this.destroy(),t}_cloneInto(e){e||(e=new this.constructor),e.set(...this.get());const{blockLen:r,buffer:t,length:a,finished:o,destroyed:i,pos:n}=this;return e.length=a,e.pos=n,e.finished=o,e.destroyed=i,a%r&&e.buffer.set(t),e}}r.HashMD=n},112:(e,r)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.crypto=void 0,r.crypto="object"==typeof globalThis&&"crypto"in globalThis?globalThis.crypto:void 0},862:(e,r,t)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.hmac=r.HMAC=void 0;const a=t(721),o=t(664);class i extends o.Hash{constructor(e,r){super(),this.finished=!1,this.destroyed=!1,(0,a.ahash)(e);const t=(0,o.toBytes)(r);if(this.iHash=e.create(),"function"!=typeof this.iHash.update)throw new Error("Expected instance of class which extends utils.Hash");this.blockLen=this.iHash.blockLen,this.outputLen=this.iHash.outputLen;const i=this.blockLen,n=new Uint8Array(i);n.set(t.length>i?e.create().update(t).digest():t);for(let e=0;e<n.length;e++)n[e]^=54;this.iHash.update(n),this.oHash=e.create();for(let e=0;e<n.length;e++)n[e]^=106;this.oHash.update(n),n.fill(0)}update(e){return(0,a.aexists)(this),this.iHash.update(e),this}digestInto(e){(0,a.aexists)(this),(0,a.abytes)(e,this.outputLen),this.finished=!0,this.iHash.digestInto(e),this.oHash.update(e),this.oHash.digestInto(e),this.destroy()}digest(){const e=new Uint8Array(this.oHash.outputLen);return this.digestInto(e),e}_cloneInto(e){e||(e=Object.create(Object.getPrototypeOf(this),{}));const{oHash:r,iHash:t,finished:a,destroyed:o,blockLen:i,outputLen:n}=this;return e.finished=a,e.destroyed=o,e.blockLen=i,e.outputLen=n,e.oHash=r._cloneInto(e.oHash),e.iHash=t._cloneInto(e.iHash),e}destroy(){this.destroyed=!0,this.oHash.destroy(),this.iHash.destroy()}}r.HMAC=i,r.hmac=(e,r,t)=>new i(e,r).update(t).digest(),r.hmac.create=(e,r)=>new i(e,r)},794:(e,r,t)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.sha224=r.sha256=r.SHA256=void 0;const a=t(861),o=t(664),i=new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]),n=new Uint32Array([1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225]),s=new Uint32Array(64);class l extends a.HashMD{constructor(){super(64,32,8,!1),this.A=0|n[0],this.B=0|n[1],this.C=0|n[2],this.D=0|n[3],this.E=0|n[4],this.F=0|n[5],this.G=0|n[6],this.H=0|n[7]}get(){const{A:e,B:r,C:t,D:a,E:o,F:i,G:n,H:s}=this;return[e,r,t,a,o,i,n,s]}set(e,r,t,a,o,i,n,s){this.A=0|e,this.B=0|r,this.C=0|t,this.D=0|a,this.E=0|o,this.F=0|i,this.G=0|n,this.H=0|s}process(e,r){for(let t=0;t<16;t++,r+=4)s[t]=e.getUint32(r,!1);for(let e=16;e<64;e++){const r=s[e-15],t=s[e-2],a=(0,o.rotr)(r,7)^(0,o.rotr)(r,18)^r>>>3,i=(0,o.rotr)(t,17)^(0,o.rotr)(t,19)^t>>>10;s[e]=i+s[e-7]+a+s[e-16]|0}let{A:t,B:n,C:l,D:c,E:u,F:d,G:f,H:p}=this;for(let e=0;e<64;e++){const r=p+((0,o.rotr)(u,6)^(0,o.rotr)(u,11)^(0,o.rotr)(u,25))+(0,a.Chi)(u,d,f)+i[e]+s[e]|0,h=((0,o.rotr)(t,2)^(0,o.rotr)(t,13)^(0,o.rotr)(t,22))+(0,a.Maj)(t,n,l)|0;p=f,f=d,d=u,u=c+r|0,c=l,l=n,n=t,t=r+h|0}t=t+this.A|0,n=n+this.B|0,l=l+this.C|0,c=c+this.D|0,u=u+this.E|0,d=d+this.F|0,f=f+this.G|0,p=p+this.H|0,this.set(t,n,l,c,u,d,f,p)}roundClean(){s.fill(0)}destroy(){this.set(0,0,0,0,0,0,0,0),this.buffer.fill(0)}}r.SHA256=l;class c extends l{constructor(){super(),this.A=-1056596264,this.B=914150663,this.C=812702999,this.D=-150054599,this.E=-4191439,this.F=1750603025,this.G=1694076839,this.H=-1090891868,this.outputLen=28}}r.sha256=(0,o.wrapConstructor)((()=>new l)),r.sha224=(0,o.wrapConstructor)((()=>new c))},664:(e,r,t)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.Hash=r.nextTick=r.byteSwapIfBE=r.isLE=void 0,r.isBytes=function(e){return e instanceof Uint8Array||ArrayBuffer.isView(e)&&"Uint8Array"===e.constructor.name},r.u8=function(e){return new Uint8Array(e.buffer,e.byteOffset,e.byteLength)},r.u32=function(e){return new Uint32Array(e.buffer,e.byteOffset,Math.floor(e.byteLength/4))},r.createView=function(e){return new DataView(e.buffer,e.byteOffset,e.byteLength)},r.rotr=function(e,r){return e<<32-r|e>>>r},r.rotl=function(e,r){return e<<r|e>>>32-r>>>0},r.byteSwap=i,r.byteSwap32=function(e){for(let r=0;r<e.length;r++)e[r]=i(e[r])},r.bytesToHex=function(e){(0,o.abytes)(e);let r="";for(let t=0;t<e.length;t++)r+=n[e[t]];return r},r.hexToBytes=function(e){if("string"!=typeof e)throw new Error("hex string expected, got "+typeof e);const r=e.length,t=r/2;if(r%2)throw new Error("hex string expected, got unpadded hex of length "+r);const a=new Uint8Array(t);for(let r=0,o=0;r<t;r++,o+=2){const t=l(e.charCodeAt(o)),i=l(e.charCodeAt(o+1));if(void 0===t||void 0===i){const r=e[o]+e[o+1];throw new Error('hex string expected, got non-hex character "'+r+'" at index '+o)}a[r]=16*t+i}return a},r.asyncLoop=async function(e,t,a){let o=Date.now();for(let i=0;i<e;i++){a(i);const e=Date.now()-o;e>=0&&e<t||(await(0,r.nextTick)(),o+=e)}},r.utf8ToBytes=c,r.toBytes=u,r.concatBytes=function(...e){let r=0;for(let t=0;t<e.length;t++){const a=e[t];(0,o.abytes)(a),r+=a.length}const t=new Uint8Array(r);for(let r=0,a=0;r<e.length;r++){const o=e[r];t.set(o,a),a+=o.length}return t},r.checkOpts=function(e,r){if(void 0!==r&&"[object Object]"!=={}.toString.call(r))throw new Error("Options should be object or undefined");return Object.assign(e,r)},r.wrapConstructor=function(e){const r=r=>e().update(u(r)).digest(),t=e();return r.outputLen=t.outputLen,r.blockLen=t.blockLen,r.create=()=>e(),r},r.wrapConstructorWithOpts=function(e){const r=(r,t)=>e(t).update(u(r)).digest(),t=e({});return r.outputLen=t.outputLen,r.blockLen=t.blockLen,r.create=r=>e(r),r},r.wrapXOFConstructorWithOpts=function(e){const r=(r,t)=>e(t).update(u(r)).digest(),t=e({});return r.outputLen=t.outputLen,r.blockLen=t.blockLen,r.create=r=>e(r),r},r.randomBytes=function(e=32){if(a.crypto&&"function"==typeof a.crypto.getRandomValues)return a.crypto.getRandomValues(new Uint8Array(e));if(a.crypto&&"function"==typeof a.crypto.randomBytes)return a.crypto.randomBytes(e);throw new Error("crypto.getRandomValues must be defined")};const a=t(112),o=t(721);function i(e){return e<<24&4278190080|e<<8&16711680|e>>>8&65280|e>>>24&255}r.isLE=68===new Uint8Array(new Uint32Array([287454020]).buffer)[0],r.byteSwapIfBE=r.isLE?e=>e:e=>i(e);const n=Array.from({length:256},((e,r)=>r.toString(16).padStart(2,"0"))),s={_0:48,_9:57,A:65,F:70,a:97,f:102};function l(e){return e>=s._0&&e<=s._9?e-s._0:e>=s.A&&e<=s.F?e-(s.A-10):e>=s.a&&e<=s.f?e-(s.a-10):void 0}function c(e){if("string"!=typeof e)throw new Error("utf8ToBytes expected string, got "+typeof e);return new Uint8Array((new TextEncoder).encode(e))}function u(e){return"string"==typeof e&&(e=c(e)),(0,o.abytes)(e),e}r.nextTick=async()=>{},r.Hash=class{clone(){return this._cloneInto()}}},557:(e,r)=>{"use strict";function t(e){if(!Number.isSafeInteger(e)||e<0)throw new Error(`Wrong positive integer: ${e}`)}function a(e){if("boolean"!=typeof e)throw new Error(`Expected boolean, not ${e}`)}function o(e,...r){if(!(e instanceof Uint8Array))throw new Error("Expected Uint8Array");if(r.length>0&&!r.includes(e.length))throw new Error(`Expected Uint8Array of length ${r}, not of length=${e.length}`)}function i(e){if("function"!=typeof e||"function"!=typeof e.create)throw new Error("Hash should be wrapped by utils.wrapConstructor");t(e.outputLen),t(e.blockLen)}function n(e,r=!0){if(e.destroyed)throw new Error("Hash instance has been destroyed");if(r&&e.finished)throw new Error("Hash#digest() has already been called")}function s(e,r){o(e);const t=r.outputLen;if(e.length<t)throw new Error(`digestInto() expects output buffer of length at least ${t}`)}Object.defineProperty(r,"__esModule",{value:!0}),r.output=r.exists=r.hash=r.bytes=r.bool=r.number=void 0,r.number=t,r.bool=a,r.bytes=o,r.hash=i,r.exists=n,r.output=s;const l={number:t,bool:a,bytes:o,hash:i,exists:n,output:s};r.default=l},915:(e,r,t)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.SHA2=void 0;const a=t(557),o=t(175);class i extends o.Hash{constructor(e,r,t,a){super(),this.blockLen=e,this.outputLen=r,this.padOffset=t,this.isLE=a,this.finished=!1,this.length=0,this.pos=0,this.destroyed=!1,this.buffer=new Uint8Array(e),this.view=(0,o.createView)(this.buffer)}update(e){(0,a.exists)(this);const{view:r,buffer:t,blockLen:i}=this,n=(e=(0,o.toBytes)(e)).length;for(let a=0;a<n;){const s=Math.min(i-this.pos,n-a);if(s!==i)t.set(e.subarray(a,a+s),this.pos),this.pos+=s,a+=s,this.pos===i&&(this.process(r,0),this.pos=0);else{const r=(0,o.createView)(e);for(;i<=n-a;a+=i)this.process(r,a)}}return this.length+=e.length,this.roundClean(),this}digestInto(e){(0,a.exists)(this),(0,a.output)(e,this),this.finished=!0;const{buffer:r,view:t,blockLen:i,isLE:n}=this;let{pos:s}=this;r[s++]=128,this.buffer.subarray(s).fill(0),this.padOffset>i-s&&(this.process(t,0),s=0);for(let e=s;e<i;e++)r[e]=0;!function(e,r,t,a){if("function"==typeof e.setBigUint64)return e.setBigUint64(r,t,a);const o=BigInt(32),i=BigInt(4294967295),n=Number(t>>o&i),s=Number(t&i),l=a?4:0,c=a?0:4;e.setUint32(r+l,n,a),e.setUint32(r+c,s,a)}(t,i-8,BigInt(8*this.length),n),this.process(t,0);const l=(0,o.createView)(e),c=this.outputLen;if(c%4)throw new Error("_sha2: outputLen should be aligned to 32bit");const u=c/4,d=this.get();if(u>d.length)throw new Error("_sha2: outputLen bigger than state");for(let e=0;e<u;e++)l.setUint32(4*e,d[e],n)}digest(){const{buffer:e,outputLen:r}=this;this.digestInto(e);const t=e.slice(0,r);return this.destroy(),t}_cloneInto(e){e||(e=new this.constructor),e.set(...this.get());const{blockLen:r,buffer:t,length:a,finished:o,destroyed:i,pos:n}=this;return e.length=a,e.pos=n,e.finished=o,e.destroyed=i,a%r&&e.buffer.set(t),e}}r.SHA2=i},318:(e,r)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.add5L=r.add5H=r.add4H=r.add4L=r.add3H=r.add3L=r.add=r.rotlBL=r.rotlBH=r.rotlSL=r.rotlSH=r.rotr32L=r.rotr32H=r.rotrBL=r.rotrBH=r.rotrSL=r.rotrSH=r.shrSL=r.shrSH=r.toBig=r.split=r.fromBig=void 0;const t=BigInt(2**32-1),a=BigInt(32);function o(e,r=!1){return r?{h:Number(e&t),l:Number(e>>a&t)}:{h:0|Number(e>>a&t),l:0|Number(e&t)}}function i(e,r=!1){let t=new Uint32Array(e.length),a=new Uint32Array(e.length);for(let i=0;i<e.length;i++){const{h:n,l:s}=o(e[i],r);[t[i],a[i]]=[n,s]}return[t,a]}r.fromBig=o,r.split=i;const n=(e,r)=>BigInt(e>>>0)<<a|BigInt(r>>>0);r.toBig=n;const s=(e,r,t)=>e>>>t;r.shrSH=s;const l=(e,r,t)=>e<<32-t|r>>>t;r.shrSL=l;const c=(e,r,t)=>e>>>t|r<<32-t;r.rotrSH=c;const u=(e,r,t)=>e<<32-t|r>>>t;r.rotrSL=u;const d=(e,r,t)=>e<<64-t|r>>>t-32;r.rotrBH=d;const f=(e,r,t)=>e>>>t-32|r<<64-t;r.rotrBL=f;const p=(e,r)=>r;r.rotr32H=p;const h=(e,r)=>e;r.rotr32L=h;const m=(e,r,t)=>e<<t|r>>>32-t;r.rotlSH=m;const b=(e,r,t)=>r<<t|e>>>32-t;r.rotlSL=b;const g=(e,r,t)=>r<<t-32|e>>>64-t;r.rotlBH=g;const v=(e,r,t)=>e<<t-32|r>>>64-t;function y(e,r,t,a){const o=(r>>>0)+(a>>>0);return{h:e+t+(o/2**32|0)|0,l:0|o}}r.rotlBL=v,r.add=y;const w=(e,r,t)=>(e>>>0)+(r>>>0)+(t>>>0);r.add3L=w;const k=(e,r,t,a)=>r+t+a+(e/2**32|0)|0;r.add3H=k;const x=(e,r,t,a)=>(e>>>0)+(r>>>0)+(t>>>0)+(a>>>0);r.add4L=x;const z=(e,r,t,a,o)=>r+t+a+o+(e/2**32|0)|0;r.add4H=z;const E=(e,r,t,a,o)=>(e>>>0)+(r>>>0)+(t>>>0)+(a>>>0)+(o>>>0);r.add5L=E;const B=(e,r,t,a,o,i)=>r+t+a+o+i+(e/2**32|0)|0;r.add5H=B;const j={fromBig:o,split:i,toBig:n,shrSH:s,shrSL:l,rotrSH:c,rotrSL:u,rotrBH:d,rotrBL:f,rotr32H:p,rotr32L:h,rotlSH:m,rotlSL:b,rotlBH:g,rotlBL:v,add:y,add3L:w,add3H:k,add4L:x,add4H:z,add5H:B,add5L:E};r.default=j},145:(e,r)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.crypto=void 0,r.crypto="object"==typeof globalThis&&"crypto"in globalThis?globalThis.crypto:void 0},615:(e,r,t)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.hmac=r.HMAC=void 0;const a=t(557),o=t(175);class i extends o.Hash{constructor(e,r){super(),this.finished=!1,this.destroyed=!1,(0,a.hash)(e);const t=(0,o.toBytes)(r);if(this.iHash=e.create(),"function"!=typeof this.iHash.update)throw new Error("Expected instance of class which extends utils.Hash");this.blockLen=this.iHash.blockLen,this.outputLen=this.iHash.outputLen;const i=this.blockLen,n=new Uint8Array(i);n.set(t.length>i?e.create().update(t).digest():t);for(let e=0;e<n.length;e++)n[e]^=54;this.iHash.update(n),this.oHash=e.create();for(let e=0;e<n.length;e++)n[e]^=106;this.oHash.update(n),n.fill(0)}update(e){return(0,a.exists)(this),this.iHash.update(e),this}digestInto(e){(0,a.exists)(this),(0,a.bytes)(e,this.outputLen),this.finished=!0,this.iHash.digestInto(e),this.oHash.update(e),this.oHash.digestInto(e),this.destroy()}digest(){const e=new Uint8Array(this.oHash.outputLen);return this.digestInto(e),e}_cloneInto(e){e||(e=Object.create(Object.getPrototypeOf(this),{}));const{oHash:r,iHash:t,finished:a,destroyed:o,blockLen:i,outputLen:n}=this;return e.finished=a,e.destroyed=o,e.blockLen=i,e.outputLen=n,e.oHash=r._cloneInto(e.oHash),e.iHash=t._cloneInto(e.iHash),e}destroy(){this.destroyed=!0,this.oHash.destroy(),this.iHash.destroy()}}r.HMAC=i,r.hmac=(e,r,t)=>new i(e,r).update(t).digest(),r.hmac.create=(e,r)=>new i(e,r)},941:(e,r,t)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.pbkdf2Async=r.pbkdf2=void 0;const a=t(557),o=t(615),i=t(175);function n(e,r,t,n){(0,a.hash)(e);const s=(0,i.checkOpts)({dkLen:32,asyncTick:10},n),{c:l,dkLen:c,asyncTick:u}=s;if((0,a.number)(l),(0,a.number)(c),(0,a.number)(u),l<1)throw new Error("PBKDF2: iterations (c) should be >= 1");const d=(0,i.toBytes)(r),f=(0,i.toBytes)(t),p=new Uint8Array(c),h=o.hmac.create(e,d),m=h._cloneInto().update(f);return{c:l,dkLen:c,asyncTick:u,DK:p,PRF:h,PRFSalt:m}}function s(e,r,t,a,o){return e.destroy(),r.destroy(),a&&a.destroy(),o.fill(0),t}r.pbkdf2=function(e,r,t,a){const{c:o,dkLen:l,DK:c,PRF:u,PRFSalt:d}=n(e,r,t,a);let f;const p=new Uint8Array(4),h=(0,i.createView)(p),m=new Uint8Array(u.outputLen);for(let e=1,r=0;r<l;e++,r+=u.outputLen){const t=c.subarray(r,r+u.outputLen);h.setInt32(0,e,!1),(f=d._cloneInto(f)).update(p).digestInto(m),t.set(m.subarray(0,t.length));for(let e=1;e<o;e++){u._cloneInto(f).update(m).digestInto(m);for(let e=0;e<t.length;e++)t[e]^=m[e]}}return s(u,d,c,f,m)},r.pbkdf2Async=async function(e,r,t,a){const{c:o,dkLen:l,asyncTick:c,DK:u,PRF:d,PRFSalt:f}=n(e,r,t,a);let p;const h=new Uint8Array(4),m=(0,i.createView)(h),b=new Uint8Array(d.outputLen);for(let e=1,r=0;r<l;e++,r+=d.outputLen){const t=u.subarray(r,r+d.outputLen);m.setInt32(0,e,!1),(p=f._cloneInto(p)).update(h).digestInto(b),t.set(b.subarray(0,t.length)),await(0,i.asyncLoop)(o-1,c,(()=>{d._cloneInto(p).update(b).digestInto(b);for(let e=0;e<t.length;e++)t[e]^=b[e]}))}return s(d,f,u,p,b)}},623:(e,r,t)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.sha224=r.sha256=void 0;const a=t(915),o=t(175),i=(e,r,t)=>e&r^e&t^r&t,n=new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]),s=new Uint32Array([1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225]),l=new Uint32Array(64);class c extends a.SHA2{constructor(){super(64,32,8,!1),this.A=0|s[0],this.B=0|s[1],this.C=0|s[2],this.D=0|s[3],this.E=0|s[4],this.F=0|s[5],this.G=0|s[6],this.H=0|s[7]}get(){const{A:e,B:r,C:t,D:a,E:o,F:i,G:n,H:s}=this;return[e,r,t,a,o,i,n,s]}set(e,r,t,a,o,i,n,s){this.A=0|e,this.B=0|r,this.C=0|t,this.D=0|a,this.E=0|o,this.F=0|i,this.G=0|n,this.H=0|s}process(e,r){for(let t=0;t<16;t++,r+=4)l[t]=e.getUint32(r,!1);for(let e=16;e<64;e++){const r=l[e-15],t=l[e-2],a=(0,o.rotr)(r,7)^(0,o.rotr)(r,18)^r>>>3,i=(0,o.rotr)(t,17)^(0,o.rotr)(t,19)^t>>>10;l[e]=i+l[e-7]+a+l[e-16]|0}let{A:t,B:a,C:s,D:c,E:u,F:d,G:f,H:p}=this;for(let e=0;e<64;e++){const r=p+((0,o.rotr)(u,6)^(0,o.rotr)(u,11)^(0,o.rotr)(u,25))+((h=u)&d^~h&f)+n[e]+l[e]|0,m=((0,o.rotr)(t,2)^(0,o.rotr)(t,13)^(0,o.rotr)(t,22))+i(t,a,s)|0;p=f,f=d,d=u,u=c+r|0,c=s,s=a,a=t,t=r+m|0}var h;t=t+this.A|0,a=a+this.B|0,s=s+this.C|0,c=c+this.D|0,u=u+this.E|0,d=d+this.F|0,f=f+this.G|0,p=p+this.H|0,this.set(t,a,s,c,u,d,f,p)}roundClean(){l.fill(0)}destroy(){this.set(0,0,0,0,0,0,0,0),this.buffer.fill(0)}}class u extends c{constructor(){super(),this.A=-1056596264,this.B=914150663,this.C=812702999,this.D=-150054599,this.E=-4191439,this.F=1750603025,this.G=1694076839,this.H=-1090891868,this.outputLen=28}}r.sha256=(0,o.wrapConstructor)((()=>new c)),r.sha224=(0,o.wrapConstructor)((()=>new u))},102:(e,r,t)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.sha384=r.sha512_256=r.sha512_224=r.sha512=r.SHA512=void 0;const a=t(915),o=t(318),i=t(175),[n,s]=(()=>o.default.split(["0x428a2f98d728ae22","0x7137449123ef65cd","0xb5c0fbcfec4d3b2f","0xe9b5dba58189dbbc","0x3956c25bf348b538","0x59f111f1b605d019","0x923f82a4af194f9b","0xab1c5ed5da6d8118","0xd807aa98a3030242","0x12835b0145706fbe","0x243185be4ee4b28c","0x550c7dc3d5ffb4e2","0x72be5d74f27b896f","0x80deb1fe3b1696b1","0x9bdc06a725c71235","0xc19bf174cf692694","0xe49b69c19ef14ad2","0xefbe4786384f25e3","0x0fc19dc68b8cd5b5","0x240ca1cc77ac9c65","0x2de92c6f592b0275","0x4a7484aa6ea6e483","0x5cb0a9dcbd41fbd4","0x76f988da831153b5","0x983e5152ee66dfab","0xa831c66d2db43210","0xb00327c898fb213f","0xbf597fc7beef0ee4","0xc6e00bf33da88fc2","0xd5a79147930aa725","0x06ca6351e003826f","0x142929670a0e6e70","0x27b70a8546d22ffc","0x2e1b21385c26c926","0x4d2c6dfc5ac42aed","0x53380d139d95b3df","0x650a73548baf63de","0x766a0abb3c77b2a8","0x81c2c92e47edaee6","0x92722c851482353b","0xa2bfe8a14cf10364","0xa81a664bbc423001","0xc24b8b70d0f89791","0xc76c51a30654be30","0xd192e819d6ef5218","0xd69906245565a910","0xf40e35855771202a","0x106aa07032bbd1b8","0x19a4c116b8d2d0c8","0x1e376c085141ab53","0x2748774cdf8eeb99","0x34b0bcb5e19b48a8","0x391c0cb3c5c95a63","0x4ed8aa4ae3418acb","0x5b9cca4f7763e373","0x682e6ff3d6b2b8a3","0x748f82ee5defb2fc","0x78a5636f43172f60","0x84c87814a1f0ab72","0x8cc702081a6439ec","0x90befffa23631e28","0xa4506cebde82bde9","0xbef9a3f7b2c67915","0xc67178f2e372532b","0xca273eceea26619c","0xd186b8c721c0c207","0xeada7dd6cde0eb1e","0xf57d4f7fee6ed178","0x06f067aa72176fba","0x0a637dc5a2c898a6","0x113f9804bef90dae","0x1b710b35131c471b","0x28db77f523047d84","0x32caab7b40c72493","0x3c9ebe0a15c9bebc","0x431d67c49c100d4c","0x4cc5d4becb3e42b6","0x597f299cfc657e2a","0x5fcb6fab3ad6faec","0x6c44198c4a475817"].map((e=>BigInt(e)))))(),l=new Uint32Array(80),c=new Uint32Array(80);class u extends a.SHA2{constructor(){super(128,64,16,!1),this.Ah=1779033703,this.Al=-205731576,this.Bh=-1150833019,this.Bl=-2067093701,this.Ch=1013904242,this.Cl=-23791573,this.Dh=-1521486534,this.Dl=1595750129,this.Eh=1359893119,this.El=-1377402159,this.Fh=-1694144372,this.Fl=725511199,this.Gh=528734635,this.Gl=-79577749,this.Hh=1541459225,this.Hl=327033209}get(){const{Ah:e,Al:r,Bh:t,Bl:a,Ch:o,Cl:i,Dh:n,Dl:s,Eh:l,El:c,Fh:u,Fl:d,Gh:f,Gl:p,Hh:h,Hl:m}=this;return[e,r,t,a,o,i,n,s,l,c,u,d,f,p,h,m]}set(e,r,t,a,o,i,n,s,l,c,u,d,f,p,h,m){this.Ah=0|e,this.Al=0|r,this.Bh=0|t,this.Bl=0|a,this.Ch=0|o,this.Cl=0|i,this.Dh=0|n,this.Dl=0|s,this.Eh=0|l,this.El=0|c,this.Fh=0|u,this.Fl=0|d,this.Gh=0|f,this.Gl=0|p,this.Hh=0|h,this.Hl=0|m}process(e,r){for(let t=0;t<16;t++,r+=4)l[t]=e.getUint32(r),c[t]=e.getUint32(r+=4);for(let e=16;e<80;e++){const r=0|l[e-15],t=0|c[e-15],a=o.default.rotrSH(r,t,1)^o.default.rotrSH(r,t,8)^o.default.shrSH(r,t,7),i=o.default.rotrSL(r,t,1)^o.default.rotrSL(r,t,8)^o.default.shrSL(r,t,7),n=0|l[e-2],s=0|c[e-2],u=o.default.rotrSH(n,s,19)^o.default.rotrBH(n,s,61)^o.default.shrSH(n,s,6),d=o.default.rotrSL(n,s,19)^o.default.rotrBL(n,s,61)^o.default.shrSL(n,s,6),f=o.default.add4L(i,d,c[e-7],c[e-16]),p=o.default.add4H(f,a,u,l[e-7],l[e-16]);l[e]=0|p,c[e]=0|f}let{Ah:t,Al:a,Bh:i,Bl:u,Ch:d,Cl:f,Dh:p,Dl:h,Eh:m,El:b,Fh:g,Fl:v,Gh:y,Gl:w,Hh:k,Hl:x}=this;for(let e=0;e<80;e++){const r=o.default.rotrSH(m,b,14)^o.default.rotrSH(m,b,18)^o.default.rotrBH(m,b,41),z=o.default.rotrSL(m,b,14)^o.default.rotrSL(m,b,18)^o.default.rotrBL(m,b,41),E=m&g^~m&y,B=b&v^~b&w,j=o.default.add5L(x,z,B,s[e],c[e]),A=o.default.add5H(j,k,r,E,n[e],l[e]),L=0|j,S=o.default.rotrSH(t,a,28)^o.default.rotrBH(t,a,34)^o.default.rotrBH(t,a,39),I=o.default.rotrSL(t,a,28)^o.default.rotrBL(t,a,34)^o.default.rotrBL(t,a,39),q=t&i^t&d^i&d,U=a&u^a&f^u&f;k=0|y,x=0|w,y=0|g,w=0|v,g=0|m,v=0|b,({h:m,l:b}=o.default.add(0|p,0|h,0|A,0|L)),p=0|d,h=0|f,d=0|i,f=0|u,i=0|t,u=0|a;const H=o.default.add3L(L,I,U);t=o.default.add3H(H,A,S,q),a=0|H}({h:t,l:a}=o.default.add(0|this.Ah,0|this.Al,0|t,0|a)),({h:i,l:u}=o.default.add(0|this.Bh,0|this.Bl,0|i,0|u)),({h:d,l:f}=o.default.add(0|this.Ch,0|this.Cl,0|d,0|f)),({h:p,l:h}=o.default.add(0|this.Dh,0|this.Dl,0|p,0|h)),({h:m,l:b}=o.default.add(0|this.Eh,0|this.El,0|m,0|b)),({h:g,l:v}=o.default.add(0|this.Fh,0|this.Fl,0|g,0|v)),({h:y,l:w}=o.default.add(0|this.Gh,0|this.Gl,0|y,0|w)),({h:k,l:x}=o.default.add(0|this.Hh,0|this.Hl,0|k,0|x)),this.set(t,a,i,u,d,f,p,h,m,b,g,v,y,w,k,x)}roundClean(){l.fill(0),c.fill(0)}destroy(){this.buffer.fill(0),this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)}}r.SHA512=u;class d extends u{constructor(){super(),this.Ah=-1942145080,this.Al=424955298,this.Bh=1944164710,this.Bl=-1982016298,this.Ch=502970286,this.Cl=855612546,this.Dh=1738396948,this.Dl=1479516111,this.Eh=258812777,this.El=2077511080,this.Fh=2011393907,this.Fl=79989058,this.Gh=1067287976,this.Gl=1780299464,this.Hh=286451373,this.Hl=-1848208735,this.outputLen=28}}class f extends u{constructor(){super(),this.Ah=573645204,this.Al=-64227540,this.Bh=-1621794909,this.Bl=-934517566,this.Ch=596883563,this.Cl=1867755857,this.Dh=-1774684391,this.Dl=1497426621,this.Eh=-1775747358,this.El=-1467023389,this.Fh=-1101128155,this.Fl=1401305490,this.Gh=721525244,this.Gl=746961066,this.Hh=246885852,this.Hl=-2117784414,this.outputLen=32}}class p extends u{constructor(){super(),this.Ah=-876896931,this.Al=-1056596264,this.Bh=1654270250,this.Bl=914150663,this.Ch=-1856437926,this.Cl=812702999,this.Dh=355462360,this.Dl=-150054599,this.Eh=1731405415,this.El=-4191439,this.Fh=-1900787065,this.Fl=1750603025,this.Gh=-619958771,this.Gl=1694076839,this.Hh=1203062813,this.Hl=-1090891868,this.outputLen=48}}r.sha512=(0,i.wrapConstructor)((()=>new u)),r.sha512_224=(0,i.wrapConstructor)((()=>new d)),r.sha512_256=(0,i.wrapConstructor)((()=>new f)),r.sha384=(0,i.wrapConstructor)((()=>new p))},175:(e,r,t)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.randomBytes=r.wrapXOFConstructorWithOpts=r.wrapConstructorWithOpts=r.wrapConstructor=r.checkOpts=r.Hash=r.concatBytes=r.toBytes=r.utf8ToBytes=r.asyncLoop=r.nextTick=r.hexToBytes=r.bytesToHex=r.isLE=r.rotr=r.createView=r.u32=r.u8=void 0;const a=t(145),o=e=>e instanceof Uint8Array;if(r.u8=e=>new Uint8Array(e.buffer,e.byteOffset,e.byteLength),r.u32=e=>new Uint32Array(e.buffer,e.byteOffset,Math.floor(e.byteLength/4)),r.createView=e=>new DataView(e.buffer,e.byteOffset,e.byteLength),r.rotr=(e,r)=>e<<32-r|e>>>r,r.isLE=68===new Uint8Array(new Uint32Array([287454020]).buffer)[0],!r.isLE)throw new Error("Non little-endian hardware is not supported");const i=Array.from({length:256},((e,r)=>r.toString(16).padStart(2,"0")));function n(e){if("string"!=typeof e)throw new Error("utf8ToBytes expected string, got "+typeof e);return new Uint8Array((new TextEncoder).encode(e))}function s(e){if("string"==typeof e&&(e=n(e)),!o(e))throw new Error("expected Uint8Array, got "+typeof e);return e}r.bytesToHex=function(e){if(!o(e))throw new Error("Uint8Array expected");let r="";for(let t=0;t<e.length;t++)r+=i[e[t]];return r},r.hexToBytes=function(e){if("string"!=typeof e)throw new Error("hex string expected, got "+typeof e);const r=e.length;if(r%2)throw new Error("padded hex string expected, got unpadded hex of length "+r);const t=new Uint8Array(r/2);for(let r=0;r<t.length;r++){const a=2*r,o=e.slice(a,a+2),i=Number.parseInt(o,16);if(Number.isNaN(i)||i<0)throw new Error("Invalid byte sequence");t[r]=i}return t},r.nextTick=async()=>{},r.asyncLoop=async function(e,t,a){let o=Date.now();for(let i=0;i<e;i++){a(i);const e=Date.now()-o;e>=0&&e<t||(await(0,r.nextTick)(),o+=e)}},r.utf8ToBytes=n,r.toBytes=s,r.concatBytes=function(...e){const r=new Uint8Array(e.reduce(((e,r)=>e+r.length),0));let t=0;return e.forEach((e=>{if(!o(e))throw new Error("Uint8Array expected");r.set(e,t),t+=e.length})),r},r.Hash=class{clone(){return this._cloneInto()}};const l={}.toString;r.checkOpts=function(e,r){if(void 0!==r&&"[object Object]"!==l.call(r))throw new Error("Options should be object or undefined");return Object.assign(e,r)},r.wrapConstructor=function(e){const r=r=>e().update(s(r)).digest(),t=e();return r.outputLen=t.outputLen,r.blockLen=t.blockLen,r.create=()=>e(),r},r.wrapConstructorWithOpts=function(e){const r=(r,t)=>e(t).update(s(r)).digest(),t=e({});return r.outputLen=t.outputLen,r.blockLen=t.blockLen,r.create=r=>e(r),r},r.wrapXOFConstructorWithOpts=function(e){const r=(r,t)=>e(t).update(s(r)).digest(),t=e({});return r.outputLen=t.outputLen,r.blockLen=t.blockLen,r.create=r=>e(r),r},r.randomBytes=function(e=32){if(a.crypto&&"function"==typeof a.crypto.getRandomValues)return a.crypto.getRandomValues(new Uint8Array(e));throw new Error("crypto.getRandomValues must be defined")}},526:(e,r)=>{"use strict";r.byteLength=function(e){var r=s(e),t=r[0],a=r[1];return 3*(t+a)/4-a},r.toByteArray=function(e){var r,t,i=s(e),n=i[0],l=i[1],c=new o(function(e,r,t){return 3*(r+t)/4-t}(0,n,l)),u=0,d=l>0?n-4:n;for(t=0;t<d;t+=4)r=a[e.charCodeAt(t)]<<18|a[e.charCodeAt(t+1)]<<12|a[e.charCodeAt(t+2)]<<6|a[e.charCodeAt(t+3)],c[u++]=r>>16&255,c[u++]=r>>8&255,c[u++]=255&r;return 2===l&&(r=a[e.charCodeAt(t)]<<2|a[e.charCodeAt(t+1)]>>4,c[u++]=255&r),1===l&&(r=a[e.charCodeAt(t)]<<10|a[e.charCodeAt(t+1)]<<4|a[e.charCodeAt(t+2)]>>2,c[u++]=r>>8&255,c[u++]=255&r),c},r.fromByteArray=function(e){for(var r,a=e.length,o=a%3,i=[],n=16383,s=0,c=a-o;s<c;s+=n)i.push(l(e,s,s+n>c?c:s+n));return 1===o?(r=e[a-1],i.push(t[r>>2]+t[r<<4&63]+"==")):2===o&&(r=(e[a-2]<<8)+e[a-1],i.push(t[r>>10]+t[r>>4&63]+t[r<<2&63]+"=")),i.join("")};for(var t=[],a=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",n=0;n<64;++n)t[n]=i[n],a[i.charCodeAt(n)]=n;function s(e){var r=e.length;if(r%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var t=e.indexOf("=");return-1===t&&(t=r),[t,t===r?0:4-t%4]}function l(e,r,a){for(var o,i,n=[],s=r;s<a;s+=3)o=(e[s]<<16&16711680)+(e[s+1]<<8&65280)+(255&e[s+2]),n.push(t[(i=o)>>18&63]+t[i>>12&63]+t[i>>6&63]+t[63&i]);return n.join("")}a["-".charCodeAt(0)]=62,a["_".charCodeAt(0)]=63},907:(e,r,t)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0});const a={};let o;r.wordlists=a,r._default=o;try{r._default=o=t(607),a.czech=o}catch(e){}try{r._default=o=t(898),a.chinese_simplified=o}catch(e){}try{r._default=o=t(81),a.chinese_traditional=o}catch(e){}try{r._default=o=t(428),a.korean=o}catch(e){}try{r._default=o=t(40),a.french=o}catch(e){}try{r._default=o=t(576),a.italian=o}catch(e){}try{r._default=o=t(376),a.spanish=o}catch(e){}try{r._default=o=t(967),a.japanese=o,a.JA=o}catch(e){}try{r._default=o=t(357),a.portuguese=o}catch(e){}try{r._default=o=t(736),a.english=o,a.EN=o}catch(e){}},749:(e,r,t)=>{"use strict";var a=t(287).hp;Object.defineProperty(r,"__esModule",{value:!0});const o=t(623),i=t(102),n=t(941),s=t(175),l=t(907);let c=l._default;const u="Invalid mnemonic",d="Invalid entropy",f="A wordlist is required but a default could not be found.\nPlease pass a 2048 word array explicitly.";function p(e){return(e||"").normalize("NFKD")}function h(e,r,t){for(;e.length<t;)e=r+e;return e}function m(e){return parseInt(e,2)}function b(e){return e.map((e=>h(e.toString(2),"0",8))).join("")}function g(e){const r=8*e.length/32,t=o.sha256(Uint8Array.from(e));return b(Array.from(t)).slice(0,r)}function v(e){return"mnemonic"+(e||"")}function y(e,r){if(!(r=r||c))throw new Error(f);const t=p(e).split(" ");if(t.length%3!=0)throw new Error(u);const o=t.map((e=>{const t=r.indexOf(e);if(-1===t)throw new Error(u);return h(t.toString(2),"0",11)})).join(""),i=32*Math.floor(o.length/33),n=o.slice(0,i),s=o.slice(i),l=n.match(/(.{1,8})/g).map(m);if(l.length<16)throw new Error(d);if(l.length>32)throw new Error(d);if(l.length%4!=0)throw new Error(d);const b=a.from(l);if(g(b)!==s)throw new Error("Invalid mnemonic checksum");return b.toString("hex")}function w(e,r){if(a.isBuffer(e)||(e=a.from(e,"hex")),!(r=r||c))throw new Error(f);if(e.length<16)throw new TypeError(d);if(e.length>32)throw new TypeError(d);if(e.length%4!=0)throw new TypeError(d);const t=(b(Array.from(e))+g(e)).match(/(.{1,11})/g).map((e=>{const t=m(e);return r[t]}));return"あいこくしん"===r[0]?t.join("　"):t.join(" ")}r.mnemonicToSeedSync=function(e,r){const t=Uint8Array.from(a.from(p(e),"utf8")),o=Uint8Array.from(a.from(v(p(r)),"utf8")),s=n.pbkdf2(i.sha512,t,o,{c:2048,dkLen:64});return a.from(s)},r.mnemonicToSeed=function(e,r){const t=Uint8Array.from(a.from(p(e),"utf8")),o=Uint8Array.from(a.from(v(p(r)),"utf8"));return n.pbkdf2Async(i.sha512,t,o,{c:2048,dkLen:64}).then((e=>a.from(e)))},r.mnemonicToEntropy=y,r.entropyToMnemonic=w,r.generateMnemonic=function(e,r,t){if((e=e||128)%32!=0)throw new TypeError(d);return w((r=r||(e=>a.from(s.randomBytes(e))))(e/8),t)},r.validateMnemonic=function(e,r){try{y(e,r)}catch(e){return!1}return!0},r.setDefaultWordlist=function(e){const r=l.wordlists[e];if(!r)throw new Error('Could not find wordlist for language "'+e+'"');c=r},r.getDefaultWordlist=function(){if(!c)throw new Error("No Default Wordlist set");return Object.keys(l.wordlists).filter((e=>"JA"!==e&&"EN"!==e&&l.wordlists[e].every(((e,r)=>e===c[r]))))[0]};var k=t(907);r.wordlists=k.wordlists},287:(e,r,t)=>{"use strict";const a=t(526),o=t(251),i="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;r.hp=l,r.IS=50;const n=2147483647;function s(e){if(e>n)throw new RangeError('The value "'+e+'" is invalid for option "size"');const r=new Uint8Array(e);return Object.setPrototypeOf(r,l.prototype),r}function l(e,r,t){if("number"==typeof e){if("string"==typeof r)throw new TypeError('The "string" argument must be of type string. Received type number');return d(e)}return c(e,r,t)}function c(e,r,t){if("string"==typeof e)return function(e,r){if("string"==typeof r&&""!==r||(r="utf8"),!l.isEncoding(r))throw new TypeError("Unknown encoding: "+r);const t=0|m(e,r);let a=s(t);const o=a.write(e,r);return o!==t&&(a=a.slice(0,o)),a}(e,r);if(ArrayBuffer.isView(e))return function(e){if(W(e,Uint8Array)){const r=new Uint8Array(e);return p(r.buffer,r.byteOffset,r.byteLength)}return f(e)}(e);if(null==e)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(W(e,ArrayBuffer)||e&&W(e.buffer,ArrayBuffer))return p(e,r,t);if("undefined"!=typeof SharedArrayBuffer&&(W(e,SharedArrayBuffer)||e&&W(e.buffer,SharedArrayBuffer)))return p(e,r,t);if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type number');const a=e.valueOf&&e.valueOf();if(null!=a&&a!==e)return l.from(a,r,t);const o=function(e){if(l.isBuffer(e)){const r=0|h(e.length),t=s(r);return 0===t.length||e.copy(t,0,0,r),t}return void 0!==e.length?"number"!=typeof e.length||Y(e.length)?s(0):f(e):"Buffer"===e.type&&Array.isArray(e.data)?f(e.data):void 0}(e);if(o)return o;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return l.from(e[Symbol.toPrimitive]("string"),r,t);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function u(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function d(e){return u(e),s(e<0?0:0|h(e))}function f(e){const r=e.length<0?0:0|h(e.length),t=s(r);for(let a=0;a<r;a+=1)t[a]=255&e[a];return t}function p(e,r,t){if(r<0||e.byteLength<r)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<r+(t||0))throw new RangeError('"length" is outside of buffer bounds');let a;return a=void 0===r&&void 0===t?new Uint8Array(e):void 0===t?new Uint8Array(e,r):new Uint8Array(e,r,t),Object.setPrototypeOf(a,l.prototype),a}function h(e){if(e>=n)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+n.toString(16)+" bytes");return 0|e}function m(e,r){if(l.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||W(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);const t=e.length,a=arguments.length>2&&!0===arguments[2];if(!a&&0===t)return 0;let o=!1;for(;;)switch(r){case"ascii":case"latin1":case"binary":return t;case"utf8":case"utf-8":return $(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*t;case"hex":return t>>>1;case"base64":return G(e).length;default:if(o)return a?-1:$(e).length;r=(""+r).toLowerCase(),o=!0}}function b(e,r,t){let a=!1;if((void 0===r||r<0)&&(r=0),r>this.length)return"";if((void 0===t||t>this.length)&&(t=this.length),t<=0)return"";if((t>>>=0)<=(r>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return I(this,r,t);case"utf8":case"utf-8":return j(this,r,t);case"ascii":return L(this,r,t);case"latin1":case"binary":return S(this,r,t);case"base64":return B(this,r,t);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return q(this,r,t);default:if(a)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),a=!0}}function g(e,r,t){const a=e[r];e[r]=e[t],e[t]=a}function v(e,r,t,a,o){if(0===e.length)return-1;if("string"==typeof t?(a=t,t=0):t>2147483647?t=2147483647:t<-2147483648&&(t=-2147483648),Y(t=+t)&&(t=o?0:e.length-1),t<0&&(t=e.length+t),t>=e.length){if(o)return-1;t=e.length-1}else if(t<0){if(!o)return-1;t=0}if("string"==typeof r&&(r=l.from(r,a)),l.isBuffer(r))return 0===r.length?-1:y(e,r,t,a,o);if("number"==typeof r)return r&=255,"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(e,r,t):Uint8Array.prototype.lastIndexOf.call(e,r,t):y(e,[r],t,a,o);throw new TypeError("val must be string, number or Buffer")}function y(e,r,t,a,o){let i,n=1,s=e.length,l=r.length;if(void 0!==a&&("ucs2"===(a=String(a).toLowerCase())||"ucs-2"===a||"utf16le"===a||"utf-16le"===a)){if(e.length<2||r.length<2)return-1;n=2,s/=2,l/=2,t/=2}function c(e,r){return 1===n?e[r]:e.readUInt16BE(r*n)}if(o){let a=-1;for(i=t;i<s;i++)if(c(e,i)===c(r,-1===a?0:i-a)){if(-1===a&&(a=i),i-a+1===l)return a*n}else-1!==a&&(i-=i-a),a=-1}else for(t+l>s&&(t=s-l),i=t;i>=0;i--){let t=!0;for(let a=0;a<l;a++)if(c(e,i+a)!==c(r,a)){t=!1;break}if(t)return i}return-1}function w(e,r,t,a){t=Number(t)||0;const o=e.length-t;a?(a=Number(a))>o&&(a=o):a=o;const i=r.length;let n;for(a>i/2&&(a=i/2),n=0;n<a;++n){const a=parseInt(r.substr(2*n,2),16);if(Y(a))return n;e[t+n]=a}return n}function k(e,r,t,a){return Z($(r,e.length-t),e,t,a)}function x(e,r,t,a){return Z(function(e){const r=[];for(let t=0;t<e.length;++t)r.push(255&e.charCodeAt(t));return r}(r),e,t,a)}function z(e,r,t,a){return Z(G(r),e,t,a)}function E(e,r,t,a){return Z(function(e,r){let t,a,o;const i=[];for(let n=0;n<e.length&&!((r-=2)<0);++n)t=e.charCodeAt(n),a=t>>8,o=t%256,i.push(o),i.push(a);return i}(r,e.length-t),e,t,a)}function B(e,r,t){return 0===r&&t===e.length?a.fromByteArray(e):a.fromByteArray(e.slice(r,t))}function j(e,r,t){t=Math.min(e.length,t);const a=[];let o=r;for(;o<t;){const r=e[o];let i=null,n=r>239?4:r>223?3:r>191?2:1;if(o+n<=t){let t,a,s,l;switch(n){case 1:r<128&&(i=r);break;case 2:t=e[o+1],128==(192&t)&&(l=(31&r)<<6|63&t,l>127&&(i=l));break;case 3:t=e[o+1],a=e[o+2],128==(192&t)&&128==(192&a)&&(l=(15&r)<<12|(63&t)<<6|63&a,l>2047&&(l<55296||l>57343)&&(i=l));break;case 4:t=e[o+1],a=e[o+2],s=e[o+3],128==(192&t)&&128==(192&a)&&128==(192&s)&&(l=(15&r)<<18|(63&t)<<12|(63&a)<<6|63&s,l>65535&&l<1114112&&(i=l))}}null===i?(i=65533,n=1):i>65535&&(i-=65536,a.push(i>>>10&1023|55296),i=56320|1023&i),a.push(i),o+=n}return function(e){const r=e.length;if(r<=A)return String.fromCharCode.apply(String,e);let t="",a=0;for(;a<r;)t+=String.fromCharCode.apply(String,e.slice(a,a+=A));return t}(a)}l.TYPED_ARRAY_SUPPORT=function(){try{const e=new Uint8Array(1),r={foo:function(){return 42}};return Object.setPrototypeOf(r,Uint8Array.prototype),Object.setPrototypeOf(e,r),42===e.foo()}catch(e){return!1}}(),l.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(l.prototype,"parent",{enumerable:!0,get:function(){if(l.isBuffer(this))return this.buffer}}),Object.defineProperty(l.prototype,"offset",{enumerable:!0,get:function(){if(l.isBuffer(this))return this.byteOffset}}),l.poolSize=8192,l.from=function(e,r,t){return c(e,r,t)},Object.setPrototypeOf(l.prototype,Uint8Array.prototype),Object.setPrototypeOf(l,Uint8Array),l.alloc=function(e,r,t){return function(e,r,t){return u(e),e<=0?s(e):void 0!==r?"string"==typeof t?s(e).fill(r,t):s(e).fill(r):s(e)}(e,r,t)},l.allocUnsafe=function(e){return d(e)},l.allocUnsafeSlow=function(e){return d(e)},l.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==l.prototype},l.compare=function(e,r){if(W(e,Uint8Array)&&(e=l.from(e,e.offset,e.byteLength)),W(r,Uint8Array)&&(r=l.from(r,r.offset,r.byteLength)),!l.isBuffer(e)||!l.isBuffer(r))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===r)return 0;let t=e.length,a=r.length;for(let o=0,i=Math.min(t,a);o<i;++o)if(e[o]!==r[o]){t=e[o],a=r[o];break}return t<a?-1:a<t?1:0},l.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},l.concat=function(e,r){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return l.alloc(0);let t;if(void 0===r)for(r=0,t=0;t<e.length;++t)r+=e[t].length;const a=l.allocUnsafe(r);let o=0;for(t=0;t<e.length;++t){let r=e[t];if(W(r,Uint8Array))o+r.length>a.length?(l.isBuffer(r)||(r=l.from(r)),r.copy(a,o)):Uint8Array.prototype.set.call(a,r,o);else{if(!l.isBuffer(r))throw new TypeError('"list" argument must be an Array of Buffers');r.copy(a,o)}o+=r.length}return a},l.byteLength=m,l.prototype._isBuffer=!0,l.prototype.swap16=function(){const e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let r=0;r<e;r+=2)g(this,r,r+1);return this},l.prototype.swap32=function(){const e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let r=0;r<e;r+=4)g(this,r,r+3),g(this,r+1,r+2);return this},l.prototype.swap64=function(){const e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let r=0;r<e;r+=8)g(this,r,r+7),g(this,r+1,r+6),g(this,r+2,r+5),g(this,r+3,r+4);return this},l.prototype.toString=function(){const e=this.length;return 0===e?"":0===arguments.length?j(this,0,e):b.apply(this,arguments)},l.prototype.toLocaleString=l.prototype.toString,l.prototype.equals=function(e){if(!l.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===l.compare(this,e)},l.prototype.inspect=function(){let e="";const t=r.IS;return e=this.toString("hex",0,t).replace(/(.{2})/g,"$1 ").trim(),this.length>t&&(e+=" ... "),"<Buffer "+e+">"},i&&(l.prototype[i]=l.prototype.inspect),l.prototype.compare=function(e,r,t,a,o){if(W(e,Uint8Array)&&(e=l.from(e,e.offset,e.byteLength)),!l.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===r&&(r=0),void 0===t&&(t=e?e.length:0),void 0===a&&(a=0),void 0===o&&(o=this.length),r<0||t>e.length||a<0||o>this.length)throw new RangeError("out of range index");if(a>=o&&r>=t)return 0;if(a>=o)return-1;if(r>=t)return 1;if(this===e)return 0;let i=(o>>>=0)-(a>>>=0),n=(t>>>=0)-(r>>>=0);const s=Math.min(i,n),c=this.slice(a,o),u=e.slice(r,t);for(let e=0;e<s;++e)if(c[e]!==u[e]){i=c[e],n=u[e];break}return i<n?-1:n<i?1:0},l.prototype.includes=function(e,r,t){return-1!==this.indexOf(e,r,t)},l.prototype.indexOf=function(e,r,t){return v(this,e,r,t,!0)},l.prototype.lastIndexOf=function(e,r,t){return v(this,e,r,t,!1)},l.prototype.write=function(e,r,t,a){if(void 0===r)a="utf8",t=this.length,r=0;else if(void 0===t&&"string"==typeof r)a=r,t=this.length,r=0;else{if(!isFinite(r))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");r>>>=0,isFinite(t)?(t>>>=0,void 0===a&&(a="utf8")):(a=t,t=void 0)}const o=this.length-r;if((void 0===t||t>o)&&(t=o),e.length>0&&(t<0||r<0)||r>this.length)throw new RangeError("Attempt to write outside buffer bounds");a||(a="utf8");let i=!1;for(;;)switch(a){case"hex":return w(this,e,r,t);case"utf8":case"utf-8":return k(this,e,r,t);case"ascii":case"latin1":case"binary":return x(this,e,r,t);case"base64":return z(this,e,r,t);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return E(this,e,r,t);default:if(i)throw new TypeError("Unknown encoding: "+a);a=(""+a).toLowerCase(),i=!0}},l.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const A=4096;function L(e,r,t){let a="";t=Math.min(e.length,t);for(let o=r;o<t;++o)a+=String.fromCharCode(127&e[o]);return a}function S(e,r,t){let a="";t=Math.min(e.length,t);for(let o=r;o<t;++o)a+=String.fromCharCode(e[o]);return a}function I(e,r,t){const a=e.length;(!r||r<0)&&(r=0),(!t||t<0||t>a)&&(t=a);let o="";for(let a=r;a<t;++a)o+=J[e[a]];return o}function q(e,r,t){const a=e.slice(r,t);let o="";for(let e=0;e<a.length-1;e+=2)o+=String.fromCharCode(a[e]+256*a[e+1]);return o}function U(e,r,t){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+r>t)throw new RangeError("Trying to access beyond buffer length")}function H(e,r,t,a,o,i){if(!l.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(r>o||r<i)throw new RangeError('"value" argument is out of bounds');if(t+a>e.length)throw new RangeError("Index out of range")}function O(e,r,t,a,o){D(r,a,o,e,t,7);let i=Number(r&BigInt(4294967295));e[t++]=i,i>>=8,e[t++]=i,i>>=8,e[t++]=i,i>>=8,e[t++]=i;let n=Number(r>>BigInt(32)&BigInt(4294967295));return e[t++]=n,n>>=8,e[t++]=n,n>>=8,e[t++]=n,n>>=8,e[t++]=n,t}function T(e,r,t,a,o){D(r,a,o,e,t,7);let i=Number(r&BigInt(4294967295));e[t+7]=i,i>>=8,e[t+6]=i,i>>=8,e[t+5]=i,i>>=8,e[t+4]=i;let n=Number(r>>BigInt(32)&BigInt(4294967295));return e[t+3]=n,n>>=8,e[t+2]=n,n>>=8,e[t+1]=n,n>>=8,e[t]=n,t+8}function _(e,r,t,a,o,i){if(t+a>e.length)throw new RangeError("Index out of range");if(t<0)throw new RangeError("Index out of range")}function R(e,r,t,a,i){return r=+r,t>>>=0,i||_(e,0,t,4),o.write(e,r,t,a,23,4),t+4}function C(e,r,t,a,i){return r=+r,t>>>=0,i||_(e,0,t,8),o.write(e,r,t,a,52,8),t+8}l.prototype.slice=function(e,r){const t=this.length;(e=~~e)<0?(e+=t)<0&&(e=0):e>t&&(e=t),(r=void 0===r?t:~~r)<0?(r+=t)<0&&(r=0):r>t&&(r=t),r<e&&(r=e);const a=this.subarray(e,r);return Object.setPrototypeOf(a,l.prototype),a},l.prototype.readUintLE=l.prototype.readUIntLE=function(e,r,t){e>>>=0,r>>>=0,t||U(e,r,this.length);let a=this[e],o=1,i=0;for(;++i<r&&(o*=256);)a+=this[e+i]*o;return a},l.prototype.readUintBE=l.prototype.readUIntBE=function(e,r,t){e>>>=0,r>>>=0,t||U(e,r,this.length);let a=this[e+--r],o=1;for(;r>0&&(o*=256);)a+=this[e+--r]*o;return a},l.prototype.readUint8=l.prototype.readUInt8=function(e,r){return e>>>=0,r||U(e,1,this.length),this[e]},l.prototype.readUint16LE=l.prototype.readUInt16LE=function(e,r){return e>>>=0,r||U(e,2,this.length),this[e]|this[e+1]<<8},l.prototype.readUint16BE=l.prototype.readUInt16BE=function(e,r){return e>>>=0,r||U(e,2,this.length),this[e]<<8|this[e+1]},l.prototype.readUint32LE=l.prototype.readUInt32LE=function(e,r){return e>>>=0,r||U(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},l.prototype.readUint32BE=l.prototype.readUInt32BE=function(e,r){return e>>>=0,r||U(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},l.prototype.readBigUInt64LE=X((function(e){M(e>>>=0,"offset");const r=this[e],t=this[e+7];void 0!==r&&void 0!==t||K(e,this.length-8);const a=r+256*this[++e]+65536*this[++e]+this[++e]*2**24,o=this[++e]+256*this[++e]+65536*this[++e]+t*2**24;return BigInt(a)+(BigInt(o)<<BigInt(32))})),l.prototype.readBigUInt64BE=X((function(e){M(e>>>=0,"offset");const r=this[e],t=this[e+7];void 0!==r&&void 0!==t||K(e,this.length-8);const a=r*2**24+65536*this[++e]+256*this[++e]+this[++e],o=this[++e]*2**24+65536*this[++e]+256*this[++e]+t;return(BigInt(a)<<BigInt(32))+BigInt(o)})),l.prototype.readIntLE=function(e,r,t){e>>>=0,r>>>=0,t||U(e,r,this.length);let a=this[e],o=1,i=0;for(;++i<r&&(o*=256);)a+=this[e+i]*o;return o*=128,a>=o&&(a-=Math.pow(2,8*r)),a},l.prototype.readIntBE=function(e,r,t){e>>>=0,r>>>=0,t||U(e,r,this.length);let a=r,o=1,i=this[e+--a];for(;a>0&&(o*=256);)i+=this[e+--a]*o;return o*=128,i>=o&&(i-=Math.pow(2,8*r)),i},l.prototype.readInt8=function(e,r){return e>>>=0,r||U(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},l.prototype.readInt16LE=function(e,r){e>>>=0,r||U(e,2,this.length);const t=this[e]|this[e+1]<<8;return 32768&t?4294901760|t:t},l.prototype.readInt16BE=function(e,r){e>>>=0,r||U(e,2,this.length);const t=this[e+1]|this[e]<<8;return 32768&t?4294901760|t:t},l.prototype.readInt32LE=function(e,r){return e>>>=0,r||U(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},l.prototype.readInt32BE=function(e,r){return e>>>=0,r||U(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},l.prototype.readBigInt64LE=X((function(e){M(e>>>=0,"offset");const r=this[e],t=this[e+7];void 0!==r&&void 0!==t||K(e,this.length-8);const a=this[e+4]+256*this[e+5]+65536*this[e+6]+(t<<24);return(BigInt(a)<<BigInt(32))+BigInt(r+256*this[++e]+65536*this[++e]+this[++e]*2**24)})),l.prototype.readBigInt64BE=X((function(e){M(e>>>=0,"offset");const r=this[e],t=this[e+7];void 0!==r&&void 0!==t||K(e,this.length-8);const a=(r<<24)+65536*this[++e]+256*this[++e]+this[++e];return(BigInt(a)<<BigInt(32))+BigInt(this[++e]*2**24+65536*this[++e]+256*this[++e]+t)})),l.prototype.readFloatLE=function(e,r){return e>>>=0,r||U(e,4,this.length),o.read(this,e,!0,23,4)},l.prototype.readFloatBE=function(e,r){return e>>>=0,r||U(e,4,this.length),o.read(this,e,!1,23,4)},l.prototype.readDoubleLE=function(e,r){return e>>>=0,r||U(e,8,this.length),o.read(this,e,!0,52,8)},l.prototype.readDoubleBE=function(e,r){return e>>>=0,r||U(e,8,this.length),o.read(this,e,!1,52,8)},l.prototype.writeUintLE=l.prototype.writeUIntLE=function(e,r,t,a){e=+e,r>>>=0,t>>>=0,a||H(this,e,r,t,Math.pow(2,8*t)-1,0);let o=1,i=0;for(this[r]=255&e;++i<t&&(o*=256);)this[r+i]=e/o&255;return r+t},l.prototype.writeUintBE=l.prototype.writeUIntBE=function(e,r,t,a){e=+e,r>>>=0,t>>>=0,a||H(this,e,r,t,Math.pow(2,8*t)-1,0);let o=t-1,i=1;for(this[r+o]=255&e;--o>=0&&(i*=256);)this[r+o]=e/i&255;return r+t},l.prototype.writeUint8=l.prototype.writeUInt8=function(e,r,t){return e=+e,r>>>=0,t||H(this,e,r,1,255,0),this[r]=255&e,r+1},l.prototype.writeUint16LE=l.prototype.writeUInt16LE=function(e,r,t){return e=+e,r>>>=0,t||H(this,e,r,2,65535,0),this[r]=255&e,this[r+1]=e>>>8,r+2},l.prototype.writeUint16BE=l.prototype.writeUInt16BE=function(e,r,t){return e=+e,r>>>=0,t||H(this,e,r,2,65535,0),this[r]=e>>>8,this[r+1]=255&e,r+2},l.prototype.writeUint32LE=l.prototype.writeUInt32LE=function(e,r,t){return e=+e,r>>>=0,t||H(this,e,r,4,4294967295,0),this[r+3]=e>>>24,this[r+2]=e>>>16,this[r+1]=e>>>8,this[r]=255&e,r+4},l.prototype.writeUint32BE=l.prototype.writeUInt32BE=function(e,r,t){return e=+e,r>>>=0,t||H(this,e,r,4,4294967295,0),this[r]=e>>>24,this[r+1]=e>>>16,this[r+2]=e>>>8,this[r+3]=255&e,r+4},l.prototype.writeBigUInt64LE=X((function(e,r=0){return O(this,e,r,BigInt(0),BigInt("0xffffffffffffffff"))})),l.prototype.writeBigUInt64BE=X((function(e,r=0){return T(this,e,r,BigInt(0),BigInt("0xffffffffffffffff"))})),l.prototype.writeIntLE=function(e,r,t,a){if(e=+e,r>>>=0,!a){const a=Math.pow(2,8*t-1);H(this,e,r,t,a-1,-a)}let o=0,i=1,n=0;for(this[r]=255&e;++o<t&&(i*=256);)e<0&&0===n&&0!==this[r+o-1]&&(n=1),this[r+o]=(e/i|0)-n&255;return r+t},l.prototype.writeIntBE=function(e,r,t,a){if(e=+e,r>>>=0,!a){const a=Math.pow(2,8*t-1);H(this,e,r,t,a-1,-a)}let o=t-1,i=1,n=0;for(this[r+o]=255&e;--o>=0&&(i*=256);)e<0&&0===n&&0!==this[r+o+1]&&(n=1),this[r+o]=(e/i|0)-n&255;return r+t},l.prototype.writeInt8=function(e,r,t){return e=+e,r>>>=0,t||H(this,e,r,1,127,-128),e<0&&(e=255+e+1),this[r]=255&e,r+1},l.prototype.writeInt16LE=function(e,r,t){return e=+e,r>>>=0,t||H(this,e,r,2,32767,-32768),this[r]=255&e,this[r+1]=e>>>8,r+2},l.prototype.writeInt16BE=function(e,r,t){return e=+e,r>>>=0,t||H(this,e,r,2,32767,-32768),this[r]=e>>>8,this[r+1]=255&e,r+2},l.prototype.writeInt32LE=function(e,r,t){return e=+e,r>>>=0,t||H(this,e,r,4,2147483647,-2147483648),this[r]=255&e,this[r+1]=e>>>8,this[r+2]=e>>>16,this[r+3]=e>>>24,r+4},l.prototype.writeInt32BE=function(e,r,t){return e=+e,r>>>=0,t||H(this,e,r,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[r]=e>>>24,this[r+1]=e>>>16,this[r+2]=e>>>8,this[r+3]=255&e,r+4},l.prototype.writeBigInt64LE=X((function(e,r=0){return O(this,e,r,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),l.prototype.writeBigInt64BE=X((function(e,r=0){return T(this,e,r,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),l.prototype.writeFloatLE=function(e,r,t){return R(this,e,r,!0,t)},l.prototype.writeFloatBE=function(e,r,t){return R(this,e,r,!1,t)},l.prototype.writeDoubleLE=function(e,r,t){return C(this,e,r,!0,t)},l.prototype.writeDoubleBE=function(e,r,t){return C(this,e,r,!1,t)},l.prototype.copy=function(e,r,t,a){if(!l.isBuffer(e))throw new TypeError("argument should be a Buffer");if(t||(t=0),a||0===a||(a=this.length),r>=e.length&&(r=e.length),r||(r=0),a>0&&a<t&&(a=t),a===t)return 0;if(0===e.length||0===this.length)return 0;if(r<0)throw new RangeError("targetStart out of bounds");if(t<0||t>=this.length)throw new RangeError("Index out of range");if(a<0)throw new RangeError("sourceEnd out of bounds");a>this.length&&(a=this.length),e.length-r<a-t&&(a=e.length-r+t);const o=a-t;return this===e&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(r,t,a):Uint8Array.prototype.set.call(e,this.subarray(t,a),r),o},l.prototype.fill=function(e,r,t,a){if("string"==typeof e){if("string"==typeof r?(a=r,r=0,t=this.length):"string"==typeof t&&(a=t,t=this.length),void 0!==a&&"string"!=typeof a)throw new TypeError("encoding must be a string");if("string"==typeof a&&!l.isEncoding(a))throw new TypeError("Unknown encoding: "+a);if(1===e.length){const r=e.charCodeAt(0);("utf8"===a&&r<128||"latin1"===a)&&(e=r)}}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(r<0||this.length<r||this.length<t)throw new RangeError("Out of range index");if(t<=r)return this;let o;if(r>>>=0,t=void 0===t?this.length:t>>>0,e||(e=0),"number"==typeof e)for(o=r;o<t;++o)this[o]=e;else{const i=l.isBuffer(e)?e:l.from(e,a),n=i.length;if(0===n)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(o=0;o<t-r;++o)this[o+r]=i[o%n]}return this};const N={};function P(e,r,t){N[e]=class extends t{constructor(){super(),Object.defineProperty(this,"message",{value:r.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${e}]`,this.stack,delete this.name}get code(){return e}set code(e){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:e,writable:!0})}toString(){return`${this.name} [${e}]: ${this.message}`}}}function F(e){let r="",t=e.length;const a="-"===e[0]?1:0;for(;t>=a+4;t-=3)r=`_${e.slice(t-3,t)}${r}`;return`${e.slice(0,t)}${r}`}function D(e,r,t,a,o,i){if(e>t||e<r){const a="bigint"==typeof r?"n":"";let o;throw o=i>3?0===r||r===BigInt(0)?`>= 0${a} and < 2${a} ** ${8*(i+1)}${a}`:`>= -(2${a} ** ${8*(i+1)-1}${a}) and < 2 ** ${8*(i+1)-1}${a}`:`>= ${r}${a} and <= ${t}${a}`,new N.ERR_OUT_OF_RANGE("value",o,e)}!function(e,r,t){M(r,"offset"),void 0!==e[r]&&void 0!==e[r+t]||K(r,e.length-(t+1))}(a,o,i)}function M(e,r){if("number"!=typeof e)throw new N.ERR_INVALID_ARG_TYPE(r,"number",e)}function K(e,r,t){if(Math.floor(e)!==e)throw M(e,t),new N.ERR_OUT_OF_RANGE(t||"offset","an integer",e);if(r<0)throw new N.ERR_BUFFER_OUT_OF_BOUNDS;throw new N.ERR_OUT_OF_RANGE(t||"offset",`>= ${t?1:0} and <= ${r}`,e)}P("ERR_BUFFER_OUT_OF_BOUNDS",(function(e){return e?`${e} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),P("ERR_INVALID_ARG_TYPE",(function(e,r){return`The "${e}" argument must be of type number. Received type ${typeof r}`}),TypeError),P("ERR_OUT_OF_RANGE",(function(e,r,t){let a=`The value of "${e}" is out of range.`,o=t;return Number.isInteger(t)&&Math.abs(t)>2**32?o=F(String(t)):"bigint"==typeof t&&(o=String(t),(t>BigInt(2)**BigInt(32)||t<-(BigInt(2)**BigInt(32)))&&(o=F(o)),o+="n"),a+=` It must be ${r}. Received ${o}`,a}),RangeError);const V=/[^+/0-9A-Za-z-_]/g;function $(e,r){let t;r=r||1/0;const a=e.length;let o=null;const i=[];for(let n=0;n<a;++n){if(t=e.charCodeAt(n),t>55295&&t<57344){if(!o){if(t>56319){(r-=3)>-1&&i.push(239,191,189);continue}if(n+1===a){(r-=3)>-1&&i.push(239,191,189);continue}o=t;continue}if(t<56320){(r-=3)>-1&&i.push(239,191,189),o=t;continue}t=65536+(o-55296<<10|t-56320)}else o&&(r-=3)>-1&&i.push(239,191,189);if(o=null,t<128){if((r-=1)<0)break;i.push(t)}else if(t<2048){if((r-=2)<0)break;i.push(t>>6|192,63&t|128)}else if(t<65536){if((r-=3)<0)break;i.push(t>>12|224,t>>6&63|128,63&t|128)}else{if(!(t<1114112))throw new Error("Invalid code point");if((r-=4)<0)break;i.push(t>>18|240,t>>12&63|128,t>>6&63|128,63&t|128)}}return i}function G(e){return a.toByteArray(function(e){if((e=(e=e.split("=")[0]).trim().replace(V,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function Z(e,r,t,a){let o;for(o=0;o<a&&!(o+t>=r.length||o>=e.length);++o)r[o+t]=e[o];return o}function W(e,r){return e instanceof r||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===r.name}function Y(e){return e!=e}const J=function(){const e="0123456789abcdef",r=new Array(256);for(let t=0;t<16;++t){const a=16*t;for(let o=0;o<16;++o)r[a+o]=e[t]+e[o]}return r}();function X(e){return"undefined"==typeof BigInt?Q:e}function Q(){throw new Error("BigInt not supported")}},251:(e,r)=>{r.read=function(e,r,t,a,o){var i,n,s=8*o-a-1,l=(1<<s)-1,c=l>>1,u=-7,d=t?o-1:0,f=t?-1:1,p=e[r+d];for(d+=f,i=p&(1<<-u)-1,p>>=-u,u+=s;u>0;i=256*i+e[r+d],d+=f,u-=8);for(n=i&(1<<-u)-1,i>>=-u,u+=a;u>0;n=256*n+e[r+d],d+=f,u-=8);if(0===i)i=1-c;else{if(i===l)return n?NaN:1/0*(p?-1:1);n+=Math.pow(2,a),i-=c}return(p?-1:1)*n*Math.pow(2,i-a)},r.write=function(e,r,t,a,o,i){var n,s,l,c=8*i-o-1,u=(1<<c)-1,d=u>>1,f=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,p=a?0:i-1,h=a?1:-1,m=r<0||0===r&&1/r<0?1:0;for(r=Math.abs(r),isNaN(r)||r===1/0?(s=isNaN(r)?1:0,n=u):(n=Math.floor(Math.log(r)/Math.LN2),r*(l=Math.pow(2,-n))<1&&(n--,l*=2),(r+=n+d>=1?f/l:f*Math.pow(2,1-d))*l>=2&&(n++,l/=2),n+d>=u?(s=0,n=u):n+d>=1?(s=(r*l-1)*Math.pow(2,o),n+=d):(s=r*Math.pow(2,d-1)*Math.pow(2,o),n=0));o>=8;e[t+p]=255&s,p+=h,s/=256,o-=8);for(n=n<<o|s,c+=o;c>0;e[t+p]=255&n,p+=h,n/=256,c-=8);e[t+p-h]|=128*m}},898:e=>{"use strict";e.exports=JSON.parse('["的","一","是","在","不","了","有","和","人","这","中","大","为","上","个","国","我","以","要","他","时","来","用","们","生","到","作","地","于","出","就","分","对","成","会","可","主","发","年","动","同","工","也","能","下","过","子","说","产","种","面","而","方","后","多","定","行","学","法","所","民","得","经","十","三","之","进","着","等","部","度","家","电","力","里","如","水","化","高","自","二","理","起","小","物","现","实","加","量","都","两","体","制","机","当","使","点","从","业","本","去","把","性","好","应","开","它","合","还","因","由","其","些","然","前","外","天","政","四","日","那","社","义","事","平","形","相","全","表","间","样","与","关","各","重","新","线","内","数","正","心","反","你","明","看","原","又","么","利","比","或","但","质","气","第","向","道","命","此","变","条","只","没","结","解","问","意","建","月","公","无","系","军","很","情","者","最","立","代","想","已","通","并","提","直","题","党","程","展","五","果","料","象","员","革","位","入","常","文","总","次","品","式","活","设","及","管","特","件","长","求","老","头","基","资","边","流","路","级","少","图","山","统","接","知","较","将","组","见","计","别","她","手","角","期","根","论","运","农","指","几","九","区","强","放","决","西","被","干","做","必","战","先","回","则","任","取","据","处","队","南","给","色","光","门","即","保","治","北","造","百","规","热","领","七","海","口","东","导","器","压","志","世","金","增","争","济","阶","油","思","术","极","交","受","联","什","认","六","共","权","收","证","改","清","美","再","采","转","更","单","风","切","打","白","教","速","花","带","安","场","身","车","例","真","务","具","万","每","目","至","达","走","积","示","议","声","报","斗","完","类","八","离","华","名","确","才","科","张","信","马","节","话","米","整","空","元","况","今","集","温","传","土","许","步","群","广","石","记","需","段","研","界","拉","林","律","叫","且","究","观","越","织","装","影","算","低","持","音","众","书","布","复","容","儿","须","际","商","非","验","连","断","深","难","近","矿","千","周","委","素","技","备","半","办","青","省","列","习","响","约","支","般","史","感","劳","便","团","往","酸","历","市","克","何","除","消","构","府","称","太","准","精","值","号","率","族","维","划","选","标","写","存","候","毛","亲","快","效","斯","院","查","江","型","眼","王","按","格","养","易","置","派","层","片","始","却","专","状","育","厂","京","识","适","属","圆","包","火","住","调","满","县","局","照","参","红","细","引","听","该","铁","价","严","首","底","液","官","德","随","病","苏","失","尔","死","讲","配","女","黄","推","显","谈","罪","神","艺","呢","席","含","企","望","密","批","营","项","防","举","球","英","氧","势","告","李","台","落","木","帮","轮","破","亚","师","围","注","远","字","材","排","供","河","态","封","另","施","减","树","溶","怎","止","案","言","士","均","武","固","叶","鱼","波","视","仅","费","紧","爱","左","章","早","朝","害","续","轻","服","试","食","充","兵","源","判","护","司","足","某","练","差","致","板","田","降","黑","犯","负","击","范","继","兴","似","余","坚","曲","输","修","故","城","夫","够","送","笔","船","占","右","财","吃","富","春","职","觉","汉","画","功","巴","跟","虽","杂","飞","检","吸","助","升","阳","互","初","创","抗","考","投","坏","策","古","径","换","未","跑","留","钢","曾","端","责","站","简","述","钱","副","尽","帝","射","草","冲","承","独","令","限","阿","宣","环","双","请","超","微","让","控","州","良","轴","找","否","纪","益","依","优","顶","础","载","倒","房","突","坐","粉","敌","略","客","袁","冷","胜","绝","析","块","剂","测","丝","协","诉","念","陈","仍","罗","盐","友","洋","错","苦","夜","刑","移","频","逐","靠","混","母","短","皮","终","聚","汽","村","云","哪","既","距","卫","停","烈","央","察","烧","迅","境","若","印","洲","刻","括","激","孔","搞","甚","室","待","核","校","散","侵","吧","甲","游","久","菜","味","旧","模","湖","货","损","预","阻","毫","普","稳","乙","妈","植","息","扩","银","语","挥","酒","守","拿","序","纸","医","缺","雨","吗","针","刘","啊","急","唱","误","训","愿","审","附","获","茶","鲜","粮","斤","孩","脱","硫","肥","善","龙","演","父","渐","血","欢","械","掌","歌","沙","刚","攻","谓","盾","讨","晚","粒","乱","燃","矛","乎","杀","药","宁","鲁","贵","钟","煤","读","班","伯","香","介","迫","句","丰","培","握","兰","担","弦","蛋","沉","假","穿","执","答","乐","谁","顺","烟","缩","征","脸","喜","松","脚","困","异","免","背","星","福","买","染","井","概","慢","怕","磁","倍","祖","皇","促","静","补","评","翻","肉","践","尼","衣","宽","扬","棉","希","伤","操","垂","秋","宜","氢","套","督","振","架","亮","末","宪","庆","编","牛","触","映","雷","销","诗","座","居","抓","裂","胞","呼","娘","景","威","绿","晶","厚","盟","衡","鸡","孙","延","危","胶","屋","乡","临","陆","顾","掉","呀","灯","岁","措","束","耐","剧","玉","赵","跳","哥","季","课","凯","胡","额","款","绍","卷","齐","伟","蒸","殖","永","宗","苗","川","炉","岩","弱","零","杨","奏","沿","露","杆","探","滑","镇","饭","浓","航","怀","赶","库","夺","伊","灵","税","途","灭","赛","归","召","鼓","播","盘","裁","险","康","唯","录","菌","纯","借","糖","盖","横","符","私","努","堂","域","枪","润","幅","哈","竟","熟","虫","泽","脑","壤","碳","欧","遍","侧","寨","敢","彻","虑","斜","薄","庭","纳","弹","饲","伸","折","麦","湿","暗","荷","瓦","塞","床","筑","恶","户","访","塔","奇","透","梁","刀","旋","迹","卡","氯","遇","份","毒","泥","退","洗","摆","灰","彩","卖","耗","夏","择","忙","铜","献","硬","予","繁","圈","雪","函","亦","抽","篇","阵","阴","丁","尺","追","堆","雄","迎","泛","爸","楼","避","谋","吨","野","猪","旗","累","偏","典","馆","索","秦","脂","潮","爷","豆","忽","托","惊","塑","遗","愈","朱","替","纤","粗","倾","尚","痛","楚","谢","奋","购","磨","君","池","旁","碎","骨","监","捕","弟","暴","割","贯","殊","释","词","亡","壁","顿","宝","午","尘","闻","揭","炮","残","冬","桥","妇","警","综","招","吴","付","浮","遭","徐","您","摇","谷","赞","箱","隔","订","男","吹","园","纷","唐","败","宋","玻","巨","耕","坦","荣","闭","湾","键","凡","驻","锅","救","恩","剥","凝","碱","齿","截","炼","麻","纺","禁","废","盛","版","缓","净","睛","昌","婚","涉","筒","嘴","插","岸","朗","庄","街","藏","姑","贸","腐","奴","啦","惯","乘","伙","恢","匀","纱","扎","辩","耳","彪","臣","亿","璃","抵","脉","秀","萨","俄","网","舞","店","喷","纵","寸","汗","挂","洪","贺","闪","柬","爆","烯","津","稻","墙","软","勇","像","滚","厘","蒙","芳","肯","坡","柱","荡","腿","仪","旅","尾","轧","冰","贡","登","黎","削","钻","勒","逃","障","氨","郭","峰","币","港","伏","轨","亩","毕","擦","莫","刺","浪","秘","援","株","健","售","股","岛","甘","泡","睡","童","铸","汤","阀","休","汇","舍","牧","绕","炸","哲","磷","绩","朋","淡","尖","启","陷","柴","呈","徒","颜","泪","稍","忘","泵","蓝","拖","洞","授","镜","辛","壮","锋","贫","虚","弯","摩","泰","幼","廷","尊","窗","纲","弄","隶","疑","氏","宫","姐","震","瑞","怪","尤","琴","循","描","膜","违","夹","腰","缘","珠","穷","森","枝","竹","沟","催","绳","忆","邦","剩","幸","浆","栏","拥","牙","贮","礼","滤","钠","纹","罢","拍","咱","喊","袖","埃","勤","罚","焦","潜","伍","墨","欲","缝","姓","刊","饱","仿","奖","铝","鬼","丽","跨","默","挖","链","扫","喝","袋","炭","污","幕","诸","弧","励","梅","奶","洁","灾","舟","鉴","苯","讼","抱","毁","懂","寒","智","埔","寄","届","跃","渡","挑","丹","艰","贝","碰","拔","爹","戴","码","梦","芽","熔","赤","渔","哭","敬","颗","奔","铅","仲","虎","稀","妹","乏","珍","申","桌","遵","允","隆","螺","仓","魏","锐","晓","氮","兼","隐","碍","赫","拨","忠","肃","缸","牵","抢","博","巧","壳","兄","杜","讯","诚","碧","祥","柯","页","巡","矩","悲","灌","龄","伦","票","寻","桂","铺","圣","恐","恰","郑","趣","抬","荒","腾","贴","柔","滴","猛","阔","辆","妻","填","撤","储","签","闹","扰","紫","砂","递","戏","吊","陶","伐","喂","疗","瓶","婆","抚","臂","摸","忍","虾","蜡","邻","胸","巩","挤","偶","弃","槽","劲","乳","邓","吉","仁","烂","砖","租","乌","舰","伴","瓜","浅","丙","暂","燥","橡","柳","迷","暖","牌","秧","胆","详","簧","踏","瓷","谱","呆","宾","糊","洛","辉","愤","竞","隙","怒","粘","乃","绪","肩","籍","敏","涂","熙","皆","侦","悬","掘","享","纠","醒","狂","锁","淀","恨","牲","霸","爬","赏","逆","玩","陵","祝","秒","浙","貌","役","彼","悉","鸭","趋","凤","晨","畜","辈","秩","卵","署","梯","炎","滩","棋","驱","筛","峡","冒","啥","寿","译","浸","泉","帽","迟","硅","疆","贷","漏","稿","冠","嫩","胁","芯","牢","叛","蚀","奥","鸣","岭","羊","凭","串","塘","绘","酵","融","盆","锡","庙","筹","冻","辅","摄","袭","筋","拒","僚","旱","钾","鸟","漆","沈","眉","疏","添","棒","穗","硝","韩","逼","扭","侨","凉","挺","碗","栽","炒","杯","患","馏","劝","豪","辽","勃","鸿","旦","吏","拜","狗","埋","辊","掩","饮","搬","骂","辞","勾","扣","估","蒋","绒","雾","丈","朵","姆","拟","宇","辑","陕","雕","偿","蓄","崇","剪","倡","厅","咬","驶","薯","刷","斥","番","赋","奉","佛","浇","漫","曼","扇","钙","桃","扶","仔","返","俗","亏","腔","鞋","棱","覆","框","悄","叔","撞","骗","勘","旺","沸","孤","吐","孟","渠","屈","疾","妙","惜","仰","狠","胀","谐","抛","霉","桑","岗","嘛","衰","盗","渗","脏","赖","涌","甜","曹","阅","肌","哩","厉","烃","纬","毅","昨","伪","症","煮","叹","钉","搭","茎","笼","酷","偷","弓","锥","恒","杰","坑","鼻","翼","纶","叙","狱","逮","罐","络","棚","抑","膨","蔬","寺","骤","穆","冶","枯","册","尸","凸","绅","坯","牺","焰","轰","欣","晋","瘦","御","锭","锦","丧","旬","锻","垄","搜","扑","邀","亭","酯","迈","舒","脆","酶","闲","忧","酚","顽","羽","涨","卸","仗","陪","辟","惩","杭","姚","肚","捉","飘","漂","昆","欺","吾","郎","烷","汁","呵","饰","萧","雅","邮","迁","燕","撒","姻","赴","宴","烦","债","帐","斑","铃","旨","醇","董","饼","雏","姿","拌","傅","腹","妥","揉","贤","拆","歪","葡","胺","丢","浩","徽","昂","垫","挡","览","贪","慰","缴","汪","慌","冯","诺","姜","谊","凶","劣","诬","耀","昏","躺","盈","骑","乔","溪","丛","卢","抹","闷","咨","刮","驾","缆","悟","摘","铒","掷","颇","幻","柄","惠","惨","佳","仇","腊","窝","涤","剑","瞧","堡","泼","葱","罩","霍","捞","胎","苍","滨","俩","捅","湘","砍","霞","邵","萄","疯","淮","遂","熊","粪","烘","宿","档","戈","驳","嫂","裕","徙","箭","捐","肠","撑","晒","辨","殿","莲","摊","搅","酱","屏","疫","哀","蔡","堵","沫","皱","畅","叠","阁","莱","敲","辖","钩","痕","坝","巷","饿","祸","丘","玄","溜","曰","逻","彭","尝","卿","妨","艇","吞","韦","怨","矮","歇"]')},81:e=>{"use strict";e.exports=JSON.parse('["的","一","是","在","不","了","有","和","人","這","中","大","為","上","個","國","我","以","要","他","時","來","用","們","生","到","作","地","於","出","就","分","對","成","會","可","主","發","年","動","同","工","也","能","下","過","子","說","產","種","面","而","方","後","多","定","行","學","法","所","民","得","經","十","三","之","進","著","等","部","度","家","電","力","裡","如","水","化","高","自","二","理","起","小","物","現","實","加","量","都","兩","體","制","機","當","使","點","從","業","本","去","把","性","好","應","開","它","合","還","因","由","其","些","然","前","外","天","政","四","日","那","社","義","事","平","形","相","全","表","間","樣","與","關","各","重","新","線","內","數","正","心","反","你","明","看","原","又","麼","利","比","或","但","質","氣","第","向","道","命","此","變","條","只","沒","結","解","問","意","建","月","公","無","系","軍","很","情","者","最","立","代","想","已","通","並","提","直","題","黨","程","展","五","果","料","象","員","革","位","入","常","文","總","次","品","式","活","設","及","管","特","件","長","求","老","頭","基","資","邊","流","路","級","少","圖","山","統","接","知","較","將","組","見","計","別","她","手","角","期","根","論","運","農","指","幾","九","區","強","放","決","西","被","幹","做","必","戰","先","回","則","任","取","據","處","隊","南","給","色","光","門","即","保","治","北","造","百","規","熱","領","七","海","口","東","導","器","壓","志","世","金","增","爭","濟","階","油","思","術","極","交","受","聯","什","認","六","共","權","收","證","改","清","美","再","採","轉","更","單","風","切","打","白","教","速","花","帶","安","場","身","車","例","真","務","具","萬","每","目","至","達","走","積","示","議","聲","報","鬥","完","類","八","離","華","名","確","才","科","張","信","馬","節","話","米","整","空","元","況","今","集","溫","傳","土","許","步","群","廣","石","記","需","段","研","界","拉","林","律","叫","且","究","觀","越","織","裝","影","算","低","持","音","眾","書","布","复","容","兒","須","際","商","非","驗","連","斷","深","難","近","礦","千","週","委","素","技","備","半","辦","青","省","列","習","響","約","支","般","史","感","勞","便","團","往","酸","歷","市","克","何","除","消","構","府","稱","太","準","精","值","號","率","族","維","劃","選","標","寫","存","候","毛","親","快","效","斯","院","查","江","型","眼","王","按","格","養","易","置","派","層","片","始","卻","專","狀","育","廠","京","識","適","屬","圓","包","火","住","調","滿","縣","局","照","參","紅","細","引","聽","該","鐵","價","嚴","首","底","液","官","德","隨","病","蘇","失","爾","死","講","配","女","黃","推","顯","談","罪","神","藝","呢","席","含","企","望","密","批","營","項","防","舉","球","英","氧","勢","告","李","台","落","木","幫","輪","破","亞","師","圍","注","遠","字","材","排","供","河","態","封","另","施","減","樹","溶","怎","止","案","言","士","均","武","固","葉","魚","波","視","僅","費","緊","愛","左","章","早","朝","害","續","輕","服","試","食","充","兵","源","判","護","司","足","某","練","差","致","板","田","降","黑","犯","負","擊","范","繼","興","似","餘","堅","曲","輸","修","故","城","夫","夠","送","筆","船","佔","右","財","吃","富","春","職","覺","漢","畫","功","巴","跟","雖","雜","飛","檢","吸","助","昇","陽","互","初","創","抗","考","投","壞","策","古","徑","換","未","跑","留","鋼","曾","端","責","站","簡","述","錢","副","盡","帝","射","草","衝","承","獨","令","限","阿","宣","環","雙","請","超","微","讓","控","州","良","軸","找","否","紀","益","依","優","頂","礎","載","倒","房","突","坐","粉","敵","略","客","袁","冷","勝","絕","析","塊","劑","測","絲","協","訴","念","陳","仍","羅","鹽","友","洋","錯","苦","夜","刑","移","頻","逐","靠","混","母","短","皮","終","聚","汽","村","雲","哪","既","距","衛","停","烈","央","察","燒","迅","境","若","印","洲","刻","括","激","孔","搞","甚","室","待","核","校","散","侵","吧","甲","遊","久","菜","味","舊","模","湖","貨","損","預","阻","毫","普","穩","乙","媽","植","息","擴","銀","語","揮","酒","守","拿","序","紙","醫","缺","雨","嗎","針","劉","啊","急","唱","誤","訓","願","審","附","獲","茶","鮮","糧","斤","孩","脫","硫","肥","善","龍","演","父","漸","血","歡","械","掌","歌","沙","剛","攻","謂","盾","討","晚","粒","亂","燃","矛","乎","殺","藥","寧","魯","貴","鐘","煤","讀","班","伯","香","介","迫","句","豐","培","握","蘭","擔","弦","蛋","沉","假","穿","執","答","樂","誰","順","煙","縮","徵","臉","喜","松","腳","困","異","免","背","星","福","買","染","井","概","慢","怕","磁","倍","祖","皇","促","靜","補","評","翻","肉","踐","尼","衣","寬","揚","棉","希","傷","操","垂","秋","宜","氫","套","督","振","架","亮","末","憲","慶","編","牛","觸","映","雷","銷","詩","座","居","抓","裂","胞","呼","娘","景","威","綠","晶","厚","盟","衡","雞","孫","延","危","膠","屋","鄉","臨","陸","顧","掉","呀","燈","歲","措","束","耐","劇","玉","趙","跳","哥","季","課","凱","胡","額","款","紹","卷","齊","偉","蒸","殖","永","宗","苗","川","爐","岩","弱","零","楊","奏","沿","露","桿","探","滑","鎮","飯","濃","航","懷","趕","庫","奪","伊","靈","稅","途","滅","賽","歸","召","鼓","播","盤","裁","險","康","唯","錄","菌","純","借","糖","蓋","橫","符","私","努","堂","域","槍","潤","幅","哈","竟","熟","蟲","澤","腦","壤","碳","歐","遍","側","寨","敢","徹","慮","斜","薄","庭","納","彈","飼","伸","折","麥","濕","暗","荷","瓦","塞","床","築","惡","戶","訪","塔","奇","透","梁","刀","旋","跡","卡","氯","遇","份","毒","泥","退","洗","擺","灰","彩","賣","耗","夏","擇","忙","銅","獻","硬","予","繁","圈","雪","函","亦","抽","篇","陣","陰","丁","尺","追","堆","雄","迎","泛","爸","樓","避","謀","噸","野","豬","旗","累","偏","典","館","索","秦","脂","潮","爺","豆","忽","托","驚","塑","遺","愈","朱","替","纖","粗","傾","尚","痛","楚","謝","奮","購","磨","君","池","旁","碎","骨","監","捕","弟","暴","割","貫","殊","釋","詞","亡","壁","頓","寶","午","塵","聞","揭","炮","殘","冬","橋","婦","警","綜","招","吳","付","浮","遭","徐","您","搖","谷","贊","箱","隔","訂","男","吹","園","紛","唐","敗","宋","玻","巨","耕","坦","榮","閉","灣","鍵","凡","駐","鍋","救","恩","剝","凝","鹼","齒","截","煉","麻","紡","禁","廢","盛","版","緩","淨","睛","昌","婚","涉","筒","嘴","插","岸","朗","莊","街","藏","姑","貿","腐","奴","啦","慣","乘","夥","恢","勻","紗","扎","辯","耳","彪","臣","億","璃","抵","脈","秀","薩","俄","網","舞","店","噴","縱","寸","汗","掛","洪","賀","閃","柬","爆","烯","津","稻","牆","軟","勇","像","滾","厘","蒙","芳","肯","坡","柱","盪","腿","儀","旅","尾","軋","冰","貢","登","黎","削","鑽","勒","逃","障","氨","郭","峰","幣","港","伏","軌","畝","畢","擦","莫","刺","浪","秘","援","株","健","售","股","島","甘","泡","睡","童","鑄","湯","閥","休","匯","舍","牧","繞","炸","哲","磷","績","朋","淡","尖","啟","陷","柴","呈","徒","顏","淚","稍","忘","泵","藍","拖","洞","授","鏡","辛","壯","鋒","貧","虛","彎","摩","泰","幼","廷","尊","窗","綱","弄","隸","疑","氏","宮","姐","震","瑞","怪","尤","琴","循","描","膜","違","夾","腰","緣","珠","窮","森","枝","竹","溝","催","繩","憶","邦","剩","幸","漿","欄","擁","牙","貯","禮","濾","鈉","紋","罷","拍","咱","喊","袖","埃","勤","罰","焦","潛","伍","墨","欲","縫","姓","刊","飽","仿","獎","鋁","鬼","麗","跨","默","挖","鏈","掃","喝","袋","炭","污","幕","諸","弧","勵","梅","奶","潔","災","舟","鑑","苯","訟","抱","毀","懂","寒","智","埔","寄","屆","躍","渡","挑","丹","艱","貝","碰","拔","爹","戴","碼","夢","芽","熔","赤","漁","哭","敬","顆","奔","鉛","仲","虎","稀","妹","乏","珍","申","桌","遵","允","隆","螺","倉","魏","銳","曉","氮","兼","隱","礙","赫","撥","忠","肅","缸","牽","搶","博","巧","殼","兄","杜","訊","誠","碧","祥","柯","頁","巡","矩","悲","灌","齡","倫","票","尋","桂","鋪","聖","恐","恰","鄭","趣","抬","荒","騰","貼","柔","滴","猛","闊","輛","妻","填","撤","儲","簽","鬧","擾","紫","砂","遞","戲","吊","陶","伐","餵","療","瓶","婆","撫","臂","摸","忍","蝦","蠟","鄰","胸","鞏","擠","偶","棄","槽","勁","乳","鄧","吉","仁","爛","磚","租","烏","艦","伴","瓜","淺","丙","暫","燥","橡","柳","迷","暖","牌","秧","膽","詳","簧","踏","瓷","譜","呆","賓","糊","洛","輝","憤","競","隙","怒","粘","乃","緒","肩","籍","敏","塗","熙","皆","偵","懸","掘","享","糾","醒","狂","鎖","淀","恨","牲","霸","爬","賞","逆","玩","陵","祝","秒","浙","貌","役","彼","悉","鴨","趨","鳳","晨","畜","輩","秩","卵","署","梯","炎","灘","棋","驅","篩","峽","冒","啥","壽","譯","浸","泉","帽","遲","矽","疆","貸","漏","稿","冠","嫩","脅","芯","牢","叛","蝕","奧","鳴","嶺","羊","憑","串","塘","繪","酵","融","盆","錫","廟","籌","凍","輔","攝","襲","筋","拒","僚","旱","鉀","鳥","漆","沈","眉","疏","添","棒","穗","硝","韓","逼","扭","僑","涼","挺","碗","栽","炒","杯","患","餾","勸","豪","遼","勃","鴻","旦","吏","拜","狗","埋","輥","掩","飲","搬","罵","辭","勾","扣","估","蔣","絨","霧","丈","朵","姆","擬","宇","輯","陝","雕","償","蓄","崇","剪","倡","廳","咬","駛","薯","刷","斥","番","賦","奉","佛","澆","漫","曼","扇","鈣","桃","扶","仔","返","俗","虧","腔","鞋","棱","覆","框","悄","叔","撞","騙","勘","旺","沸","孤","吐","孟","渠","屈","疾","妙","惜","仰","狠","脹","諧","拋","黴","桑","崗","嘛","衰","盜","滲","臟","賴","湧","甜","曹","閱","肌","哩","厲","烴","緯","毅","昨","偽","症","煮","嘆","釘","搭","莖","籠","酷","偷","弓","錐","恆","傑","坑","鼻","翼","綸","敘","獄","逮","罐","絡","棚","抑","膨","蔬","寺","驟","穆","冶","枯","冊","屍","凸","紳","坯","犧","焰","轟","欣","晉","瘦","禦","錠","錦","喪","旬","鍛","壟","搜","撲","邀","亭","酯","邁","舒","脆","酶","閒","憂","酚","頑","羽","漲","卸","仗","陪","闢","懲","杭","姚","肚","捉","飄","漂","昆","欺","吾","郎","烷","汁","呵","飾","蕭","雅","郵","遷","燕","撒","姻","赴","宴","煩","債","帳","斑","鈴","旨","醇","董","餅","雛","姿","拌","傅","腹","妥","揉","賢","拆","歪","葡","胺","丟","浩","徽","昂","墊","擋","覽","貪","慰","繳","汪","慌","馮","諾","姜","誼","兇","劣","誣","耀","昏","躺","盈","騎","喬","溪","叢","盧","抹","悶","諮","刮","駕","纜","悟","摘","鉺","擲","頗","幻","柄","惠","慘","佳","仇","臘","窩","滌","劍","瞧","堡","潑","蔥","罩","霍","撈","胎","蒼","濱","倆","捅","湘","砍","霞","邵","萄","瘋","淮","遂","熊","糞","烘","宿","檔","戈","駁","嫂","裕","徙","箭","捐","腸","撐","曬","辨","殿","蓮","攤","攪","醬","屏","疫","哀","蔡","堵","沫","皺","暢","疊","閣","萊","敲","轄","鉤","痕","壩","巷","餓","禍","丘","玄","溜","曰","邏","彭","嘗","卿","妨","艇","吞","韋","怨","矮","歇"]')},607:e=>{"use strict";e.exports=JSON.parse('["abdikace","abeceda","adresa","agrese","akce","aktovka","alej","alkohol","amputace","ananas","andulka","anekdota","anketa","antika","anulovat","archa","arogance","asfalt","asistent","aspirace","astma","astronom","atlas","atletika","atol","autobus","azyl","babka","bachor","bacil","baculka","badatel","bageta","bagr","bahno","bakterie","balada","baletka","balkon","balonek","balvan","balza","bambus","bankomat","barbar","baret","barman","baroko","barva","baterka","batoh","bavlna","bazalka","bazilika","bazuka","bedna","beran","beseda","bestie","beton","bezinka","bezmoc","beztak","bicykl","bidlo","biftek","bikiny","bilance","biograf","biolog","bitva","bizon","blahobyt","blatouch","blecha","bledule","blesk","blikat","blizna","blokovat","bloudit","blud","bobek","bobr","bodlina","bodnout","bohatost","bojkot","bojovat","bokorys","bolest","borec","borovice","bota","boubel","bouchat","bouda","boule","bourat","boxer","bradavka","brambora","branka","bratr","brepta","briketa","brko","brloh","bronz","broskev","brunetka","brusinka","brzda","brzy","bublina","bubnovat","buchta","buditel","budka","budova","bufet","bujarost","bukvice","buldok","bulva","bunda","bunkr","burza","butik","buvol","buzola","bydlet","bylina","bytovka","bzukot","capart","carevna","cedr","cedule","cejch","cejn","cela","celer","celkem","celnice","cenina","cennost","cenovka","centrum","cenzor","cestopis","cetka","chalupa","chapadlo","charita","chata","chechtat","chemie","chichot","chirurg","chlad","chleba","chlubit","chmel","chmura","chobot","chochol","chodba","cholera","chomout","chopit","choroba","chov","chrapot","chrlit","chrt","chrup","chtivost","chudina","chutnat","chvat","chvilka","chvost","chyba","chystat","chytit","cibule","cigareta","cihelna","cihla","cinkot","cirkus","cisterna","citace","citrus","cizinec","cizost","clona","cokoliv","couvat","ctitel","ctnost","cudnost","cuketa","cukr","cupot","cvaknout","cval","cvik","cvrkot","cyklista","daleko","dareba","datel","datum","dcera","debata","dechovka","decibel","deficit","deflace","dekl","dekret","demokrat","deprese","derby","deska","detektiv","dikobraz","diktovat","dioda","diplom","disk","displej","divadlo","divoch","dlaha","dlouho","dluhopis","dnes","dobro","dobytek","docent","dochutit","dodnes","dohled","dohoda","dohra","dojem","dojnice","doklad","dokola","doktor","dokument","dolar","doleva","dolina","doma","dominant","domluvit","domov","donutit","dopad","dopis","doplnit","doposud","doprovod","dopustit","dorazit","dorost","dort","dosah","doslov","dostatek","dosud","dosyta","dotaz","dotek","dotknout","doufat","doutnat","dovozce","dozadu","doznat","dozorce","drahota","drak","dramatik","dravec","draze","drdol","drobnost","drogerie","drozd","drsnost","drtit","drzost","duben","duchovno","dudek","duha","duhovka","dusit","dusno","dutost","dvojice","dvorec","dynamit","ekolog","ekonomie","elektron","elipsa","email","emise","emoce","empatie","epizoda","epocha","epopej","epos","esej","esence","eskorta","eskymo","etiketa","euforie","evoluce","exekuce","exkurze","expedice","exploze","export","extrakt","facka","fajfka","fakulta","fanatik","fantazie","farmacie","favorit","fazole","federace","fejeton","fenka","fialka","figurant","filozof","filtr","finance","finta","fixace","fjord","flanel","flirt","flotila","fond","fosfor","fotbal","fotka","foton","frakce","freska","fronta","fukar","funkce","fyzika","galeje","garant","genetika","geolog","gilotina","glazura","glejt","golem","golfista","gotika","graf","gramofon","granule","grep","gril","grog","groteska","guma","hadice","hadr","hala","halenka","hanba","hanopis","harfa","harpuna","havran","hebkost","hejkal","hejno","hejtman","hektar","helma","hematom","herec","herna","heslo","hezky","historik","hladovka","hlasivky","hlava","hledat","hlen","hlodavec","hloh","hloupost","hltat","hlubina","hluchota","hmat","hmota","hmyz","hnis","hnojivo","hnout","hoblina","hoboj","hoch","hodiny","hodlat","hodnota","hodovat","hojnost","hokej","holinka","holka","holub","homole","honitba","honorace","horal","horda","horizont","horko","horlivec","hormon","hornina","horoskop","horstvo","hospoda","hostina","hotovost","houba","houf","houpat","houska","hovor","hradba","hranice","hravost","hrazda","hrbolek","hrdina","hrdlo","hrdost","hrnek","hrobka","hromada","hrot","hrouda","hrozen","hrstka","hrubost","hryzat","hubenost","hubnout","hudba","hukot","humr","husita","hustota","hvozd","hybnost","hydrant","hygiena","hymna","hysterik","idylka","ihned","ikona","iluze","imunita","infekce","inflace","inkaso","inovace","inspekce","internet","invalida","investor","inzerce","ironie","jablko","jachta","jahoda","jakmile","jakost","jalovec","jantar","jarmark","jaro","jasan","jasno","jatka","javor","jazyk","jedinec","jedle","jednatel","jehlan","jekot","jelen","jelito","jemnost","jenom","jepice","jeseter","jevit","jezdec","jezero","jinak","jindy","jinoch","jiskra","jistota","jitrnice","jizva","jmenovat","jogurt","jurta","kabaret","kabel","kabinet","kachna","kadet","kadidlo","kahan","kajak","kajuta","kakao","kaktus","kalamita","kalhoty","kalibr","kalnost","kamera","kamkoliv","kamna","kanibal","kanoe","kantor","kapalina","kapela","kapitola","kapka","kaple","kapota","kapr","kapusta","kapybara","karamel","karotka","karton","kasa","katalog","katedra","kauce","kauza","kavalec","kazajka","kazeta","kazivost","kdekoliv","kdesi","kedluben","kemp","keramika","kino","klacek","kladivo","klam","klapot","klasika","klaun","klec","klenba","klepat","klesnout","klid","klima","klisna","klobouk","klokan","klopa","kloub","klubovna","klusat","kluzkost","kmen","kmitat","kmotr","kniha","knot","koalice","koberec","kobka","kobliha","kobyla","kocour","kohout","kojenec","kokos","koktejl","kolaps","koleda","kolize","kolo","komando","kometa","komik","komnata","komora","kompas","komunita","konat","koncept","kondice","konec","konfese","kongres","konina","konkurs","kontakt","konzerva","kopanec","kopie","kopnout","koprovka","korbel","korektor","kormidlo","koroptev","korpus","koruna","koryto","korzet","kosatec","kostka","kotel","kotleta","kotoul","koukat","koupelna","kousek","kouzlo","kovboj","koza","kozoroh","krabice","krach","krajina","kralovat","krasopis","kravata","kredit","krejcar","kresba","kreveta","kriket","kritik","krize","krkavec","krmelec","krmivo","krocan","krok","kronika","kropit","kroupa","krovka","krtek","kruhadlo","krupice","krutost","krvinka","krychle","krypta","krystal","kryt","kudlanka","kufr","kujnost","kukla","kulajda","kulich","kulka","kulomet","kultura","kuna","kupodivu","kurt","kurzor","kutil","kvalita","kvasinka","kvestor","kynolog","kyselina","kytara","kytice","kytka","kytovec","kyvadlo","labrador","lachtan","ladnost","laik","lakomec","lamela","lampa","lanovka","lasice","laso","lastura","latinka","lavina","lebka","leckdy","leden","lednice","ledovka","ledvina","legenda","legie","legrace","lehce","lehkost","lehnout","lektvar","lenochod","lentilka","lepenka","lepidlo","letadlo","letec","letmo","letokruh","levhart","levitace","levobok","libra","lichotka","lidojed","lidskost","lihovina","lijavec","lilek","limetka","linie","linka","linoleum","listopad","litina","litovat","lobista","lodivod","logika","logoped","lokalita","loket","lomcovat","lopata","lopuch","lord","losos","lotr","loudal","louh","louka","louskat","lovec","lstivost","lucerna","lucifer","lump","lusk","lustrace","lvice","lyra","lyrika","lysina","madam","madlo","magistr","mahagon","majetek","majitel","majorita","makak","makovice","makrela","malba","malina","malovat","malvice","maminka","mandle","manko","marnost","masakr","maskot","masopust","matice","matrika","maturita","mazanec","mazivo","mazlit","mazurka","mdloba","mechanik","meditace","medovina","melasa","meloun","mentolka","metla","metoda","metr","mezera","migrace","mihnout","mihule","mikina","mikrofon","milenec","milimetr","milost","mimika","mincovna","minibar","minomet","minulost","miska","mistr","mixovat","mladost","mlha","mlhovina","mlok","mlsat","mluvit","mnich","mnohem","mobil","mocnost","modelka","modlitba","mohyla","mokro","molekula","momentka","monarcha","monokl","monstrum","montovat","monzun","mosaz","moskyt","most","motivace","motorka","motyka","moucha","moudrost","mozaika","mozek","mozol","mramor","mravenec","mrkev","mrtvola","mrzet","mrzutost","mstitel","mudrc","muflon","mulat","mumie","munice","muset","mutace","muzeum","muzikant","myslivec","mzda","nabourat","nachytat","nadace","nadbytek","nadhoz","nadobro","nadpis","nahlas","nahnat","nahodile","nahradit","naivita","najednou","najisto","najmout","naklonit","nakonec","nakrmit","nalevo","namazat","namluvit","nanometr","naoko","naopak","naostro","napadat","napevno","naplnit","napnout","naposled","naprosto","narodit","naruby","narychlo","nasadit","nasekat","naslepo","nastat","natolik","navenek","navrch","navzdory","nazvat","nebe","nechat","necky","nedaleko","nedbat","neduh","negace","nehet","nehoda","nejen","nejprve","neklid","nelibost","nemilost","nemoc","neochota","neonka","nepokoj","nerost","nerv","nesmysl","nesoulad","netvor","neuron","nevina","nezvykle","nicota","nijak","nikam","nikdy","nikl","nikterak","nitro","nocleh","nohavice","nominace","nora","norek","nositel","nosnost","nouze","noviny","novota","nozdra","nuda","nudle","nuget","nutit","nutnost","nutrie","nymfa","obal","obarvit","obava","obdiv","obec","obehnat","obejmout","obezita","obhajoba","obilnice","objasnit","objekt","obklopit","oblast","oblek","obliba","obloha","obluda","obnos","obohatit","obojek","obout","obrazec","obrna","obruba","obrys","obsah","obsluha","obstarat","obuv","obvaz","obvinit","obvod","obvykle","obyvatel","obzor","ocas","ocel","ocenit","ochladit","ochota","ochrana","ocitnout","odboj","odbyt","odchod","odcizit","odebrat","odeslat","odevzdat","odezva","odhadce","odhodit","odjet","odjinud","odkaz","odkoupit","odliv","odluka","odmlka","odolnost","odpad","odpis","odplout","odpor","odpustit","odpykat","odrazka","odsoudit","odstup","odsun","odtok","odtud","odvaha","odveta","odvolat","odvracet","odznak","ofina","ofsajd","ohlas","ohnisko","ohrada","ohrozit","ohryzek","okap","okenice","oklika","okno","okouzlit","okovy","okrasa","okres","okrsek","okruh","okupant","okurka","okusit","olejnina","olizovat","omak","omeleta","omezit","omladina","omlouvat","omluva","omyl","onehdy","opakovat","opasek","operace","opice","opilost","opisovat","opora","opozice","opravdu","oproti","orbital","orchestr","orgie","orlice","orloj","ortel","osada","oschnout","osika","osivo","oslava","oslepit","oslnit","oslovit","osnova","osoba","osolit","ospalec","osten","ostraha","ostuda","ostych","osvojit","oteplit","otisk","otop","otrhat","otrlost","otrok","otruby","otvor","ovanout","ovar","oves","ovlivnit","ovoce","oxid","ozdoba","pachatel","pacient","padouch","pahorek","pakt","palanda","palec","palivo","paluba","pamflet","pamlsek","panenka","panika","panna","panovat","panstvo","pantofle","paprika","parketa","parodie","parta","paruka","paryba","paseka","pasivita","pastelka","patent","patrona","pavouk","pazneht","pazourek","pecka","pedagog","pejsek","peklo","peloton","penalta","pendrek","penze","periskop","pero","pestrost","petarda","petice","petrolej","pevnina","pexeso","pianista","piha","pijavice","pikle","piknik","pilina","pilnost","pilulka","pinzeta","pipeta","pisatel","pistole","pitevna","pivnice","pivovar","placenta","plakat","plamen","planeta","plastika","platit","plavidlo","plaz","plech","plemeno","plenta","ples","pletivo","plevel","plivat","plnit","plno","plocha","plodina","plomba","plout","pluk","plyn","pobavit","pobyt","pochod","pocit","poctivec","podat","podcenit","podepsat","podhled","podivit","podklad","podmanit","podnik","podoba","podpora","podraz","podstata","podvod","podzim","poezie","pohanka","pohnutka","pohovor","pohroma","pohyb","pointa","pojistka","pojmout","pokazit","pokles","pokoj","pokrok","pokuta","pokyn","poledne","polibek","polknout","poloha","polynom","pomalu","pominout","pomlka","pomoc","pomsta","pomyslet","ponechat","ponorka","ponurost","popadat","popel","popisek","poplach","poprosit","popsat","popud","poradce","porce","porod","porucha","poryv","posadit","posed","posila","poskok","poslanec","posoudit","pospolu","postava","posudek","posyp","potah","potkan","potlesk","potomek","potrava","potupa","potvora","poukaz","pouto","pouzdro","povaha","povidla","povlak","povoz","povrch","povstat","povyk","povzdech","pozdrav","pozemek","poznatek","pozor","pozvat","pracovat","prahory","praktika","prales","praotec","praporek","prase","pravda","princip","prkno","probudit","procento","prodej","profese","prohra","projekt","prolomit","promile","pronikat","propad","prorok","prosba","proton","proutek","provaz","prskavka","prsten","prudkost","prut","prvek","prvohory","psanec","psovod","pstruh","ptactvo","puberta","puch","pudl","pukavec","puklina","pukrle","pult","pumpa","punc","pupen","pusa","pusinka","pustina","putovat","putyka","pyramida","pysk","pytel","racek","rachot","radiace","radnice","radon","raft","ragby","raketa","rakovina","rameno","rampouch","rande","rarach","rarita","rasovna","rastr","ratolest","razance","razidlo","reagovat","reakce","recept","redaktor","referent","reflex","rejnok","reklama","rekord","rekrut","rektor","reputace","revize","revma","revolver","rezerva","riskovat","riziko","robotika","rodokmen","rohovka","rokle","rokoko","romaneto","ropovod","ropucha","rorejs","rosol","rostlina","rotmistr","rotoped","rotunda","roubenka","roucho","roup","roura","rovina","rovnice","rozbor","rozchod","rozdat","rozeznat","rozhodce","rozinka","rozjezd","rozkaz","rozloha","rozmar","rozpad","rozruch","rozsah","roztok","rozum","rozvod","rubrika","ruchadlo","rukavice","rukopis","ryba","rybolov","rychlost","rydlo","rypadlo","rytina","ryzost","sadista","sahat","sako","samec","samizdat","samota","sanitka","sardinka","sasanka","satelit","sazba","sazenice","sbor","schovat","sebranka","secese","sedadlo","sediment","sedlo","sehnat","sejmout","sekera","sekta","sekunda","sekvoje","semeno","seno","servis","sesadit","seshora","seskok","seslat","sestra","sesuv","sesypat","setba","setina","setkat","setnout","setrvat","sever","seznam","shoda","shrnout","sifon","silnice","sirka","sirotek","sirup","situace","skafandr","skalisko","skanzen","skaut","skeptik","skica","skladba","sklenice","sklo","skluz","skoba","skokan","skoro","skripta","skrz","skupina","skvost","skvrna","slabika","sladidlo","slanina","slast","slavnost","sledovat","slepec","sleva","slezina","slib","slina","sliznice","slon","sloupek","slovo","sluch","sluha","slunce","slupka","slza","smaragd","smetana","smilstvo","smlouva","smog","smrad","smrk","smrtka","smutek","smysl","snad","snaha","snob","sobota","socha","sodovka","sokol","sopka","sotva","souboj","soucit","soudce","souhlas","soulad","soumrak","souprava","soused","soutok","souviset","spalovna","spasitel","spis","splav","spodek","spojenec","spolu","sponzor","spornost","spousta","sprcha","spustit","sranda","sraz","srdce","srna","srnec","srovnat","srpen","srst","srub","stanice","starosta","statika","stavba","stehno","stezka","stodola","stolek","stopa","storno","stoupat","strach","stres","strhnout","strom","struna","studna","stupnice","stvol","styk","subjekt","subtropy","suchar","sudost","sukno","sundat","sunout","surikata","surovina","svah","svalstvo","svetr","svatba","svazek","svisle","svitek","svoboda","svodidlo","svorka","svrab","sykavka","sykot","synek","synovec","sypat","sypkost","syrovost","sysel","sytost","tabletka","tabule","tahoun","tajemno","tajfun","tajga","tajit","tajnost","taktika","tamhle","tampon","tancovat","tanec","tanker","tapeta","tavenina","tazatel","technika","tehdy","tekutina","telefon","temnota","tendence","tenista","tenor","teplota","tepna","teprve","terapie","termoska","textil","ticho","tiskopis","titulek","tkadlec","tkanina","tlapka","tleskat","tlukot","tlupa","tmel","toaleta","topinka","topol","torzo","touha","toulec","tradice","traktor","tramp","trasa","traverza","trefit","trest","trezor","trhavina","trhlina","trochu","trojice","troska","trouba","trpce","trpitel","trpkost","trubec","truchlit","truhlice","trus","trvat","tudy","tuhnout","tuhost","tundra","turista","turnaj","tuzemsko","tvaroh","tvorba","tvrdost","tvrz","tygr","tykev","ubohost","uboze","ubrat","ubrousek","ubrus","ubytovna","ucho","uctivost","udivit","uhradit","ujednat","ujistit","ujmout","ukazatel","uklidnit","uklonit","ukotvit","ukrojit","ulice","ulita","ulovit","umyvadlo","unavit","uniforma","uniknout","upadnout","uplatnit","uplynout","upoutat","upravit","uran","urazit","usednout","usilovat","usmrtit","usnadnit","usnout","usoudit","ustlat","ustrnout","utahovat","utkat","utlumit","utonout","utopenec","utrousit","uvalit","uvolnit","uvozovka","uzdravit","uzel","uzenina","uzlina","uznat","vagon","valcha","valoun","vana","vandal","vanilka","varan","varhany","varovat","vcelku","vchod","vdova","vedro","vegetace","vejce","velbloud","veletrh","velitel","velmoc","velryba","venkov","veranda","verze","veselka","veskrze","vesnice","vespodu","vesta","veterina","veverka","vibrace","vichr","videohra","vidina","vidle","vila","vinice","viset","vitalita","vize","vizitka","vjezd","vklad","vkus","vlajka","vlak","vlasec","vlevo","vlhkost","vliv","vlnovka","vloupat","vnucovat","vnuk","voda","vodivost","vodoznak","vodstvo","vojensky","vojna","vojsko","volant","volba","volit","volno","voskovka","vozidlo","vozovna","vpravo","vrabec","vracet","vrah","vrata","vrba","vrcholek","vrhat","vrstva","vrtule","vsadit","vstoupit","vstup","vtip","vybavit","vybrat","vychovat","vydat","vydra","vyfotit","vyhledat","vyhnout","vyhodit","vyhradit","vyhubit","vyjasnit","vyjet","vyjmout","vyklopit","vykonat","vylekat","vymazat","vymezit","vymizet","vymyslet","vynechat","vynikat","vynutit","vypadat","vyplatit","vypravit","vypustit","vyrazit","vyrovnat","vyrvat","vyslovit","vysoko","vystavit","vysunout","vysypat","vytasit","vytesat","vytratit","vyvinout","vyvolat","vyvrhel","vyzdobit","vyznat","vzadu","vzbudit","vzchopit","vzdor","vzduch","vzdychat","vzestup","vzhledem","vzkaz","vzlykat","vznik","vzorek","vzpoura","vztah","vztek","xylofon","zabrat","zabydlet","zachovat","zadarmo","zadusit","zafoukat","zahltit","zahodit","zahrada","zahynout","zajatec","zajet","zajistit","zaklepat","zakoupit","zalepit","zamezit","zamotat","zamyslet","zanechat","zanikat","zaplatit","zapojit","zapsat","zarazit","zastavit","zasunout","zatajit","zatemnit","zatknout","zaujmout","zavalit","zavelet","zavinit","zavolat","zavrtat","zazvonit","zbavit","zbrusu","zbudovat","zbytek","zdaleka","zdarma","zdatnost","zdivo","zdobit","zdroj","zdvih","zdymadlo","zelenina","zeman","zemina","zeptat","zezadu","zezdola","zhatit","zhltnout","zhluboka","zhotovit","zhruba","zima","zimnice","zjemnit","zklamat","zkoumat","zkratka","zkumavka","zlato","zlehka","zloba","zlom","zlost","zlozvyk","zmapovat","zmar","zmatek","zmije","zmizet","zmocnit","zmodrat","zmrzlina","zmutovat","znak","znalost","znamenat","znovu","zobrazit","zotavit","zoubek","zoufale","zplodit","zpomalit","zprava","zprostit","zprudka","zprvu","zrada","zranit","zrcadlo","zrnitost","zrno","zrovna","zrychlit","zrzavost","zticha","ztratit","zubovina","zubr","zvednout","zvenku","zvesela","zvon","zvrat","zvukovod","zvyk"]')},736:e=>{"use strict";e.exports=JSON.parse('["abandon","ability","able","about","above","absent","absorb","abstract","absurd","abuse","access","accident","account","accuse","achieve","acid","acoustic","acquire","across","act","action","actor","actress","actual","adapt","add","addict","address","adjust","admit","adult","advance","advice","aerobic","affair","afford","afraid","again","age","agent","agree","ahead","aim","air","airport","aisle","alarm","album","alcohol","alert","alien","all","alley","allow","almost","alone","alpha","already","also","alter","always","amateur","amazing","among","amount","amused","analyst","anchor","ancient","anger","angle","angry","animal","ankle","announce","annual","another","answer","antenna","antique","anxiety","any","apart","apology","appear","apple","approve","april","arch","arctic","area","arena","argue","arm","armed","armor","army","around","arrange","arrest","arrive","arrow","art","artefact","artist","artwork","ask","aspect","assault","asset","assist","assume","asthma","athlete","atom","attack","attend","attitude","attract","auction","audit","august","aunt","author","auto","autumn","average","avocado","avoid","awake","aware","away","awesome","awful","awkward","axis","baby","bachelor","bacon","badge","bag","balance","balcony","ball","bamboo","banana","banner","bar","barely","bargain","barrel","base","basic","basket","battle","beach","bean","beauty","because","become","beef","before","begin","behave","behind","believe","below","belt","bench","benefit","best","betray","better","between","beyond","bicycle","bid","bike","bind","biology","bird","birth","bitter","black","blade","blame","blanket","blast","bleak","bless","blind","blood","blossom","blouse","blue","blur","blush","board","boat","body","boil","bomb","bone","bonus","book","boost","border","boring","borrow","boss","bottom","bounce","box","boy","bracket","brain","brand","brass","brave","bread","breeze","brick","bridge","brief","bright","bring","brisk","broccoli","broken","bronze","broom","brother","brown","brush","bubble","buddy","budget","buffalo","build","bulb","bulk","bullet","bundle","bunker","burden","burger","burst","bus","business","busy","butter","buyer","buzz","cabbage","cabin","cable","cactus","cage","cake","call","calm","camera","camp","can","canal","cancel","candy","cannon","canoe","canvas","canyon","capable","capital","captain","car","carbon","card","cargo","carpet","carry","cart","case","cash","casino","castle","casual","cat","catalog","catch","category","cattle","caught","cause","caution","cave","ceiling","celery","cement","census","century","cereal","certain","chair","chalk","champion","change","chaos","chapter","charge","chase","chat","cheap","check","cheese","chef","cherry","chest","chicken","chief","child","chimney","choice","choose","chronic","chuckle","chunk","churn","cigar","cinnamon","circle","citizen","city","civil","claim","clap","clarify","claw","clay","clean","clerk","clever","click","client","cliff","climb","clinic","clip","clock","clog","close","cloth","cloud","clown","club","clump","cluster","clutch","coach","coast","coconut","code","coffee","coil","coin","collect","color","column","combine","come","comfort","comic","common","company","concert","conduct","confirm","congress","connect","consider","control","convince","cook","cool","copper","copy","coral","core","corn","correct","cost","cotton","couch","country","couple","course","cousin","cover","coyote","crack","cradle","craft","cram","crane","crash","crater","crawl","crazy","cream","credit","creek","crew","cricket","crime","crisp","critic","crop","cross","crouch","crowd","crucial","cruel","cruise","crumble","crunch","crush","cry","crystal","cube","culture","cup","cupboard","curious","current","curtain","curve","cushion","custom","cute","cycle","dad","damage","damp","dance","danger","daring","dash","daughter","dawn","day","deal","debate","debris","decade","december","decide","decline","decorate","decrease","deer","defense","define","defy","degree","delay","deliver","demand","demise","denial","dentist","deny","depart","depend","deposit","depth","deputy","derive","describe","desert","design","desk","despair","destroy","detail","detect","develop","device","devote","diagram","dial","diamond","diary","dice","diesel","diet","differ","digital","dignity","dilemma","dinner","dinosaur","direct","dirt","disagree","discover","disease","dish","dismiss","disorder","display","distance","divert","divide","divorce","dizzy","doctor","document","dog","doll","dolphin","domain","donate","donkey","donor","door","dose","double","dove","draft","dragon","drama","drastic","draw","dream","dress","drift","drill","drink","drip","drive","drop","drum","dry","duck","dumb","dune","during","dust","dutch","duty","dwarf","dynamic","eager","eagle","early","earn","earth","easily","east","easy","echo","ecology","economy","edge","edit","educate","effort","egg","eight","either","elbow","elder","electric","elegant","element","elephant","elevator","elite","else","embark","embody","embrace","emerge","emotion","employ","empower","empty","enable","enact","end","endless","endorse","enemy","energy","enforce","engage","engine","enhance","enjoy","enlist","enough","enrich","enroll","ensure","enter","entire","entry","envelope","episode","equal","equip","era","erase","erode","erosion","error","erupt","escape","essay","essence","estate","eternal","ethics","evidence","evil","evoke","evolve","exact","example","excess","exchange","excite","exclude","excuse","execute","exercise","exhaust","exhibit","exile","exist","exit","exotic","expand","expect","expire","explain","expose","express","extend","extra","eye","eyebrow","fabric","face","faculty","fade","faint","faith","fall","false","fame","family","famous","fan","fancy","fantasy","farm","fashion","fat","fatal","father","fatigue","fault","favorite","feature","february","federal","fee","feed","feel","female","fence","festival","fetch","fever","few","fiber","fiction","field","figure","file","film","filter","final","find","fine","finger","finish","fire","firm","first","fiscal","fish","fit","fitness","fix","flag","flame","flash","flat","flavor","flee","flight","flip","float","flock","floor","flower","fluid","flush","fly","foam","focus","fog","foil","fold","follow","food","foot","force","forest","forget","fork","fortune","forum","forward","fossil","foster","found","fox","fragile","frame","frequent","fresh","friend","fringe","frog","front","frost","frown","frozen","fruit","fuel","fun","funny","furnace","fury","future","gadget","gain","galaxy","gallery","game","gap","garage","garbage","garden","garlic","garment","gas","gasp","gate","gather","gauge","gaze","general","genius","genre","gentle","genuine","gesture","ghost","giant","gift","giggle","ginger","giraffe","girl","give","glad","glance","glare","glass","glide","glimpse","globe","gloom","glory","glove","glow","glue","goat","goddess","gold","good","goose","gorilla","gospel","gossip","govern","gown","grab","grace","grain","grant","grape","grass","gravity","great","green","grid","grief","grit","grocery","group","grow","grunt","guard","guess","guide","guilt","guitar","gun","gym","habit","hair","half","hammer","hamster","hand","happy","harbor","hard","harsh","harvest","hat","have","hawk","hazard","head","health","heart","heavy","hedgehog","height","hello","helmet","help","hen","hero","hidden","high","hill","hint","hip","hire","history","hobby","hockey","hold","hole","holiday","hollow","home","honey","hood","hope","horn","horror","horse","hospital","host","hotel","hour","hover","hub","huge","human","humble","humor","hundred","hungry","hunt","hurdle","hurry","hurt","husband","hybrid","ice","icon","idea","identify","idle","ignore","ill","illegal","illness","image","imitate","immense","immune","impact","impose","improve","impulse","inch","include","income","increase","index","indicate","indoor","industry","infant","inflict","inform","inhale","inherit","initial","inject","injury","inmate","inner","innocent","input","inquiry","insane","insect","inside","inspire","install","intact","interest","into","invest","invite","involve","iron","island","isolate","issue","item","ivory","jacket","jaguar","jar","jazz","jealous","jeans","jelly","jewel","job","join","joke","journey","joy","judge","juice","jump","jungle","junior","junk","just","kangaroo","keen","keep","ketchup","key","kick","kid","kidney","kind","kingdom","kiss","kit","kitchen","kite","kitten","kiwi","knee","knife","knock","know","lab","label","labor","ladder","lady","lake","lamp","language","laptop","large","later","latin","laugh","laundry","lava","law","lawn","lawsuit","layer","lazy","leader","leaf","learn","leave","lecture","left","leg","legal","legend","leisure","lemon","lend","length","lens","leopard","lesson","letter","level","liar","liberty","library","license","life","lift","light","like","limb","limit","link","lion","liquid","list","little","live","lizard","load","loan","lobster","local","lock","logic","lonely","long","loop","lottery","loud","lounge","love","loyal","lucky","luggage","lumber","lunar","lunch","luxury","lyrics","machine","mad","magic","magnet","maid","mail","main","major","make","mammal","man","manage","mandate","mango","mansion","manual","maple","marble","march","margin","marine","market","marriage","mask","mass","master","match","material","math","matrix","matter","maximum","maze","meadow","mean","measure","meat","mechanic","medal","media","melody","melt","member","memory","mention","menu","mercy","merge","merit","merry","mesh","message","metal","method","middle","midnight","milk","million","mimic","mind","minimum","minor","minute","miracle","mirror","misery","miss","mistake","mix","mixed","mixture","mobile","model","modify","mom","moment","monitor","monkey","monster","month","moon","moral","more","morning","mosquito","mother","motion","motor","mountain","mouse","move","movie","much","muffin","mule","multiply","muscle","museum","mushroom","music","must","mutual","myself","mystery","myth","naive","name","napkin","narrow","nasty","nation","nature","near","neck","need","negative","neglect","neither","nephew","nerve","nest","net","network","neutral","never","news","next","nice","night","noble","noise","nominee","noodle","normal","north","nose","notable","note","nothing","notice","novel","now","nuclear","number","nurse","nut","oak","obey","object","oblige","obscure","observe","obtain","obvious","occur","ocean","october","odor","off","offer","office","often","oil","okay","old","olive","olympic","omit","once","one","onion","online","only","open","opera","opinion","oppose","option","orange","orbit","orchard","order","ordinary","organ","orient","original","orphan","ostrich","other","outdoor","outer","output","outside","oval","oven","over","own","owner","oxygen","oyster","ozone","pact","paddle","page","pair","palace","palm","panda","panel","panic","panther","paper","parade","parent","park","parrot","party","pass","patch","path","patient","patrol","pattern","pause","pave","payment","peace","peanut","pear","peasant","pelican","pen","penalty","pencil","people","pepper","perfect","permit","person","pet","phone","photo","phrase","physical","piano","picnic","picture","piece","pig","pigeon","pill","pilot","pink","pioneer","pipe","pistol","pitch","pizza","place","planet","plastic","plate","play","please","pledge","pluck","plug","plunge","poem","poet","point","polar","pole","police","pond","pony","pool","popular","portion","position","possible","post","potato","pottery","poverty","powder","power","practice","praise","predict","prefer","prepare","present","pretty","prevent","price","pride","primary","print","priority","prison","private","prize","problem","process","produce","profit","program","project","promote","proof","property","prosper","protect","proud","provide","public","pudding","pull","pulp","pulse","pumpkin","punch","pupil","puppy","purchase","purity","purpose","purse","push","put","puzzle","pyramid","quality","quantum","quarter","question","quick","quit","quiz","quote","rabbit","raccoon","race","rack","radar","radio","rail","rain","raise","rally","ramp","ranch","random","range","rapid","rare","rate","rather","raven","raw","razor","ready","real","reason","rebel","rebuild","recall","receive","recipe","record","recycle","reduce","reflect","reform","refuse","region","regret","regular","reject","relax","release","relief","rely","remain","remember","remind","remove","render","renew","rent","reopen","repair","repeat","replace","report","require","rescue","resemble","resist","resource","response","result","retire","retreat","return","reunion","reveal","review","reward","rhythm","rib","ribbon","rice","rich","ride","ridge","rifle","right","rigid","ring","riot","ripple","risk","ritual","rival","river","road","roast","robot","robust","rocket","romance","roof","rookie","room","rose","rotate","rough","round","route","royal","rubber","rude","rug","rule","run","runway","rural","sad","saddle","sadness","safe","sail","salad","salmon","salon","salt","salute","same","sample","sand","satisfy","satoshi","sauce","sausage","save","say","scale","scan","scare","scatter","scene","scheme","school","science","scissors","scorpion","scout","scrap","screen","script","scrub","sea","search","season","seat","second","secret","section","security","seed","seek","segment","select","sell","seminar","senior","sense","sentence","series","service","session","settle","setup","seven","shadow","shaft","shallow","share","shed","shell","sheriff","shield","shift","shine","ship","shiver","shock","shoe","shoot","shop","short","shoulder","shove","shrimp","shrug","shuffle","shy","sibling","sick","side","siege","sight","sign","silent","silk","silly","silver","similar","simple","since","sing","siren","sister","situate","six","size","skate","sketch","ski","skill","skin","skirt","skull","slab","slam","sleep","slender","slice","slide","slight","slim","slogan","slot","slow","slush","small","smart","smile","smoke","smooth","snack","snake","snap","sniff","snow","soap","soccer","social","sock","soda","soft","solar","soldier","solid","solution","solve","someone","song","soon","sorry","sort","soul","sound","soup","source","south","space","spare","spatial","spawn","speak","special","speed","spell","spend","sphere","spice","spider","spike","spin","spirit","split","spoil","sponsor","spoon","sport","spot","spray","spread","spring","spy","square","squeeze","squirrel","stable","stadium","staff","stage","stairs","stamp","stand","start","state","stay","steak","steel","stem","step","stereo","stick","still","sting","stock","stomach","stone","stool","story","stove","strategy","street","strike","strong","struggle","student","stuff","stumble","style","subject","submit","subway","success","such","sudden","suffer","sugar","suggest","suit","summer","sun","sunny","sunset","super","supply","supreme","sure","surface","surge","surprise","surround","survey","suspect","sustain","swallow","swamp","swap","swarm","swear","sweet","swift","swim","swing","switch","sword","symbol","symptom","syrup","system","table","tackle","tag","tail","talent","talk","tank","tape","target","task","taste","tattoo","taxi","teach","team","tell","ten","tenant","tennis","tent","term","test","text","thank","that","theme","then","theory","there","they","thing","this","thought","three","thrive","throw","thumb","thunder","ticket","tide","tiger","tilt","timber","time","tiny","tip","tired","tissue","title","toast","tobacco","today","toddler","toe","together","toilet","token","tomato","tomorrow","tone","tongue","tonight","tool","tooth","top","topic","topple","torch","tornado","tortoise","toss","total","tourist","toward","tower","town","toy","track","trade","traffic","tragic","train","transfer","trap","trash","travel","tray","treat","tree","trend","trial","tribe","trick","trigger","trim","trip","trophy","trouble","truck","true","truly","trumpet","trust","truth","try","tube","tuition","tumble","tuna","tunnel","turkey","turn","turtle","twelve","twenty","twice","twin","twist","two","type","typical","ugly","umbrella","unable","unaware","uncle","uncover","under","undo","unfair","unfold","unhappy","uniform","unique","unit","universe","unknown","unlock","until","unusual","unveil","update","upgrade","uphold","upon","upper","upset","urban","urge","usage","use","used","useful","useless","usual","utility","vacant","vacuum","vague","valid","valley","valve","van","vanish","vapor","various","vast","vault","vehicle","velvet","vendor","venture","venue","verb","verify","version","very","vessel","veteran","viable","vibrant","vicious","victory","video","view","village","vintage","violin","virtual","virus","visa","visit","visual","vital","vivid","vocal","voice","void","volcano","volume","vote","voyage","wage","wagon","wait","walk","wall","walnut","want","warfare","warm","warrior","wash","wasp","waste","water","wave","way","wealth","weapon","wear","weasel","weather","web","wedding","weekend","weird","welcome","west","wet","whale","what","wheat","wheel","when","where","whip","whisper","wide","width","wife","wild","will","win","window","wine","wing","wink","winner","winter","wire","wisdom","wise","wish","witness","wolf","woman","wonder","wood","wool","word","work","world","worry","worth","wrap","wreck","wrestle","wrist","write","wrong","yard","year","yellow","you","young","youth","zebra","zero","zone","zoo"]')},40:e=>{"use strict";e.exports=JSON.parse('["abaisser","abandon","abdiquer","abeille","abolir","aborder","aboutir","aboyer","abrasif","abreuver","abriter","abroger","abrupt","absence","absolu","absurde","abusif","abyssal","académie","acajou","acarien","accabler","accepter","acclamer","accolade","accroche","accuser","acerbe","achat","acheter","aciduler","acier","acompte","acquérir","acronyme","acteur","actif","actuel","adepte","adéquat","adhésif","adjectif","adjuger","admettre","admirer","adopter","adorer","adoucir","adresse","adroit","adulte","adverbe","aérer","aéronef","affaire","affecter","affiche","affreux","affubler","agacer","agencer","agile","agiter","agrafer","agréable","agrume","aider","aiguille","ailier","aimable","aisance","ajouter","ajuster","alarmer","alchimie","alerte","algèbre","algue","aliéner","aliment","alléger","alliage","allouer","allumer","alourdir","alpaga","altesse","alvéole","amateur","ambigu","ambre","aménager","amertume","amidon","amiral","amorcer","amour","amovible","amphibie","ampleur","amusant","analyse","anaphore","anarchie","anatomie","ancien","anéantir","angle","angoisse","anguleux","animal","annexer","annonce","annuel","anodin","anomalie","anonyme","anormal","antenne","antidote","anxieux","apaiser","apéritif","aplanir","apologie","appareil","appeler","apporter","appuyer","aquarium","aqueduc","arbitre","arbuste","ardeur","ardoise","argent","arlequin","armature","armement","armoire","armure","arpenter","arracher","arriver","arroser","arsenic","artériel","article","aspect","asphalte","aspirer","assaut","asservir","assiette","associer","assurer","asticot","astre","astuce","atelier","atome","atrium","atroce","attaque","attentif","attirer","attraper","aubaine","auberge","audace","audible","augurer","aurore","automne","autruche","avaler","avancer","avarice","avenir","averse","aveugle","aviateur","avide","avion","aviser","avoine","avouer","avril","axial","axiome","badge","bafouer","bagage","baguette","baignade","balancer","balcon","baleine","balisage","bambin","bancaire","bandage","banlieue","bannière","banquier","barbier","baril","baron","barque","barrage","bassin","bastion","bataille","bateau","batterie","baudrier","bavarder","belette","bélier","belote","bénéfice","berceau","berger","berline","bermuda","besace","besogne","bétail","beurre","biberon","bicycle","bidule","bijou","bilan","bilingue","billard","binaire","biologie","biopsie","biotype","biscuit","bison","bistouri","bitume","bizarre","blafard","blague","blanchir","blessant","blinder","blond","bloquer","blouson","bobard","bobine","boire","boiser","bolide","bonbon","bondir","bonheur","bonifier","bonus","bordure","borne","botte","boucle","boueux","bougie","boulon","bouquin","bourse","boussole","boutique","boxeur","branche","brasier","brave","brebis","brèche","breuvage","bricoler","brigade","brillant","brioche","brique","brochure","broder","bronzer","brousse","broyeur","brume","brusque","brutal","bruyant","buffle","buisson","bulletin","bureau","burin","bustier","butiner","butoir","buvable","buvette","cabanon","cabine","cachette","cadeau","cadre","caféine","caillou","caisson","calculer","calepin","calibre","calmer","calomnie","calvaire","camarade","caméra","camion","campagne","canal","caneton","canon","cantine","canular","capable","caporal","caprice","capsule","capter","capuche","carabine","carbone","caresser","caribou","carnage","carotte","carreau","carton","cascade","casier","casque","cassure","causer","caution","cavalier","caverne","caviar","cédille","ceinture","céleste","cellule","cendrier","censurer","central","cercle","cérébral","cerise","cerner","cerveau","cesser","chagrin","chaise","chaleur","chambre","chance","chapitre","charbon","chasseur","chaton","chausson","chavirer","chemise","chenille","chéquier","chercher","cheval","chien","chiffre","chignon","chimère","chiot","chlorure","chocolat","choisir","chose","chouette","chrome","chute","cigare","cigogne","cimenter","cinéma","cintrer","circuler","cirer","cirque","citerne","citoyen","citron","civil","clairon","clameur","claquer","classe","clavier","client","cligner","climat","clivage","cloche","clonage","cloporte","cobalt","cobra","cocasse","cocotier","coder","codifier","coffre","cogner","cohésion","coiffer","coincer","colère","colibri","colline","colmater","colonel","combat","comédie","commande","compact","concert","conduire","confier","congeler","connoter","consonne","contact","convexe","copain","copie","corail","corbeau","cordage","corniche","corpus","correct","cortège","cosmique","costume","coton","coude","coupure","courage","couteau","couvrir","coyote","crabe","crainte","cravate","crayon","créature","créditer","crémeux","creuser","crevette","cribler","crier","cristal","critère","croire","croquer","crotale","crucial","cruel","crypter","cubique","cueillir","cuillère","cuisine","cuivre","culminer","cultiver","cumuler","cupide","curatif","curseur","cyanure","cycle","cylindre","cynique","daigner","damier","danger","danseur","dauphin","débattre","débiter","déborder","débrider","débutant","décaler","décembre","déchirer","décider","déclarer","décorer","décrire","décupler","dédale","déductif","déesse","défensif","défiler","défrayer","dégager","dégivrer","déglutir","dégrafer","déjeuner","délice","déloger","demander","demeurer","démolir","dénicher","dénouer","dentelle","dénuder","départ","dépenser","déphaser","déplacer","déposer","déranger","dérober","désastre","descente","désert","désigner","désobéir","dessiner","destrier","détacher","détester","détourer","détresse","devancer","devenir","deviner","devoir","diable","dialogue","diamant","dicter","différer","digérer","digital","digne","diluer","dimanche","diminuer","dioxyde","directif","diriger","discuter","disposer","dissiper","distance","divertir","diviser","docile","docteur","dogme","doigt","domaine","domicile","dompter","donateur","donjon","donner","dopamine","dortoir","dorure","dosage","doseur","dossier","dotation","douanier","double","douceur","douter","doyen","dragon","draper","dresser","dribbler","droiture","duperie","duplexe","durable","durcir","dynastie","éblouir","écarter","écharpe","échelle","éclairer","éclipse","éclore","écluse","école","économie","écorce","écouter","écraser","écrémer","écrivain","écrou","écume","écureuil","édifier","éduquer","effacer","effectif","effigie","effort","effrayer","effusion","égaliser","égarer","éjecter","élaborer","élargir","électron","élégant","éléphant","élève","éligible","élitisme","éloge","élucider","éluder","emballer","embellir","embryon","émeraude","émission","emmener","émotion","émouvoir","empereur","employer","emporter","emprise","émulsion","encadrer","enchère","enclave","encoche","endiguer","endosser","endroit","enduire","énergie","enfance","enfermer","enfouir","engager","engin","englober","énigme","enjamber","enjeu","enlever","ennemi","ennuyeux","enrichir","enrobage","enseigne","entasser","entendre","entier","entourer","entraver","énumérer","envahir","enviable","envoyer","enzyme","éolien","épaissir","épargne","épatant","épaule","épicerie","épidémie","épier","épilogue","épine","épisode","épitaphe","époque","épreuve","éprouver","épuisant","équerre","équipe","ériger","érosion","erreur","éruption","escalier","espadon","espèce","espiègle","espoir","esprit","esquiver","essayer","essence","essieu","essorer","estime","estomac","estrade","étagère","étaler","étanche","étatique","éteindre","étendoir","éternel","éthanol","éthique","ethnie","étirer","étoffer","étoile","étonnant","étourdir","étrange","étroit","étude","euphorie","évaluer","évasion","éventail","évidence","éviter","évolutif","évoquer","exact","exagérer","exaucer","exceller","excitant","exclusif","excuse","exécuter","exemple","exercer","exhaler","exhorter","exigence","exiler","exister","exotique","expédier","explorer","exposer","exprimer","exquis","extensif","extraire","exulter","fable","fabuleux","facette","facile","facture","faiblir","falaise","fameux","famille","farceur","farfelu","farine","farouche","fasciner","fatal","fatigue","faucon","fautif","faveur","favori","fébrile","féconder","fédérer","félin","femme","fémur","fendoir","féodal","fermer","féroce","ferveur","festival","feuille","feutre","février","fiasco","ficeler","fictif","fidèle","figure","filature","filetage","filière","filleul","filmer","filou","filtrer","financer","finir","fiole","firme","fissure","fixer","flairer","flamme","flasque","flatteur","fléau","flèche","fleur","flexion","flocon","flore","fluctuer","fluide","fluvial","folie","fonderie","fongible","fontaine","forcer","forgeron","formuler","fortune","fossile","foudre","fougère","fouiller","foulure","fourmi","fragile","fraise","franchir","frapper","frayeur","frégate","freiner","frelon","frémir","frénésie","frère","friable","friction","frisson","frivole","froid","fromage","frontal","frotter","fruit","fugitif","fuite","fureur","furieux","furtif","fusion","futur","gagner","galaxie","galerie","gambader","garantir","gardien","garnir","garrigue","gazelle","gazon","géant","gélatine","gélule","gendarme","général","génie","genou","gentil","géologie","géomètre","géranium","germe","gestuel","geyser","gibier","gicler","girafe","givre","glace","glaive","glisser","globe","gloire","glorieux","golfeur","gomme","gonfler","gorge","gorille","goudron","gouffre","goulot","goupille","gourmand","goutte","graduel","graffiti","graine","grand","grappin","gratuit","gravir","grenat","griffure","griller","grimper","grogner","gronder","grotte","groupe","gruger","grutier","gruyère","guépard","guerrier","guide","guimauve","guitare","gustatif","gymnaste","gyrostat","habitude","hachoir","halte","hameau","hangar","hanneton","haricot","harmonie","harpon","hasard","hélium","hématome","herbe","hérisson","hermine","héron","hésiter","heureux","hiberner","hibou","hilarant","histoire","hiver","homard","hommage","homogène","honneur","honorer","honteux","horde","horizon","horloge","hormone","horrible","houleux","housse","hublot","huileux","humain","humble","humide","humour","hurler","hydromel","hygiène","hymne","hypnose","idylle","ignorer","iguane","illicite","illusion","image","imbiber","imiter","immense","immobile","immuable","impact","impérial","implorer","imposer","imprimer","imputer","incarner","incendie","incident","incliner","incolore","indexer","indice","inductif","inédit","ineptie","inexact","infini","infliger","informer","infusion","ingérer","inhaler","inhiber","injecter","injure","innocent","inoculer","inonder","inscrire","insecte","insigne","insolite","inspirer","instinct","insulter","intact","intense","intime","intrigue","intuitif","inutile","invasion","inventer","inviter","invoquer","ironique","irradier","irréel","irriter","isoler","ivoire","ivresse","jaguar","jaillir","jambe","janvier","jardin","jauger","jaune","javelot","jetable","jeton","jeudi","jeunesse","joindre","joncher","jongler","joueur","jouissif","journal","jovial","joyau","joyeux","jubiler","jugement","junior","jupon","juriste","justice","juteux","juvénile","kayak","kimono","kiosque","label","labial","labourer","lacérer","lactose","lagune","laine","laisser","laitier","lambeau","lamelle","lampe","lanceur","langage","lanterne","lapin","largeur","larme","laurier","lavabo","lavoir","lecture","légal","léger","légume","lessive","lettre","levier","lexique","lézard","liasse","libérer","libre","licence","licorne","liège","lièvre","ligature","ligoter","ligue","limer","limite","limonade","limpide","linéaire","lingot","lionceau","liquide","lisière","lister","lithium","litige","littoral","livreur","logique","lointain","loisir","lombric","loterie","louer","lourd","loutre","louve","loyal","lubie","lucide","lucratif","lueur","lugubre","luisant","lumière","lunaire","lundi","luron","lutter","luxueux","machine","magasin","magenta","magique","maigre","maillon","maintien","mairie","maison","majorer","malaxer","maléfice","malheur","malice","mallette","mammouth","mandater","maniable","manquant","manteau","manuel","marathon","marbre","marchand","mardi","maritime","marqueur","marron","marteler","mascotte","massif","matériel","matière","matraque","maudire","maussade","mauve","maximal","méchant","méconnu","médaille","médecin","méditer","méduse","meilleur","mélange","mélodie","membre","mémoire","menacer","mener","menhir","mensonge","mentor","mercredi","mérite","merle","messager","mesure","métal","météore","méthode","métier","meuble","miauler","microbe","miette","mignon","migrer","milieu","million","mimique","mince","minéral","minimal","minorer","minute","miracle","miroiter","missile","mixte","mobile","moderne","moelleux","mondial","moniteur","monnaie","monotone","monstre","montagne","monument","moqueur","morceau","morsure","mortier","moteur","motif","mouche","moufle","moulin","mousson","mouton","mouvant","multiple","munition","muraille","murène","murmure","muscle","muséum","musicien","mutation","muter","mutuel","myriade","myrtille","mystère","mythique","nageur","nappe","narquois","narrer","natation","nation","nature","naufrage","nautique","navire","nébuleux","nectar","néfaste","négation","négliger","négocier","neige","nerveux","nettoyer","neurone","neutron","neveu","niche","nickel","nitrate","niveau","noble","nocif","nocturne","noirceur","noisette","nomade","nombreux","nommer","normatif","notable","notifier","notoire","nourrir","nouveau","novateur","novembre","novice","nuage","nuancer","nuire","nuisible","numéro","nuptial","nuque","nutritif","obéir","objectif","obliger","obscur","observer","obstacle","obtenir","obturer","occasion","occuper","océan","octobre","octroyer","octupler","oculaire","odeur","odorant","offenser","officier","offrir","ogive","oiseau","oisillon","olfactif","olivier","ombrage","omettre","onctueux","onduler","onéreux","onirique","opale","opaque","opérer","opinion","opportun","opprimer","opter","optique","orageux","orange","orbite","ordonner","oreille","organe","orgueil","orifice","ornement","orque","ortie","osciller","osmose","ossature","otarie","ouragan","ourson","outil","outrager","ouvrage","ovation","oxyde","oxygène","ozone","paisible","palace","palmarès","palourde","palper","panache","panda","pangolin","paniquer","panneau","panorama","pantalon","papaye","papier","papoter","papyrus","paradoxe","parcelle","paresse","parfumer","parler","parole","parrain","parsemer","partager","parure","parvenir","passion","pastèque","paternel","patience","patron","pavillon","pavoiser","payer","paysage","peigne","peintre","pelage","pélican","pelle","pelouse","peluche","pendule","pénétrer","pénible","pensif","pénurie","pépite","péplum","perdrix","perforer","période","permuter","perplexe","persil","perte","peser","pétale","petit","pétrir","peuple","pharaon","phobie","phoque","photon","phrase","physique","piano","pictural","pièce","pierre","pieuvre","pilote","pinceau","pipette","piquer","pirogue","piscine","piston","pivoter","pixel","pizza","placard","plafond","plaisir","planer","plaque","plastron","plateau","pleurer","plexus","pliage","plomb","plonger","pluie","plumage","pochette","poésie","poète","pointe","poirier","poisson","poivre","polaire","policier","pollen","polygone","pommade","pompier","ponctuel","pondérer","poney","portique","position","posséder","posture","potager","poteau","potion","pouce","poulain","poumon","pourpre","poussin","pouvoir","prairie","pratique","précieux","prédire","préfixe","prélude","prénom","présence","prétexte","prévoir","primitif","prince","prison","priver","problème","procéder","prodige","profond","progrès","proie","projeter","prologue","promener","propre","prospère","protéger","prouesse","proverbe","prudence","pruneau","psychose","public","puceron","puiser","pulpe","pulsar","punaise","punitif","pupitre","purifier","puzzle","pyramide","quasar","querelle","question","quiétude","quitter","quotient","racine","raconter","radieux","ragondin","raideur","raisin","ralentir","rallonge","ramasser","rapide","rasage","ratisser","ravager","ravin","rayonner","réactif","réagir","réaliser","réanimer","recevoir","réciter","réclamer","récolter","recruter","reculer","recycler","rédiger","redouter","refaire","réflexe","réformer","refrain","refuge","régalien","région","réglage","régulier","réitérer","rejeter","rejouer","relatif","relever","relief","remarque","remède","remise","remonter","remplir","remuer","renard","renfort","renifler","renoncer","rentrer","renvoi","replier","reporter","reprise","reptile","requin","réserve","résineux","résoudre","respect","rester","résultat","rétablir","retenir","réticule","retomber","retracer","réunion","réussir","revanche","revivre","révolte","révulsif","richesse","rideau","rieur","rigide","rigoler","rincer","riposter","risible","risque","rituel","rival","rivière","rocheux","romance","rompre","ronce","rondin","roseau","rosier","rotatif","rotor","rotule","rouge","rouille","rouleau","routine","royaume","ruban","rubis","ruche","ruelle","rugueux","ruiner","ruisseau","ruser","rustique","rythme","sabler","saboter","sabre","sacoche","safari","sagesse","saisir","salade","salive","salon","saluer","samedi","sanction","sanglier","sarcasme","sardine","saturer","saugrenu","saumon","sauter","sauvage","savant","savonner","scalpel","scandale","scélérat","scénario","sceptre","schéma","science","scinder","score","scrutin","sculpter","séance","sécable","sécher","secouer","sécréter","sédatif","séduire","seigneur","séjour","sélectif","semaine","sembler","semence","séminal","sénateur","sensible","sentence","séparer","séquence","serein","sergent","sérieux","serrure","sérum","service","sésame","sévir","sevrage","sextuple","sidéral","siècle","siéger","siffler","sigle","signal","silence","silicium","simple","sincère","sinistre","siphon","sirop","sismique","situer","skier","social","socle","sodium","soigneux","soldat","soleil","solitude","soluble","sombre","sommeil","somnoler","sonde","songeur","sonnette","sonore","sorcier","sortir","sosie","sottise","soucieux","soudure","souffle","soulever","soupape","source","soutirer","souvenir","spacieux","spatial","spécial","sphère","spiral","stable","station","sternum","stimulus","stipuler","strict","studieux","stupeur","styliste","sublime","substrat","subtil","subvenir","succès","sucre","suffixe","suggérer","suiveur","sulfate","superbe","supplier","surface","suricate","surmener","surprise","sursaut","survie","suspect","syllabe","symbole","symétrie","synapse","syntaxe","système","tabac","tablier","tactile","tailler","talent","talisman","talonner","tambour","tamiser","tangible","tapis","taquiner","tarder","tarif","tartine","tasse","tatami","tatouage","taupe","taureau","taxer","témoin","temporel","tenaille","tendre","teneur","tenir","tension","terminer","terne","terrible","tétine","texte","thème","théorie","thérapie","thorax","tibia","tiède","timide","tirelire","tiroir","tissu","titane","titre","tituber","toboggan","tolérant","tomate","tonique","tonneau","toponyme","torche","tordre","tornade","torpille","torrent","torse","tortue","totem","toucher","tournage","tousser","toxine","traction","trafic","tragique","trahir","train","trancher","travail","trèfle","tremper","trésor","treuil","triage","tribunal","tricoter","trilogie","triomphe","tripler","triturer","trivial","trombone","tronc","tropical","troupeau","tuile","tulipe","tumulte","tunnel","turbine","tuteur","tutoyer","tuyau","tympan","typhon","typique","tyran","ubuesque","ultime","ultrason","unanime","unifier","union","unique","unitaire","univers","uranium","urbain","urticant","usage","usine","usuel","usure","utile","utopie","vacarme","vaccin","vagabond","vague","vaillant","vaincre","vaisseau","valable","valise","vallon","valve","vampire","vanille","vapeur","varier","vaseux","vassal","vaste","vecteur","vedette","végétal","véhicule","veinard","véloce","vendredi","vénérer","venger","venimeux","ventouse","verdure","vérin","vernir","verrou","verser","vertu","veston","vétéran","vétuste","vexant","vexer","viaduc","viande","victoire","vidange","vidéo","vignette","vigueur","vilain","village","vinaigre","violon","vipère","virement","virtuose","virus","visage","viseur","vision","visqueux","visuel","vital","vitesse","viticole","vitrine","vivace","vivipare","vocation","voguer","voile","voisin","voiture","volaille","volcan","voltiger","volume","vorace","vortex","voter","vouloir","voyage","voyelle","wagon","xénon","yacht","zèbre","zénith","zeste","zoologie"]')},576:e=>{"use strict";e.exports=JSON.parse('["abaco","abbaglio","abbinato","abete","abisso","abolire","abrasivo","abrogato","accadere","accenno","accusato","acetone","achille","acido","acqua","acre","acrilico","acrobata","acuto","adagio","addebito","addome","adeguato","aderire","adipe","adottare","adulare","affabile","affetto","affisso","affranto","aforisma","afoso","africano","agave","agente","agevole","aggancio","agire","agitare","agonismo","agricolo","agrumeto","aguzzo","alabarda","alato","albatro","alberato","albo","albume","alce","alcolico","alettone","alfa","algebra","aliante","alibi","alimento","allagato","allegro","allievo","allodola","allusivo","almeno","alogeno","alpaca","alpestre","altalena","alterno","alticcio","altrove","alunno","alveolo","alzare","amalgama","amanita","amarena","ambito","ambrato","ameba","america","ametista","amico","ammasso","ammenda","ammirare","ammonito","amore","ampio","ampliare","amuleto","anacardo","anagrafe","analista","anarchia","anatra","anca","ancella","ancora","andare","andrea","anello","angelo","angolare","angusto","anima","annegare","annidato","anno","annuncio","anonimo","anticipo","anzi","apatico","apertura","apode","apparire","appetito","appoggio","approdo","appunto","aprile","arabica","arachide","aragosta","araldica","arancio","aratura","arazzo","arbitro","archivio","ardito","arenile","argento","argine","arguto","aria","armonia","arnese","arredato","arringa","arrosto","arsenico","arso","artefice","arzillo","asciutto","ascolto","asepsi","asettico","asfalto","asino","asola","aspirato","aspro","assaggio","asse","assoluto","assurdo","asta","astenuto","astice","astratto","atavico","ateismo","atomico","atono","attesa","attivare","attorno","attrito","attuale","ausilio","austria","autista","autonomo","autunno","avanzato","avere","avvenire","avviso","avvolgere","azione","azoto","azzimo","azzurro","babele","baccano","bacino","baco","badessa","badilata","bagnato","baita","balcone","baldo","balena","ballata","balzano","bambino","bandire","baraonda","barbaro","barca","baritono","barlume","barocco","basilico","basso","batosta","battuto","baule","bava","bavosa","becco","beffa","belgio","belva","benda","benevole","benigno","benzina","bere","berlina","beta","bibita","bici","bidone","bifido","biga","bilancia","bimbo","binocolo","biologo","bipede","bipolare","birbante","birra","biscotto","bisesto","bisnonno","bisonte","bisturi","bizzarro","blando","blatta","bollito","bonifico","bordo","bosco","botanico","bottino","bozzolo","braccio","bradipo","brama","branca","bravura","bretella","brevetto","brezza","briglia","brillante","brindare","broccolo","brodo","bronzina","brullo","bruno","bubbone","buca","budino","buffone","buio","bulbo","buono","burlone","burrasca","bussola","busta","cadetto","caduco","calamaro","calcolo","calesse","calibro","calmo","caloria","cambusa","camerata","camicia","cammino","camola","campale","canapa","candela","cane","canino","canotto","cantina","capace","capello","capitolo","capogiro","cappero","capra","capsula","carapace","carcassa","cardo","carisma","carovana","carretto","cartolina","casaccio","cascata","caserma","caso","cassone","castello","casuale","catasta","catena","catrame","cauto","cavillo","cedibile","cedrata","cefalo","celebre","cellulare","cena","cenone","centesimo","ceramica","cercare","certo","cerume","cervello","cesoia","cespo","ceto","chela","chiaro","chicca","chiedere","chimera","china","chirurgo","chitarra","ciao","ciclismo","cifrare","cigno","cilindro","ciottolo","circa","cirrosi","citrico","cittadino","ciuffo","civetta","civile","classico","clinica","cloro","cocco","codardo","codice","coerente","cognome","collare","colmato","colore","colposo","coltivato","colza","coma","cometa","commando","comodo","computer","comune","conciso","condurre","conferma","congelare","coniuge","connesso","conoscere","consumo","continuo","convegno","coperto","copione","coppia","copricapo","corazza","cordata","coricato","cornice","corolla","corpo","corredo","corsia","cortese","cosmico","costante","cottura","covato","cratere","cravatta","creato","credere","cremoso","crescita","creta","criceto","crinale","crisi","critico","croce","cronaca","crostata","cruciale","crusca","cucire","cuculo","cugino","cullato","cupola","curatore","cursore","curvo","cuscino","custode","dado","daino","dalmata","damerino","daniela","dannoso","danzare","datato","davanti","davvero","debutto","decennio","deciso","declino","decollo","decreto","dedicato","definito","deforme","degno","delegare","delfino","delirio","delta","demenza","denotato","dentro","deposito","derapata","derivare","deroga","descritto","deserto","desiderio","desumere","detersivo","devoto","diametro","dicembre","diedro","difeso","diffuso","digerire","digitale","diluvio","dinamico","dinnanzi","dipinto","diploma","dipolo","diradare","dire","dirotto","dirupo","disagio","discreto","disfare","disgelo","disposto","distanza","disumano","dito","divano","divelto","dividere","divorato","doblone","docente","doganale","dogma","dolce","domato","domenica","dominare","dondolo","dono","dormire","dote","dottore","dovuto","dozzina","drago","druido","dubbio","dubitare","ducale","duna","duomo","duplice","duraturo","ebano","eccesso","ecco","eclissi","economia","edera","edicola","edile","editoria","educare","egemonia","egli","egoismo","egregio","elaborato","elargire","elegante","elencato","eletto","elevare","elfico","elica","elmo","elsa","eluso","emanato","emblema","emesso","emiro","emotivo","emozione","empirico","emulo","endemico","enduro","energia","enfasi","enoteca","entrare","enzima","epatite","epilogo","episodio","epocale","eppure","equatore","erario","erba","erboso","erede","eremita","erigere","ermetico","eroe","erosivo","errante","esagono","esame","esanime","esaudire","esca","esempio","esercito","esibito","esigente","esistere","esito","esofago","esortato","esoso","espanso","espresso","essenza","esso","esteso","estimare","estonia","estroso","esultare","etilico","etnico","etrusco","etto","euclideo","europa","evaso","evidenza","evitato","evoluto","evviva","fabbrica","faccenda","fachiro","falco","famiglia","fanale","fanfara","fango","fantasma","fare","farfalla","farinoso","farmaco","fascia","fastoso","fasullo","faticare","fato","favoloso","febbre","fecola","fede","fegato","felpa","feltro","femmina","fendere","fenomeno","fermento","ferro","fertile","fessura","festivo","fetta","feudo","fiaba","fiducia","fifa","figurato","filo","finanza","finestra","finire","fiore","fiscale","fisico","fiume","flacone","flamenco","flebo","flemma","florido","fluente","fluoro","fobico","focaccia","focoso","foderato","foglio","folata","folclore","folgore","fondente","fonetico","fonia","fontana","forbito","forchetta","foresta","formica","fornaio","foro","fortezza","forzare","fosfato","fosso","fracasso","frana","frassino","fratello","freccetta","frenata","fresco","frigo","frollino","fronde","frugale","frutta","fucilata","fucsia","fuggente","fulmine","fulvo","fumante","fumetto","fumoso","fune","funzione","fuoco","furbo","furgone","furore","fuso","futile","gabbiano","gaffe","galateo","gallina","galoppo","gambero","gamma","garanzia","garbo","garofano","garzone","gasdotto","gasolio","gastrico","gatto","gaudio","gazebo","gazzella","geco","gelatina","gelso","gemello","gemmato","gene","genitore","gennaio","genotipo","gergo","ghepardo","ghiaccio","ghisa","giallo","gilda","ginepro","giocare","gioiello","giorno","giove","girato","girone","gittata","giudizio","giurato","giusto","globulo","glutine","gnomo","gobba","golf","gomito","gommone","gonfio","gonna","governo","gracile","grado","grafico","grammo","grande","grattare","gravoso","grazia","greca","gregge","grifone","grigio","grinza","grotta","gruppo","guadagno","guaio","guanto","guardare","gufo","guidare","ibernato","icona","identico","idillio","idolo","idra","idrico","idrogeno","igiene","ignaro","ignorato","ilare","illeso","illogico","illudere","imballo","imbevuto","imbocco","imbuto","immane","immerso","immolato","impacco","impeto","impiego","importo","impronta","inalare","inarcare","inattivo","incanto","incendio","inchino","incisivo","incluso","incontro","incrocio","incubo","indagine","india","indole","inedito","infatti","infilare","inflitto","ingaggio","ingegno","inglese","ingordo","ingrosso","innesco","inodore","inoltrare","inondato","insano","insetto","insieme","insonnia","insulina","intasato","intero","intonaco","intuito","inumidire","invalido","invece","invito","iperbole","ipnotico","ipotesi","ippica","iride","irlanda","ironico","irrigato","irrorare","isolato","isotopo","isterico","istituto","istrice","italia","iterare","labbro","labirinto","lacca","lacerato","lacrima","lacuna","laddove","lago","lampo","lancetta","lanterna","lardoso","larga","laringe","lastra","latenza","latino","lattuga","lavagna","lavoro","legale","leggero","lembo","lentezza","lenza","leone","lepre","lesivo","lessato","lesto","letterale","leva","levigato","libero","lido","lievito","lilla","limatura","limitare","limpido","lineare","lingua","liquido","lira","lirica","lisca","lite","litigio","livrea","locanda","lode","logica","lombare","londra","longevo","loquace","lorenzo","loto","lotteria","luce","lucidato","lumaca","luminoso","lungo","lupo","luppolo","lusinga","lusso","lutto","macabro","macchina","macero","macinato","madama","magico","maglia","magnete","magro","maiolica","malafede","malgrado","malinteso","malsano","malto","malumore","mana","mancia","mandorla","mangiare","manifesto","mannaro","manovra","mansarda","mantide","manubrio","mappa","maratona","marcire","maretta","marmo","marsupio","maschera","massaia","mastino","materasso","matricola","mattone","maturo","mazurca","meandro","meccanico","mecenate","medesimo","meditare","mega","melassa","melis","melodia","meninge","meno","mensola","mercurio","merenda","merlo","meschino","mese","messere","mestolo","metallo","metodo","mettere","miagolare","mica","micelio","michele","microbo","midollo","miele","migliore","milano","milite","mimosa","minerale","mini","minore","mirino","mirtillo","miscela","missiva","misto","misurare","mitezza","mitigare","mitra","mittente","mnemonico","modello","modifica","modulo","mogano","mogio","mole","molosso","monastero","monco","mondina","monetario","monile","monotono","monsone","montato","monviso","mora","mordere","morsicato","mostro","motivato","motosega","motto","movenza","movimento","mozzo","mucca","mucosa","muffa","mughetto","mugnaio","mulatto","mulinello","multiplo","mummia","munto","muovere","murale","musa","muscolo","musica","mutevole","muto","nababbo","nafta","nanometro","narciso","narice","narrato","nascere","nastrare","naturale","nautica","naviglio","nebulosa","necrosi","negativo","negozio","nemmeno","neofita","neretto","nervo","nessuno","nettuno","neutrale","neve","nevrotico","nicchia","ninfa","nitido","nobile","nocivo","nodo","nome","nomina","nordico","normale","norvegese","nostrano","notare","notizia","notturno","novella","nucleo","nulla","numero","nuovo","nutrire","nuvola","nuziale","oasi","obbedire","obbligo","obelisco","oblio","obolo","obsoleto","occasione","occhio","occidente","occorrere","occultare","ocra","oculato","odierno","odorare","offerta","offrire","offuscato","oggetto","oggi","ognuno","olandese","olfatto","oliato","oliva","ologramma","oltre","omaggio","ombelico","ombra","omega","omissione","ondoso","onere","onice","onnivoro","onorevole","onta","operato","opinione","opposto","oracolo","orafo","ordine","orecchino","orefice","orfano","organico","origine","orizzonte","orma","ormeggio","ornativo","orologio","orrendo","orribile","ortensia","ortica","orzata","orzo","osare","oscurare","osmosi","ospedale","ospite","ossa","ossidare","ostacolo","oste","otite","otre","ottagono","ottimo","ottobre","ovale","ovest","ovino","oviparo","ovocito","ovunque","ovviare","ozio","pacchetto","pace","pacifico","padella","padrone","paese","paga","pagina","palazzina","palesare","pallido","palo","palude","pandoro","pannello","paolo","paonazzo","paprica","parabola","parcella","parere","pargolo","pari","parlato","parola","partire","parvenza","parziale","passivo","pasticca","patacca","patologia","pattume","pavone","peccato","pedalare","pedonale","peggio","peloso","penare","pendice","penisola","pennuto","penombra","pensare","pentola","pepe","pepita","perbene","percorso","perdonato","perforare","pergamena","periodo","permesso","perno","perplesso","persuaso","pertugio","pervaso","pesatore","pesista","peso","pestifero","petalo","pettine","petulante","pezzo","piacere","pianta","piattino","piccino","picozza","piega","pietra","piffero","pigiama","pigolio","pigro","pila","pilifero","pillola","pilota","pimpante","pineta","pinna","pinolo","pioggia","piombo","piramide","piretico","pirite","pirolisi","pitone","pizzico","placebo","planare","plasma","platano","plenario","pochezza","poderoso","podismo","poesia","poggiare","polenta","poligono","pollice","polmonite","polpetta","polso","poltrona","polvere","pomice","pomodoro","ponte","popoloso","porfido","poroso","porpora","porre","portata","posa","positivo","possesso","postulato","potassio","potere","pranzo","prassi","pratica","precluso","predica","prefisso","pregiato","prelievo","premere","prenotare","preparato","presenza","pretesto","prevalso","prima","principe","privato","problema","procura","produrre","profumo","progetto","prolunga","promessa","pronome","proposta","proroga","proteso","prova","prudente","prugna","prurito","psiche","pubblico","pudica","pugilato","pugno","pulce","pulito","pulsante","puntare","pupazzo","pupilla","puro","quadro","qualcosa","quasi","querela","quota","raccolto","raddoppio","radicale","radunato","raffica","ragazzo","ragione","ragno","ramarro","ramingo","ramo","randagio","rantolare","rapato","rapina","rappreso","rasatura","raschiato","rasente","rassegna","rastrello","rata","ravveduto","reale","recepire","recinto","recluta","recondito","recupero","reddito","redimere","regalato","registro","regola","regresso","relazione","remare","remoto","renna","replica","reprimere","reputare","resa","residente","responso","restauro","rete","retina","retorica","rettifica","revocato","riassunto","ribadire","ribelle","ribrezzo","ricarica","ricco","ricevere","riciclato","ricordo","ricreduto","ridicolo","ridurre","rifasare","riflesso","riforma","rifugio","rigare","rigettato","righello","rilassato","rilevato","rimanere","rimbalzo","rimedio","rimorchio","rinascita","rincaro","rinforzo","rinnovo","rinomato","rinsavito","rintocco","rinuncia","rinvenire","riparato","ripetuto","ripieno","riportare","ripresa","ripulire","risata","rischio","riserva","risibile","riso","rispetto","ristoro","risultato","risvolto","ritardo","ritegno","ritmico","ritrovo","riunione","riva","riverso","rivincita","rivolto","rizoma","roba","robotico","robusto","roccia","roco","rodaggio","rodere","roditore","rogito","rollio","romantico","rompere","ronzio","rosolare","rospo","rotante","rotondo","rotula","rovescio","rubizzo","rubrica","ruga","rullino","rumine","rumoroso","ruolo","rupe","russare","rustico","sabato","sabbiare","sabotato","sagoma","salasso","saldatura","salgemma","salivare","salmone","salone","saltare","saluto","salvo","sapere","sapido","saporito","saraceno","sarcasmo","sarto","sassoso","satellite","satira","satollo","saturno","savana","savio","saziato","sbadiglio","sbalzo","sbancato","sbarra","sbattere","sbavare","sbendare","sbirciare","sbloccato","sbocciato","sbrinare","sbruffone","sbuffare","scabroso","scadenza","scala","scambiare","scandalo","scapola","scarso","scatenare","scavato","scelto","scenico","scettro","scheda","schiena","sciarpa","scienza","scindere","scippo","sciroppo","scivolo","sclerare","scodella","scolpito","scomparto","sconforto","scoprire","scorta","scossone","scozzese","scriba","scrollare","scrutinio","scuderia","scultore","scuola","scuro","scusare","sdebitare","sdoganare","seccatura","secondo","sedano","seggiola","segnalato","segregato","seguito","selciato","selettivo","sella","selvaggio","semaforo","sembrare","seme","seminato","sempre","senso","sentire","sepolto","sequenza","serata","serbato","sereno","serio","serpente","serraglio","servire","sestina","setola","settimana","sfacelo","sfaldare","sfamato","sfarzoso","sfaticato","sfera","sfida","sfilato","sfinge","sfocato","sfoderare","sfogo","sfoltire","sforzato","sfratto","sfruttato","sfuggito","sfumare","sfuso","sgabello","sgarbato","sgonfiare","sgorbio","sgrassato","sguardo","sibilo","siccome","sierra","sigla","signore","silenzio","sillaba","simbolo","simpatico","simulato","sinfonia","singolo","sinistro","sino","sintesi","sinusoide","sipario","sisma","sistole","situato","slitta","slogatura","sloveno","smarrito","smemorato","smentito","smeraldo","smilzo","smontare","smottato","smussato","snellire","snervato","snodo","sobbalzo","sobrio","soccorso","sociale","sodale","soffitto","sogno","soldato","solenne","solido","sollazzo","solo","solubile","solvente","somatico","somma","sonda","sonetto","sonnifero","sopire","soppeso","sopra","sorgere","sorpasso","sorriso","sorso","sorteggio","sorvolato","sospiro","sosta","sottile","spada","spalla","spargere","spatola","spavento","spazzola","specie","spedire","spegnere","spelatura","speranza","spessore","spettrale","spezzato","spia","spigoloso","spillato","spinoso","spirale","splendido","sportivo","sposo","spranga","sprecare","spronato","spruzzo","spuntino","squillo","sradicare","srotolato","stabile","stacco","staffa","stagnare","stampato","stantio","starnuto","stasera","statuto","stelo","steppa","sterzo","stiletto","stima","stirpe","stivale","stizzoso","stonato","storico","strappo","stregato","stridulo","strozzare","strutto","stuccare","stufo","stupendo","subentro","succoso","sudore","suggerito","sugo","sultano","suonare","superbo","supporto","surgelato","surrogato","sussurro","sutura","svagare","svedese","sveglio","svelare","svenuto","svezia","sviluppo","svista","svizzera","svolta","svuotare","tabacco","tabulato","tacciare","taciturno","tale","talismano","tampone","tannino","tara","tardivo","targato","tariffa","tarpare","tartaruga","tasto","tattico","taverna","tavolata","tazza","teca","tecnico","telefono","temerario","tempo","temuto","tendone","tenero","tensione","tentacolo","teorema","terme","terrazzo","terzetto","tesi","tesserato","testato","tetro","tettoia","tifare","tigella","timbro","tinto","tipico","tipografo","tiraggio","tiro","titanio","titolo","titubante","tizio","tizzone","toccare","tollerare","tolto","tombola","tomo","tonfo","tonsilla","topazio","topologia","toppa","torba","tornare","torrone","tortora","toscano","tossire","tostatura","totano","trabocco","trachea","trafila","tragedia","tralcio","tramonto","transito","trapano","trarre","trasloco","trattato","trave","treccia","tremolio","trespolo","tributo","tricheco","trifoglio","trillo","trincea","trio","tristezza","triturato","trivella","tromba","trono","troppo","trottola","trovare","truccato","tubatura","tuffato","tulipano","tumulto","tunisia","turbare","turchino","tuta","tutela","ubicato","uccello","uccisore","udire","uditivo","uffa","ufficio","uguale","ulisse","ultimato","umano","umile","umorismo","uncinetto","ungere","ungherese","unicorno","unificato","unisono","unitario","unte","uovo","upupa","uragano","urgenza","urlo","usanza","usato","uscito","usignolo","usuraio","utensile","utilizzo","utopia","vacante","vaccinato","vagabondo","vagliato","valanga","valgo","valico","valletta","valoroso","valutare","valvola","vampata","vangare","vanitoso","vano","vantaggio","vanvera","vapore","varano","varcato","variante","vasca","vedetta","vedova","veduto","vegetale","veicolo","velcro","velina","velluto","veloce","venato","vendemmia","vento","verace","verbale","vergogna","verifica","vero","verruca","verticale","vescica","vessillo","vestale","veterano","vetrina","vetusto","viandante","vibrante","vicenda","vichingo","vicinanza","vidimare","vigilia","vigneto","vigore","vile","villano","vimini","vincitore","viola","vipera","virgola","virologo","virulento","viscoso","visione","vispo","vissuto","visura","vita","vitello","vittima","vivanda","vivido","viziare","voce","voga","volatile","volere","volpe","voragine","vulcano","zampogna","zanna","zappato","zattera","zavorra","zefiro","zelante","zelo","zenzero","zerbino","zibetto","zinco","zircone","zitto","zolla","zotico","zucchero","zufolo","zulu","zuppa"]')},967:e=>{"use strict";e.exports=JSON.parse('["あいこくしん","あいさつ","あいだ","あおぞら","あかちゃん","あきる","あけがた","あける","あこがれる","あさい","あさひ","あしあと","あじわう","あずかる","あずき","あそぶ","あたえる","あたためる","あたりまえ","あたる","あつい","あつかう","あっしゅく","あつまり","あつめる","あてな","あてはまる","あひる","あぶら","あぶる","あふれる","あまい","あまど","あまやかす","あまり","あみもの","あめりか","あやまる","あゆむ","あらいぐま","あらし","あらすじ","あらためる","あらゆる","あらわす","ありがとう","あわせる","あわてる","あんい","あんがい","あんこ","あんぜん","あんてい","あんない","あんまり","いいだす","いおん","いがい","いがく","いきおい","いきなり","いきもの","いきる","いくじ","いくぶん","いけばな","いけん","いこう","いこく","いこつ","いさましい","いさん","いしき","いじゅう","いじょう","いじわる","いずみ","いずれ","いせい","いせえび","いせかい","いせき","いぜん","いそうろう","いそがしい","いだい","いだく","いたずら","いたみ","いたりあ","いちおう","いちじ","いちど","いちば","いちぶ","いちりゅう","いつか","いっしゅん","いっせい","いっそう","いったん","いっち","いってい","いっぽう","いてざ","いてん","いどう","いとこ","いない","いなか","いねむり","いのち","いのる","いはつ","いばる","いはん","いびき","いひん","いふく","いへん","いほう","いみん","いもうと","いもたれ","いもり","いやがる","いやす","いよかん","いよく","いらい","いらすと","いりぐち","いりょう","いれい","いれもの","いれる","いろえんぴつ","いわい","いわう","いわかん","いわば","いわゆる","いんげんまめ","いんさつ","いんしょう","いんよう","うえき","うえる","うおざ","うがい","うかぶ","うかべる","うきわ","うくらいな","うくれれ","うけたまわる","うけつけ","うけとる","うけもつ","うける","うごかす","うごく","うこん","うさぎ","うしなう","うしろがみ","うすい","うすぎ","うすぐらい","うすめる","うせつ","うちあわせ","うちがわ","うちき","うちゅう","うっかり","うつくしい","うったえる","うつる","うどん","うなぎ","うなじ","うなずく","うなる","うねる","うのう","うぶげ","うぶごえ","うまれる","うめる","うもう","うやまう","うよく","うらがえす","うらぐち","うらない","うりあげ","うりきれ","うるさい","うれしい","うれゆき","うれる","うろこ","うわき","うわさ","うんこう","うんちん","うんてん","うんどう","えいえん","えいが","えいきょう","えいご","えいせい","えいぶん","えいよう","えいわ","えおり","えがお","えがく","えきたい","えくせる","えしゃく","えすて","えつらん","えのぐ","えほうまき","えほん","えまき","えもじ","えもの","えらい","えらぶ","えりあ","えんえん","えんかい","えんぎ","えんげき","えんしゅう","えんぜつ","えんそく","えんちょう","えんとつ","おいかける","おいこす","おいしい","おいつく","おうえん","おうさま","おうじ","おうせつ","おうたい","おうふく","おうべい","おうよう","おえる","おおい","おおう","おおどおり","おおや","おおよそ","おかえり","おかず","おがむ","おかわり","おぎなう","おきる","おくさま","おくじょう","おくりがな","おくる","おくれる","おこす","おこなう","おこる","おさえる","おさない","おさめる","おしいれ","おしえる","おじぎ","おじさん","おしゃれ","おそらく","おそわる","おたがい","おたく","おだやか","おちつく","おっと","おつり","おでかけ","おとしもの","おとなしい","おどり","おどろかす","おばさん","おまいり","おめでとう","おもいで","おもう","おもたい","おもちゃ","おやつ","おやゆび","およぼす","おらんだ","おろす","おんがく","おんけい","おんしゃ","おんせん","おんだん","おんちゅう","おんどけい","かあつ","かいが","がいき","がいけん","がいこう","かいさつ","かいしゃ","かいすいよく","かいぜん","かいぞうど","かいつう","かいてん","かいとう","かいふく","がいへき","かいほう","かいよう","がいらい","かいわ","かえる","かおり","かかえる","かがく","かがし","かがみ","かくご","かくとく","かざる","がぞう","かたい","かたち","がちょう","がっきゅう","がっこう","がっさん","がっしょう","かなざわし","かのう","がはく","かぶか","かほう","かほご","かまう","かまぼこ","かめれおん","かゆい","かようび","からい","かるい","かろう","かわく","かわら","がんか","かんけい","かんこう","かんしゃ","かんそう","かんたん","かんち","がんばる","きあい","きあつ","きいろ","ぎいん","きうい","きうん","きえる","きおう","きおく","きおち","きおん","きかい","きかく","きかんしゃ","ききて","きくばり","きくらげ","きけんせい","きこう","きこえる","きこく","きさい","きさく","きさま","きさらぎ","ぎじかがく","ぎしき","ぎじたいけん","ぎじにってい","ぎじゅつしゃ","きすう","きせい","きせき","きせつ","きそう","きぞく","きぞん","きたえる","きちょう","きつえん","ぎっちり","きつつき","きつね","きてい","きどう","きどく","きない","きなが","きなこ","きぬごし","きねん","きのう","きのした","きはく","きびしい","きひん","きふく","きぶん","きぼう","きほん","きまる","きみつ","きむずかしい","きめる","きもだめし","きもち","きもの","きゃく","きやく","ぎゅうにく","きよう","きょうりゅう","きらい","きらく","きりん","きれい","きれつ","きろく","ぎろん","きわめる","ぎんいろ","きんかくじ","きんじょ","きんようび","ぐあい","くいず","くうかん","くうき","くうぐん","くうこう","ぐうせい","くうそう","ぐうたら","くうふく","くうぼ","くかん","くきょう","くげん","ぐこう","くさい","くさき","くさばな","くさる","くしゃみ","くしょう","くすのき","くすりゆび","くせげ","くせん","ぐたいてき","くださる","くたびれる","くちこみ","くちさき","くつした","ぐっすり","くつろぐ","くとうてん","くどく","くなん","くねくね","くのう","くふう","くみあわせ","くみたてる","くめる","くやくしょ","くらす","くらべる","くるま","くれる","くろう","くわしい","ぐんかん","ぐんしょく","ぐんたい","ぐんて","けあな","けいかく","けいけん","けいこ","けいさつ","げいじゅつ","けいたい","げいのうじん","けいれき","けいろ","けおとす","けおりもの","げきか","げきげん","げきだん","げきちん","げきとつ","げきは","げきやく","げこう","げこくじょう","げざい","けさき","げざん","けしき","けしごむ","けしょう","げすと","けたば","けちゃっぷ","けちらす","けつあつ","けつい","けつえき","けっこん","けつじょ","けっせき","けってい","けつまつ","げつようび","げつれい","けつろん","げどく","けとばす","けとる","けなげ","けなす","けなみ","けぬき","げねつ","けねん","けはい","げひん","けぶかい","げぼく","けまり","けみかる","けむし","けむり","けもの","けらい","けろけろ","けわしい","けんい","けんえつ","けんお","けんか","げんき","けんげん","けんこう","けんさく","けんしゅう","けんすう","げんそう","けんちく","けんてい","けんとう","けんない","けんにん","げんぶつ","けんま","けんみん","けんめい","けんらん","けんり","こあくま","こいぬ","こいびと","ごうい","こうえん","こうおん","こうかん","ごうきゅう","ごうけい","こうこう","こうさい","こうじ","こうすい","ごうせい","こうそく","こうたい","こうちゃ","こうつう","こうてい","こうどう","こうない","こうはい","ごうほう","ごうまん","こうもく","こうりつ","こえる","こおり","ごかい","ごがつ","ごかん","こくご","こくさい","こくとう","こくない","こくはく","こぐま","こけい","こける","ここのか","こころ","こさめ","こしつ","こすう","こせい","こせき","こぜん","こそだて","こたい","こたえる","こたつ","こちょう","こっか","こつこつ","こつばん","こつぶ","こてい","こてん","ことがら","ことし","ことば","ことり","こなごな","こねこね","このまま","このみ","このよ","ごはん","こひつじ","こふう","こふん","こぼれる","ごまあぶら","こまかい","ごますり","こまつな","こまる","こむぎこ","こもじ","こもち","こもの","こもん","こやく","こやま","こゆう","こゆび","こよい","こよう","こりる","これくしょん","ころっけ","こわもて","こわれる","こんいん","こんかい","こんき","こんしゅう","こんすい","こんだて","こんとん","こんなん","こんびに","こんぽん","こんまけ","こんや","こんれい","こんわく","ざいえき","さいかい","さいきん","ざいげん","ざいこ","さいしょ","さいせい","ざいたく","ざいちゅう","さいてき","ざいりょう","さうな","さかいし","さがす","さかな","さかみち","さがる","さぎょう","さくし","さくひん","さくら","さこく","さこつ","さずかる","ざせき","さたん","さつえい","ざつおん","ざっか","ざつがく","さっきょく","ざっし","さつじん","ざっそう","さつたば","さつまいも","さてい","さといも","さとう","さとおや","さとし","さとる","さのう","さばく","さびしい","さべつ","さほう","さほど","さます","さみしい","さみだれ","さむけ","さめる","さやえんどう","さゆう","さよう","さよく","さらだ","ざるそば","さわやか","さわる","さんいん","さんか","さんきゃく","さんこう","さんさい","ざんしょ","さんすう","さんせい","さんそ","さんち","さんま","さんみ","さんらん","しあい","しあげ","しあさって","しあわせ","しいく","しいん","しうち","しえい","しおけ","しかい","しかく","じかん","しごと","しすう","じだい","したうけ","したぎ","したて","したみ","しちょう","しちりん","しっかり","しつじ","しつもん","してい","してき","してつ","じてん","じどう","しなぎれ","しなもの","しなん","しねま","しねん","しのぐ","しのぶ","しはい","しばかり","しはつ","しはらい","しはん","しひょう","しふく","じぶん","しへい","しほう","しほん","しまう","しまる","しみん","しむける","じむしょ","しめい","しめる","しもん","しゃいん","しゃうん","しゃおん","じゃがいも","しやくしょ","しゃくほう","しゃけん","しゃこ","しゃざい","しゃしん","しゃせん","しゃそう","しゃたい","しゃちょう","しゃっきん","じゃま","しゃりん","しゃれい","じゆう","じゅうしょ","しゅくはく","じゅしん","しゅっせき","しゅみ","しゅらば","じゅんばん","しょうかい","しょくたく","しょっけん","しょどう","しょもつ","しらせる","しらべる","しんか","しんこう","じんじゃ","しんせいじ","しんちく","しんりん","すあげ","すあし","すあな","ずあん","すいえい","すいか","すいとう","ずいぶん","すいようび","すうがく","すうじつ","すうせん","すおどり","すきま","すくう","すくない","すける","すごい","すこし","ずさん","すずしい","すすむ","すすめる","すっかり","ずっしり","ずっと","すてき","すてる","すねる","すのこ","すはだ","すばらしい","ずひょう","ずぶぬれ","すぶり","すふれ","すべて","すべる","ずほう","すぼん","すまい","すめし","すもう","すやき","すらすら","するめ","すれちがう","すろっと","すわる","すんぜん","すんぽう","せあぶら","せいかつ","せいげん","せいじ","せいよう","せおう","せかいかん","せきにん","せきむ","せきゆ","せきらんうん","せけん","せこう","せすじ","せたい","せたけ","せっかく","せっきゃく","ぜっく","せっけん","せっこつ","せっさたくま","せつぞく","せつだん","せつでん","せっぱん","せつび","せつぶん","せつめい","せつりつ","せなか","せのび","せはば","せびろ","せぼね","せまい","せまる","せめる","せもたれ","せりふ","ぜんあく","せんい","せんえい","せんか","せんきょ","せんく","せんげん","ぜんご","せんさい","せんしゅ","せんすい","せんせい","せんぞ","せんたく","せんちょう","せんてい","せんとう","せんぬき","せんねん","せんぱい","ぜんぶ","ぜんぽう","せんむ","せんめんじょ","せんもん","せんやく","せんゆう","せんよう","ぜんら","ぜんりゃく","せんれい","せんろ","そあく","そいとげる","そいね","そうがんきょう","そうき","そうご","そうしん","そうだん","そうなん","そうび","そうめん","そうり","そえもの","そえん","そがい","そげき","そこう","そこそこ","そざい","そしな","そせい","そせん","そそぐ","そだてる","そつう","そつえん","そっかん","そつぎょう","そっけつ","そっこう","そっせん","そっと","そとがわ","そとづら","そなえる","そなた","そふぼ","そぼく","そぼろ","そまつ","そまる","そむく","そむりえ","そめる","そもそも","そよかぜ","そらまめ","そろう","そんかい","そんけい","そんざい","そんしつ","そんぞく","そんちょう","ぞんび","ぞんぶん","そんみん","たあい","たいいん","たいうん","たいえき","たいおう","だいがく","たいき","たいぐう","たいけん","たいこ","たいざい","だいじょうぶ","だいすき","たいせつ","たいそう","だいたい","たいちょう","たいてい","だいどころ","たいない","たいねつ","たいのう","たいはん","だいひょう","たいふう","たいへん","たいほ","たいまつばな","たいみんぐ","たいむ","たいめん","たいやき","たいよう","たいら","たいりょく","たいる","たいわん","たうえ","たえる","たおす","たおる","たおれる","たかい","たかね","たきび","たくさん","たこく","たこやき","たさい","たしざん","だじゃれ","たすける","たずさわる","たそがれ","たたかう","たたく","ただしい","たたみ","たちばな","だっかい","だっきゃく","だっこ","だっしゅつ","だったい","たてる","たとえる","たなばた","たにん","たぬき","たのしみ","たはつ","たぶん","たべる","たぼう","たまご","たまる","だむる","ためいき","ためす","ためる","たもつ","たやすい","たよる","たらす","たりきほんがん","たりょう","たりる","たると","たれる","たれんと","たろっと","たわむれる","だんあつ","たんい","たんおん","たんか","たんき","たんけん","たんご","たんさん","たんじょうび","だんせい","たんそく","たんたい","だんち","たんてい","たんとう","だんな","たんにん","だんねつ","たんのう","たんぴん","だんぼう","たんまつ","たんめい","だんれつ","だんろ","だんわ","ちあい","ちあん","ちいき","ちいさい","ちえん","ちかい","ちから","ちきゅう","ちきん","ちけいず","ちけん","ちこく","ちさい","ちしき","ちしりょう","ちせい","ちそう","ちたい","ちたん","ちちおや","ちつじょ","ちてき","ちてん","ちぬき","ちぬり","ちのう","ちひょう","ちへいせん","ちほう","ちまた","ちみつ","ちみどろ","ちめいど","ちゃんこなべ","ちゅうい","ちゆりょく","ちょうし","ちょさくけん","ちらし","ちらみ","ちりがみ","ちりょう","ちるど","ちわわ","ちんたい","ちんもく","ついか","ついたち","つうか","つうじょう","つうはん","つうわ","つかう","つかれる","つくね","つくる","つけね","つける","つごう","つたえる","つづく","つつじ","つつむ","つとめる","つながる","つなみ","つねづね","つのる","つぶす","つまらない","つまる","つみき","つめたい","つもり","つもる","つよい","つるぼ","つるみく","つわもの","つわり","てあし","てあて","てあみ","ていおん","ていか","ていき","ていけい","ていこく","ていさつ","ていし","ていせい","ていたい","ていど","ていねい","ていひょう","ていへん","ていぼう","てうち","ておくれ","てきとう","てくび","でこぼこ","てさぎょう","てさげ","てすり","てそう","てちがい","てちょう","てつがく","てつづき","でっぱ","てつぼう","てつや","でぬかえ","てぬき","てぬぐい","てのひら","てはい","てぶくろ","てふだ","てほどき","てほん","てまえ","てまきずし","てみじか","てみやげ","てらす","てれび","てわけ","てわたし","でんあつ","てんいん","てんかい","てんき","てんぐ","てんけん","てんごく","てんさい","てんし","てんすう","でんち","てんてき","てんとう","てんない","てんぷら","てんぼうだい","てんめつ","てんらんかい","でんりょく","でんわ","どあい","といれ","どうかん","とうきゅう","どうぐ","とうし","とうむぎ","とおい","とおか","とおく","とおす","とおる","とかい","とかす","ときおり","ときどき","とくい","とくしゅう","とくてん","とくに","とくべつ","とけい","とける","とこや","とさか","としょかん","とそう","とたん","とちゅう","とっきゅう","とっくん","とつぜん","とつにゅう","とどける","ととのえる","とない","となえる","となり","とのさま","とばす","どぶがわ","とほう","とまる","とめる","ともだち","ともる","どようび","とらえる","とんかつ","どんぶり","ないかく","ないこう","ないしょ","ないす","ないせん","ないそう","なおす","ながい","なくす","なげる","なこうど","なさけ","なたでここ","なっとう","なつやすみ","ななおし","なにごと","なにもの","なにわ","なのか","なふだ","なまいき","なまえ","なまみ","なみだ","なめらか","なめる","なやむ","ならう","ならび","ならぶ","なれる","なわとび","なわばり","にあう","にいがた","にうけ","におい","にかい","にがて","にきび","にくしみ","にくまん","にげる","にさんかたんそ","にしき","にせもの","にちじょう","にちようび","にっか","にっき","にっけい","にっこう","にっさん","にっしょく","にっすう","にっせき","にってい","になう","にほん","にまめ","にもつ","にやり","にゅういん","にりんしゃ","にわとり","にんい","にんか","にんき","にんげん","にんしき","にんずう","にんそう","にんたい","にんち","にんてい","にんにく","にんぷ","にんまり","にんむ","にんめい","にんよう","ぬいくぎ","ぬかす","ぬぐいとる","ぬぐう","ぬくもり","ぬすむ","ぬまえび","ぬめり","ぬらす","ぬんちゃく","ねあげ","ねいき","ねいる","ねいろ","ねぐせ","ねくたい","ねくら","ねこぜ","ねこむ","ねさげ","ねすごす","ねそべる","ねだん","ねつい","ねっしん","ねつぞう","ねったいぎょ","ねぶそく","ねふだ","ねぼう","ねほりはほり","ねまき","ねまわし","ねみみ","ねむい","ねむたい","ねもと","ねらう","ねわざ","ねんいり","ねんおし","ねんかん","ねんきん","ねんぐ","ねんざ","ねんし","ねんちゃく","ねんど","ねんぴ","ねんぶつ","ねんまつ","ねんりょう","ねんれい","のいず","のおづま","のがす","のきなみ","のこぎり","のこす","のこる","のせる","のぞく","のぞむ","のたまう","のちほど","のっく","のばす","のはら","のべる","のぼる","のみもの","のやま","のらいぬ","のらねこ","のりもの","のりゆき","のれん","のんき","ばあい","はあく","ばあさん","ばいか","ばいく","はいけん","はいご","はいしん","はいすい","はいせん","はいそう","はいち","ばいばい","はいれつ","はえる","はおる","はかい","ばかり","はかる","はくしゅ","はけん","はこぶ","はさみ","はさん","はしご","ばしょ","はしる","はせる","ぱそこん","はそん","はたん","はちみつ","はつおん","はっかく","はづき","はっきり","はっくつ","はっけん","はっこう","はっさん","はっしん","はったつ","はっちゅう","はってん","はっぴょう","はっぽう","はなす","はなび","はにかむ","はぶらし","はみがき","はむかう","はめつ","はやい","はやし","はらう","はろうぃん","はわい","はんい","はんえい","はんおん","はんかく","はんきょう","ばんぐみ","はんこ","はんしゃ","はんすう","はんだん","ぱんち","ぱんつ","はんてい","はんとし","はんのう","はんぱ","はんぶん","はんぺん","はんぼうき","はんめい","はんらん","はんろん","ひいき","ひうん","ひえる","ひかく","ひかり","ひかる","ひかん","ひくい","ひけつ","ひこうき","ひこく","ひさい","ひさしぶり","ひさん","びじゅつかん","ひしょ","ひそか","ひそむ","ひたむき","ひだり","ひたる","ひつぎ","ひっこし","ひっし","ひつじゅひん","ひっす","ひつぜん","ぴったり","ぴっちり","ひつよう","ひてい","ひとごみ","ひなまつり","ひなん","ひねる","ひはん","ひびく","ひひょう","ひほう","ひまわり","ひまん","ひみつ","ひめい","ひめじし","ひやけ","ひやす","ひよう","びょうき","ひらがな","ひらく","ひりつ","ひりょう","ひるま","ひるやすみ","ひれい","ひろい","ひろう","ひろき","ひろゆき","ひんかく","ひんけつ","ひんこん","ひんしゅ","ひんそう","ぴんち","ひんぱん","びんぼう","ふあん","ふいうち","ふうけい","ふうせん","ぷうたろう","ふうとう","ふうふ","ふえる","ふおん","ふかい","ふきん","ふくざつ","ふくぶくろ","ふこう","ふさい","ふしぎ","ふじみ","ふすま","ふせい","ふせぐ","ふそく","ぶたにく","ふたん","ふちょう","ふつう","ふつか","ふっかつ","ふっき","ふっこく","ぶどう","ふとる","ふとん","ふのう","ふはい","ふひょう","ふへん","ふまん","ふみん","ふめつ","ふめん","ふよう","ふりこ","ふりる","ふるい","ふんいき","ぶんがく","ぶんぐ","ふんしつ","ぶんせき","ふんそう","ぶんぽう","へいあん","へいおん","へいがい","へいき","へいげん","へいこう","へいさ","へいしゃ","へいせつ","へいそ","へいたく","へいてん","へいねつ","へいわ","へきが","へこむ","べにいろ","べにしょうが","へらす","へんかん","べんきょう","べんごし","へんさい","へんたい","べんり","ほあん","ほいく","ぼうぎょ","ほうこく","ほうそう","ほうほう","ほうもん","ほうりつ","ほえる","ほおん","ほかん","ほきょう","ぼきん","ほくろ","ほけつ","ほけん","ほこう","ほこる","ほしい","ほしつ","ほしゅ","ほしょう","ほせい","ほそい","ほそく","ほたて","ほたる","ぽちぶくろ","ほっきょく","ほっさ","ほったん","ほとんど","ほめる","ほんい","ほんき","ほんけ","ほんしつ","ほんやく","まいにち","まかい","まかせる","まがる","まける","まこと","まさつ","まじめ","ますく","まぜる","まつり","まとめ","まなぶ","まぬけ","まねく","まほう","まもる","まゆげ","まよう","まろやか","まわす","まわり","まわる","まんが","まんきつ","まんぞく","まんなか","みいら","みうち","みえる","みがく","みかた","みかん","みけん","みこん","みじかい","みすい","みすえる","みせる","みっか","みつかる","みつける","みてい","みとめる","みなと","みなみかさい","みねらる","みのう","みのがす","みほん","みもと","みやげ","みらい","みりょく","みわく","みんか","みんぞく","むいか","むえき","むえん","むかい","むかう","むかえ","むかし","むぎちゃ","むける","むげん","むさぼる","むしあつい","むしば","むじゅん","むしろ","むすう","むすこ","むすぶ","むすめ","むせる","むせん","むちゅう","むなしい","むのう","むやみ","むよう","むらさき","むりょう","むろん","めいあん","めいうん","めいえん","めいかく","めいきょく","めいさい","めいし","めいそう","めいぶつ","めいれい","めいわく","めぐまれる","めざす","めした","めずらしい","めだつ","めまい","めやす","めんきょ","めんせき","めんどう","もうしあげる","もうどうけん","もえる","もくし","もくてき","もくようび","もちろん","もどる","もらう","もんく","もんだい","やおや","やける","やさい","やさしい","やすい","やすたろう","やすみ","やせる","やそう","やたい","やちん","やっと","やっぱり","やぶる","やめる","ややこしい","やよい","やわらかい","ゆうき","ゆうびんきょく","ゆうべ","ゆうめい","ゆけつ","ゆしゅつ","ゆせん","ゆそう","ゆたか","ゆちゃく","ゆでる","ゆにゅう","ゆびわ","ゆらい","ゆれる","ようい","ようか","ようきゅう","ようじ","ようす","ようちえん","よかぜ","よかん","よきん","よくせい","よくぼう","よけい","よごれる","よさん","よしゅう","よそう","よそく","よっか","よてい","よどがわく","よねつ","よやく","よゆう","よろこぶ","よろしい","らいう","らくがき","らくご","らくさつ","らくだ","らしんばん","らせん","らぞく","らたい","らっか","られつ","りえき","りかい","りきさく","りきせつ","りくぐん","りくつ","りけん","りこう","りせい","りそう","りそく","りてん","りねん","りゆう","りゅうがく","りよう","りょうり","りょかん","りょくちゃ","りょこう","りりく","りれき","りろん","りんご","るいけい","るいさい","るいじ","るいせき","るすばん","るりがわら","れいかん","れいぎ","れいせい","れいぞうこ","れいとう","れいぼう","れきし","れきだい","れんあい","れんけい","れんこん","れんさい","れんしゅう","れんぞく","れんらく","ろうか","ろうご","ろうじん","ろうそく","ろくが","ろこつ","ろじうら","ろしゅつ","ろせん","ろてん","ろめん","ろれつ","ろんぎ","ろんぱ","ろんぶん","ろんり","わかす","わかめ","わかやま","わかれる","わしつ","わじまし","わすれもの","わらう","われる"]')},428:e=>{"use strict";e.exports=JSON.parse('["가격","가끔","가난","가능","가득","가르침","가뭄","가방","가상","가슴","가운데","가을","가이드","가입","가장","가정","가족","가죽","각오","각자","간격","간부","간섭","간장","간접","간판","갈등","갈비","갈색","갈증","감각","감기","감소","감수성","감자","감정","갑자기","강남","강당","강도","강력히","강변","강북","강사","강수량","강아지","강원도","강의","강제","강조","같이","개구리","개나리","개방","개별","개선","개성","개인","객관적","거실","거액","거울","거짓","거품","걱정","건강","건물","건설","건조","건축","걸음","검사","검토","게시판","게임","겨울","견해","결과","결국","결론","결석","결승","결심","결정","결혼","경계","경고","경기","경력","경복궁","경비","경상도","경영","경우","경쟁","경제","경주","경찰","경치","경향","경험","계곡","계단","계란","계산","계속","계약","계절","계층","계획","고객","고구려","고궁","고급","고등학생","고무신","고민","고양이","고장","고전","고집","고춧가루","고통","고향","곡식","골목","골짜기","골프","공간","공개","공격","공군","공급","공기","공동","공무원","공부","공사","공식","공업","공연","공원","공장","공짜","공책","공통","공포","공항","공휴일","과목","과일","과장","과정","과학","관객","관계","관광","관념","관람","관련","관리","관습","관심","관점","관찰","광경","광고","광장","광주","괴로움","굉장히","교과서","교문","교복","교실","교양","교육","교장","교직","교통","교환","교훈","구경","구름","구멍","구별","구분","구석","구성","구속","구역","구입","구청","구체적","국가","국기","국내","국립","국물","국민","국수","국어","국왕","국적","국제","국회","군대","군사","군인","궁극적","권리","권위","권투","귀국","귀신","규정","규칙","균형","그날","그냥","그늘","그러나","그룹","그릇","그림","그제서야","그토록","극복","극히","근거","근교","근래","근로","근무","근본","근원","근육","근처","글씨","글자","금강산","금고","금년","금메달","금액","금연","금요일","금지","긍정적","기간","기관","기념","기능","기독교","기둥","기록","기름","기법","기본","기분","기쁨","기숙사","기술","기억","기업","기온","기운","기원","기적","기준","기침","기혼","기획","긴급","긴장","길이","김밥","김치","김포공항","깍두기","깜빡","깨달음","깨소금","껍질","꼭대기","꽃잎","나들이","나란히","나머지","나물","나침반","나흘","낙엽","난방","날개","날씨","날짜","남녀","남대문","남매","남산","남자","남편","남학생","낭비","낱말","내년","내용","내일","냄비","냄새","냇물","냉동","냉면","냉방","냉장고","넥타이","넷째","노동","노란색","노력","노인","녹음","녹차","녹화","논리","논문","논쟁","놀이","농구","농담","농민","농부","농업","농장","농촌","높이","눈동자","눈물","눈썹","뉴욕","느낌","늑대","능동적","능력","다방","다양성","다음","다이어트","다행","단계","단골","단독","단맛","단순","단어","단위","단점","단체","단추","단편","단풍","달걀","달러","달력","달리","닭고기","담당","담배","담요","담임","답변","답장","당근","당분간","당연히","당장","대규모","대낮","대단히","대답","대도시","대략","대량","대륙","대문","대부분","대신","대응","대장","대전","대접","대중","대책","대출","대충","대통령","대학","대한민국","대합실","대형","덩어리","데이트","도대체","도덕","도둑","도망","도서관","도심","도움","도입","도자기","도저히","도전","도중","도착","독감","독립","독서","독일","독창적","동화책","뒷모습","뒷산","딸아이","마누라","마늘","마당","마라톤","마련","마무리","마사지","마약","마요네즈","마을","마음","마이크","마중","마지막","마찬가지","마찰","마흔","막걸리","막내","막상","만남","만두","만세","만약","만일","만점","만족","만화","많이","말기","말씀","말투","맘대로","망원경","매년","매달","매력","매번","매스컴","매일","매장","맥주","먹이","먼저","먼지","멀리","메일","며느리","며칠","면담","멸치","명단","명령","명예","명의","명절","명칭","명함","모금","모니터","모델","모든","모범","모습","모양","모임","모조리","모집","모퉁이","목걸이","목록","목사","목소리","목숨","목적","목표","몰래","몸매","몸무게","몸살","몸속","몸짓","몸통","몹시","무관심","무궁화","무더위","무덤","무릎","무슨","무엇","무역","무용","무조건","무지개","무척","문구","문득","문법","문서","문제","문학","문화","물가","물건","물결","물고기","물론","물리학","물음","물질","물체","미국","미디어","미사일","미술","미역","미용실","미움","미인","미팅","미혼","민간","민족","민주","믿음","밀가루","밀리미터","밑바닥","바가지","바구니","바나나","바늘","바닥","바닷가","바람","바이러스","바탕","박물관","박사","박수","반대","반드시","반말","반발","반성","반응","반장","반죽","반지","반찬","받침","발가락","발걸음","발견","발달","발레","발목","발바닥","발생","발음","발자국","발전","발톱","발표","밤하늘","밥그릇","밥맛","밥상","밥솥","방금","방면","방문","방바닥","방법","방송","방식","방안","방울","방지","방학","방해","방향","배경","배꼽","배달","배드민턴","백두산","백색","백성","백인","백제","백화점","버릇","버섯","버튼","번개","번역","번지","번호","벌금","벌레","벌써","범위","범인","범죄","법률","법원","법적","법칙","베이징","벨트","변경","변동","변명","변신","변호사","변화","별도","별명","별일","병실","병아리","병원","보관","보너스","보라색","보람","보름","보상","보안","보자기","보장","보전","보존","보통","보편적","보험","복도","복사","복숭아","복습","볶음","본격적","본래","본부","본사","본성","본인","본질","볼펜","봉사","봉지","봉투","부근","부끄러움","부담","부동산","부문","부분","부산","부상","부엌","부인","부작용","부장","부정","부족","부지런히","부친","부탁","부품","부회장","북부","북한","분노","분량","분리","분명","분석","분야","분위기","분필","분홍색","불고기","불과","불교","불꽃","불만","불법","불빛","불안","불이익","불행","브랜드","비극","비난","비닐","비둘기","비디오","비로소","비만","비명","비밀","비바람","비빔밥","비상","비용","비율","비중","비타민","비판","빌딩","빗물","빗방울","빗줄기","빛깔","빨간색","빨래","빨리","사건","사계절","사나이","사냥","사람","사랑","사립","사모님","사물","사방","사상","사생활","사설","사슴","사실","사업","사용","사월","사장","사전","사진","사촌","사춘기","사탕","사투리","사흘","산길","산부인과","산업","산책","살림","살인","살짝","삼계탕","삼국","삼십","삼월","삼촌","상관","상금","상대","상류","상반기","상상","상식","상업","상인","상자","상점","상처","상추","상태","상표","상품","상황","새벽","색깔","색연필","생각","생명","생물","생방송","생산","생선","생신","생일","생활","서랍","서른","서명","서민","서비스","서양","서울","서적","서점","서쪽","서클","석사","석유","선거","선물","선배","선생","선수","선원","선장","선전","선택","선풍기","설거지","설날","설렁탕","설명","설문","설사","설악산","설치","설탕","섭씨","성공","성당","성명","성별","성인","성장","성적","성질","성함","세금","세미나","세상","세월","세종대왕","세탁","센터","센티미터","셋째","소규모","소극적","소금","소나기","소년","소득","소망","소문","소설","소속","소아과","소용","소원","소음","소중히","소지품","소질","소풍","소형","속담","속도","속옷","손가락","손길","손녀","손님","손등","손목","손뼉","손실","손질","손톱","손해","솔직히","솜씨","송아지","송이","송편","쇠고기","쇼핑","수건","수년","수단","수돗물","수동적","수면","수명","수박","수상","수석","수술","수시로","수업","수염","수영","수입","수준","수집","수출","수컷","수필","수학","수험생","수화기","숙녀","숙소","숙제","순간","순서","순수","순식간","순위","숟가락","술병","술집","숫자","스님","스물","스스로","스승","스웨터","스위치","스케이트","스튜디오","스트레스","스포츠","슬쩍","슬픔","습관","습기","승객","승리","승부","승용차","승진","시각","시간","시골","시금치","시나리오","시댁","시리즈","시멘트","시민","시부모","시선","시설","시스템","시아버지","시어머니","시월","시인","시일","시작","시장","시절","시점","시중","시즌","시집","시청","시합","시험","식구","식기","식당","식량","식료품","식물","식빵","식사","식생활","식초","식탁","식품","신고","신규","신념","신문","신발","신비","신사","신세","신용","신제품","신청","신체","신화","실감","실내","실력","실례","실망","실수","실습","실시","실장","실정","실질적","실천","실체","실컷","실태","실패","실험","실현","심리","심부름","심사","심장","심정","심판","쌍둥이","씨름","씨앗","아가씨","아나운서","아드님","아들","아쉬움","아스팔트","아시아","아울러","아저씨","아줌마","아직","아침","아파트","아프리카","아픔","아홉","아흔","악기","악몽","악수","안개","안경","안과","안내","안녕","안동","안방","안부","안주","알루미늄","알코올","암시","암컷","압력","앞날","앞문","애인","애정","액수","앨범","야간","야단","야옹","약간","약국","약속","약수","약점","약품","약혼녀","양념","양력","양말","양배추","양주","양파","어둠","어려움","어른","어젯밤","어쨌든","어쩌다가","어쩐지","언니","언덕","언론","언어","얼굴","얼른","얼음","얼핏","엄마","업무","업종","업체","엉덩이","엉망","엉터리","엊그제","에너지","에어컨","엔진","여건","여고생","여관","여군","여권","여대생","여덟","여동생","여든","여론","여름","여섯","여성","여왕","여인","여전히","여직원","여학생","여행","역사","역시","역할","연결","연구","연극","연기","연락","연설","연세","연속","연습","연애","연예인","연인","연장","연주","연출","연필","연합","연휴","열기","열매","열쇠","열심히","열정","열차","열흘","염려","엽서","영국","영남","영상","영양","영역","영웅","영원히","영하","영향","영혼","영화","옆구리","옆방","옆집","예감","예금","예방","예산","예상","예선","예술","예습","예식장","예약","예전","예절","예정","예컨대","옛날","오늘","오락","오랫동안","오렌지","오로지","오른발","오븐","오십","오염","오월","오전","오직","오징어","오페라","오피스텔","오히려","옥상","옥수수","온갖","온라인","온몸","온종일","온통","올가을","올림픽","올해","옷차림","와이셔츠","와인","완성","완전","왕비","왕자","왜냐하면","왠지","외갓집","외국","외로움","외삼촌","외출","외침","외할머니","왼발","왼손","왼쪽","요금","요일","요즘","요청","용기","용서","용어","우산","우선","우승","우연히","우정","우체국","우편","운동","운명","운반","운전","운행","울산","울음","움직임","웃어른","웃음","워낙","원고","원래","원서","원숭이","원인","원장","원피스","월급","월드컵","월세","월요일","웨이터","위반","위법","위성","위원","위험","위협","윗사람","유난히","유럽","유명","유물","유산","유적","유치원","유학","유행","유형","육군","육상","육십","육체","은행","음력","음료","음반","음성","음식","음악","음주","의견","의논","의문","의복","의식","의심","의외로","의욕","의원","의학","이것","이곳","이념","이놈","이달","이대로","이동","이렇게","이력서","이론적","이름","이민","이발소","이별","이불","이빨","이상","이성","이슬","이야기","이용","이웃","이월","이윽고","이익","이전","이중","이튿날","이틀","이혼","인간","인격","인공","인구","인근","인기","인도","인류","인물","인생","인쇄","인연","인원","인재","인종","인천","인체","인터넷","인하","인형","일곱","일기","일단","일대","일등","일반","일본","일부","일상","일생","일손","일요일","일월","일정","일종","일주일","일찍","일체","일치","일행","일회용","임금","임무","입대","입력","입맛","입사","입술","입시","입원","입장","입학","자가용","자격","자극","자동","자랑","자부심","자식","자신","자연","자원","자율","자전거","자정","자존심","자판","작가","작년","작성","작업","작용","작은딸","작품","잔디","잔뜩","잔치","잘못","잠깐","잠수함","잠시","잠옷","잠자리","잡지","장관","장군","장기간","장래","장례","장르","장마","장면","장모","장미","장비","장사","장소","장식","장애인","장인","장점","장차","장학금","재능","재빨리","재산","재생","재작년","재정","재채기","재판","재학","재활용","저것","저고리","저곳","저녁","저런","저렇게","저번","저울","저절로","저축","적극","적당히","적성","적용","적응","전개","전공","전기","전달","전라도","전망","전문","전반","전부","전세","전시","전용","전자","전쟁","전주","전철","전체","전통","전혀","전후","절대","절망","절반","절약","절차","점검","점수","점심","점원","점점","점차","접근","접시","접촉","젓가락","정거장","정도","정류장","정리","정말","정면","정문","정반대","정보","정부","정비","정상","정성","정오","정원","정장","정지","정치","정확히","제공","제과점","제대로","제목","제발","제법","제삿날","제안","제일","제작","제주도","제출","제품","제한","조각","조건","조금","조깅","조명","조미료","조상","조선","조용히","조절","조정","조직","존댓말","존재","졸업","졸음","종교","종로","종류","종소리","종업원","종종","종합","좌석","죄인","주관적","주름","주말","주머니","주먹","주문","주민","주방","주변","주식","주인","주일","주장","주전자","주택","준비","줄거리","줄기","줄무늬","중간","중계방송","중국","중년","중단","중독","중반","중부","중세","중소기업","중순","중앙","중요","중학교","즉석","즉시","즐거움","증가","증거","증권","증상","증세","지각","지갑","지경","지극히","지금","지급","지능","지름길","지리산","지방","지붕","지식","지역","지우개","지원","지적","지점","지진","지출","직선","직업","직원","직장","진급","진동","진로","진료","진리","진짜","진찰","진출","진통","진행","질문","질병","질서","짐작","집단","집안","집중","짜증","찌꺼기","차남","차라리","차량","차림","차별","차선","차츰","착각","찬물","찬성","참가","참기름","참새","참석","참여","참외","참조","찻잔","창가","창고","창구","창문","창밖","창작","창조","채널","채점","책가방","책방","책상","책임","챔피언","처벌","처음","천국","천둥","천장","천재","천천히","철도","철저히","철학","첫날","첫째","청년","청바지","청소","청춘","체계","체력","체온","체육","체중","체험","초등학생","초반","초밥","초상화","초순","초여름","초원","초저녁","초점","초청","초콜릿","촛불","총각","총리","총장","촬영","최근","최상","최선","최신","최악","최종","추석","추억","추진","추천","추측","축구","축소","축제","축하","출근","출발","출산","출신","출연","출입","출장","출판","충격","충고","충돌","충분히","충청도","취업","취직","취향","치약","친구","친척","칠십","칠월","칠판","침대","침묵","침실","칫솔","칭찬","카메라","카운터","칼국수","캐릭터","캠퍼스","캠페인","커튼","컨디션","컬러","컴퓨터","코끼리","코미디","콘서트","콜라","콤플렉스","콩나물","쾌감","쿠데타","크림","큰길","큰딸","큰소리","큰아들","큰어머니","큰일","큰절","클래식","클럽","킬로","타입","타자기","탁구","탁자","탄생","태권도","태양","태풍","택시","탤런트","터널","터미널","테니스","테스트","테이블","텔레비전","토론","토마토","토요일","통계","통과","통로","통신","통역","통일","통장","통제","통증","통합","통화","퇴근","퇴원","퇴직금","튀김","트럭","특급","특별","특성","특수","특징","특히","튼튼히","티셔츠","파란색","파일","파출소","판결","판단","판매","판사","팔십","팔월","팝송","패션","팩스","팩시밀리","팬티","퍼센트","페인트","편견","편의","편지","편히","평가","평균","평생","평소","평양","평일","평화","포스터","포인트","포장","포함","표면","표정","표준","표현","품목","품질","풍경","풍속","풍습","프랑스","프린터","플라스틱","피곤","피망","피아노","필름","필수","필요","필자","필통","핑계","하느님","하늘","하드웨어","하룻밤","하반기","하숙집","하순","하여튼","하지만","하천","하품","하필","학과","학교","학급","학기","학년","학력","학번","학부모","학비","학생","학술","학습","학용품","학원","학위","학자","학점","한계","한글","한꺼번에","한낮","한눈","한동안","한때","한라산","한마디","한문","한번","한복","한식","한여름","한쪽","할머니","할아버지","할인","함께","함부로","합격","합리적","항공","항구","항상","항의","해결","해군","해답","해당","해물","해석","해설","해수욕장","해안","핵심","핸드백","햄버거","햇볕","햇살","행동","행복","행사","행운","행위","향기","향상","향수","허락","허용","헬기","현관","현금","현대","현상","현실","현장","현재","현지","혈액","협력","형부","형사","형수","형식","형제","형태","형편","혜택","호기심","호남","호랑이","호박","호텔","호흡","혹시","홀로","홈페이지","홍보","홍수","홍차","화면","화분","화살","화요일","화장","화학","확보","확인","확장","확정","환갑","환경","환영","환율","환자","활기","활동","활발히","활용","활짝","회견","회관","회복","회색","회원","회장","회전","횟수","횡단보도","효율적","후반","후춧가루","훈련","훨씬","휴식","휴일","흉내","흐름","흑백","흑인","흔적","흔히","흥미","흥분","희곡","희망","희생","흰색","힘껏"]')},357:e=>{"use strict";e.exports=JSON.parse('["abacate","abaixo","abalar","abater","abduzir","abelha","aberto","abismo","abotoar","abranger","abreviar","abrigar","abrupto","absinto","absoluto","absurdo","abutre","acabado","acalmar","acampar","acanhar","acaso","aceitar","acelerar","acenar","acervo","acessar","acetona","achatar","acidez","acima","acionado","acirrar","aclamar","aclive","acolhida","acomodar","acoplar","acordar","acumular","acusador","adaptar","adega","adentro","adepto","adequar","aderente","adesivo","adeus","adiante","aditivo","adjetivo","adjunto","admirar","adorar","adquirir","adubo","adverso","advogado","aeronave","afastar","aferir","afetivo","afinador","afivelar","aflito","afluente","afrontar","agachar","agarrar","agasalho","agenciar","agilizar","agiota","agitado","agora","agradar","agreste","agrupar","aguardar","agulha","ajoelhar","ajudar","ajustar","alameda","alarme","alastrar","alavanca","albergue","albino","alcatra","aldeia","alecrim","alegria","alertar","alface","alfinete","algum","alheio","aliar","alicate","alienar","alinhar","aliviar","almofada","alocar","alpiste","alterar","altitude","alucinar","alugar","aluno","alusivo","alvo","amaciar","amador","amarelo","amassar","ambas","ambiente","ameixa","amenizar","amido","amistoso","amizade","amolador","amontoar","amoroso","amostra","amparar","ampliar","ampola","anagrama","analisar","anarquia","anatomia","andaime","anel","anexo","angular","animar","anjo","anomalia","anotado","ansioso","anterior","anuidade","anunciar","anzol","apagador","apalpar","apanhado","apego","apelido","apertada","apesar","apetite","apito","aplauso","aplicada","apoio","apontar","aposta","aprendiz","aprovar","aquecer","arame","aranha","arara","arcada","ardente","areia","arejar","arenito","aresta","argiloso","argola","arma","arquivo","arraial","arrebate","arriscar","arroba","arrumar","arsenal","arterial","artigo","arvoredo","asfaltar","asilado","aspirar","assador","assinar","assoalho","assunto","astral","atacado","atadura","atalho","atarefar","atear","atender","aterro","ateu","atingir","atirador","ativo","atoleiro","atracar","atrevido","atriz","atual","atum","auditor","aumentar","aura","aurora","autismo","autoria","autuar","avaliar","avante","avaria","avental","avesso","aviador","avisar","avulso","axila","azarar","azedo","azeite","azulejo","babar","babosa","bacalhau","bacharel","bacia","bagagem","baiano","bailar","baioneta","bairro","baixista","bajular","baleia","baliza","balsa","banal","bandeira","banho","banir","banquete","barato","barbado","baronesa","barraca","barulho","baseado","bastante","batata","batedor","batida","batom","batucar","baunilha","beber","beijo","beirada","beisebol","beldade","beleza","belga","beliscar","bendito","bengala","benzer","berimbau","berlinda","berro","besouro","bexiga","bezerro","bico","bicudo","bienal","bifocal","bifurcar","bigorna","bilhete","bimestre","bimotor","biologia","biombo","biosfera","bipolar","birrento","biscoito","bisneto","bispo","bissexto","bitola","bizarro","blindado","bloco","bloquear","boato","bobagem","bocado","bocejo","bochecha","boicotar","bolada","boletim","bolha","bolo","bombeiro","bonde","boneco","bonita","borbulha","borda","boreal","borracha","bovino","boxeador","branco","brasa","braveza","breu","briga","brilho","brincar","broa","brochura","bronzear","broto","bruxo","bucha","budismo","bufar","bule","buraco","busca","busto","buzina","cabana","cabelo","cabide","cabo","cabrito","cacau","cacetada","cachorro","cacique","cadastro","cadeado","cafezal","caiaque","caipira","caixote","cajado","caju","calafrio","calcular","caldeira","calibrar","calmante","calota","camada","cambista","camisa","camomila","campanha","camuflar","canavial","cancelar","caneta","canguru","canhoto","canivete","canoa","cansado","cantar","canudo","capacho","capela","capinar","capotar","capricho","captador","capuz","caracol","carbono","cardeal","careca","carimbar","carneiro","carpete","carreira","cartaz","carvalho","casaco","casca","casebre","castelo","casulo","catarata","cativar","caule","causador","cautelar","cavalo","caverna","cebola","cedilha","cegonha","celebrar","celular","cenoura","censo","centeio","cercar","cerrado","certeiro","cerveja","cetim","cevada","chacota","chaleira","chamado","chapada","charme","chatice","chave","chefe","chegada","cheiro","cheque","chicote","chifre","chinelo","chocalho","chover","chumbo","chutar","chuva","cicatriz","ciclone","cidade","cidreira","ciente","cigana","cimento","cinto","cinza","ciranda","circuito","cirurgia","citar","clareza","clero","clicar","clone","clube","coado","coagir","cobaia","cobertor","cobrar","cocada","coelho","coentro","coeso","cogumelo","coibir","coifa","coiote","colar","coleira","colher","colidir","colmeia","colono","coluna","comando","combinar","comentar","comitiva","comover","complexo","comum","concha","condor","conectar","confuso","congelar","conhecer","conjugar","consumir","contrato","convite","cooperar","copeiro","copiador","copo","coquetel","coragem","cordial","corneta","coronha","corporal","correio","cortejo","coruja","corvo","cosseno","costela","cotonete","couro","couve","covil","cozinha","cratera","cravo","creche","credor","creme","crer","crespo","criada","criminal","crioulo","crise","criticar","crosta","crua","cruzeiro","cubano","cueca","cuidado","cujo","culatra","culminar","culpar","cultura","cumprir","cunhado","cupido","curativo","curral","cursar","curto","cuspir","custear","cutelo","damasco","datar","debater","debitar","deboche","debulhar","decalque","decimal","declive","decote","decretar","dedal","dedicado","deduzir","defesa","defumar","degelo","degrau","degustar","deitado","deixar","delator","delegado","delinear","delonga","demanda","demitir","demolido","dentista","depenado","depilar","depois","depressa","depurar","deriva","derramar","desafio","desbotar","descanso","desenho","desfiado","desgaste","desigual","deslize","desmamar","desova","despesa","destaque","desviar","detalhar","detentor","detonar","detrito","deusa","dever","devido","devotado","dezena","diagrama","dialeto","didata","difuso","digitar","dilatado","diluente","diminuir","dinastia","dinheiro","diocese","direto","discreta","disfarce","disparo","disquete","dissipar","distante","ditador","diurno","diverso","divisor","divulgar","dizer","dobrador","dolorido","domador","dominado","donativo","donzela","dormente","dorsal","dosagem","dourado","doutor","drenagem","drible","drogaria","duelar","duende","dueto","duplo","duquesa","durante","duvidoso","eclodir","ecoar","ecologia","edificar","edital","educado","efeito","efetivar","ejetar","elaborar","eleger","eleitor","elenco","elevador","eliminar","elogiar","embargo","embolado","embrulho","embutido","emenda","emergir","emissor","empatia","empenho","empinado","empolgar","emprego","empurrar","emulador","encaixe","encenado","enchente","encontro","endeusar","endossar","enfaixar","enfeite","enfim","engajado","engenho","englobar","engomado","engraxar","enguia","enjoar","enlatar","enquanto","enraizar","enrolado","enrugar","ensaio","enseada","ensino","ensopado","entanto","enteado","entidade","entortar","entrada","entulho","envergar","enviado","envolver","enxame","enxerto","enxofre","enxuto","epiderme","equipar","ereto","erguido","errata","erva","ervilha","esbanjar","esbelto","escama","escola","escrita","escuta","esfinge","esfolar","esfregar","esfumado","esgrima","esmalte","espanto","espelho","espiga","esponja","espreita","espumar","esquerda","estaca","esteira","esticar","estofado","estrela","estudo","esvaziar","etanol","etiqueta","euforia","europeu","evacuar","evaporar","evasivo","eventual","evidente","evoluir","exagero","exalar","examinar","exato","exausto","excesso","excitar","exclamar","executar","exemplo","exibir","exigente","exonerar","expandir","expelir","expirar","explanar","exposto","expresso","expulsar","externo","extinto","extrato","fabricar","fabuloso","faceta","facial","fada","fadiga","faixa","falar","falta","familiar","fandango","fanfarra","fantoche","fardado","farelo","farinha","farofa","farpa","fartura","fatia","fator","favorita","faxina","fazenda","fechado","feijoada","feirante","felino","feminino","fenda","feno","fera","feriado","ferrugem","ferver","festejar","fetal","feudal","fiapo","fibrose","ficar","ficheiro","figurado","fileira","filho","filme","filtrar","firmeza","fisgada","fissura","fita","fivela","fixador","fixo","flacidez","flamingo","flanela","flechada","flora","flutuar","fluxo","focal","focinho","fofocar","fogo","foguete","foice","folgado","folheto","forjar","formiga","forno","forte","fosco","fossa","fragata","fralda","frango","frasco","fraterno","freira","frente","fretar","frieza","friso","fritura","fronha","frustrar","fruteira","fugir","fulano","fuligem","fundar","fungo","funil","furador","furioso","futebol","gabarito","gabinete","gado","gaiato","gaiola","gaivota","galega","galho","galinha","galocha","ganhar","garagem","garfo","gargalo","garimpo","garoupa","garrafa","gasoduto","gasto","gata","gatilho","gaveta","gazela","gelado","geleia","gelo","gemada","gemer","gemido","generoso","gengiva","genial","genoma","genro","geologia","gerador","germinar","gesso","gestor","ginasta","gincana","gingado","girafa","girino","glacial","glicose","global","glorioso","goela","goiaba","golfe","golpear","gordura","gorjeta","gorro","gostoso","goteira","governar","gracejo","gradual","grafite","gralha","grampo","granada","gratuito","graveto","graxa","grego","grelhar","greve","grilo","grisalho","gritaria","grosso","grotesco","grudado","grunhido","gruta","guache","guarani","guaxinim","guerrear","guiar","guincho","guisado","gula","guloso","guru","habitar","harmonia","haste","haver","hectare","herdar","heresia","hesitar","hiato","hibernar","hidratar","hiena","hino","hipismo","hipnose","hipoteca","hoje","holofote","homem","honesto","honrado","hormonal","hospedar","humorado","iate","ideia","idoso","ignorado","igreja","iguana","ileso","ilha","iludido","iluminar","ilustrar","imagem","imediato","imenso","imersivo","iminente","imitador","imortal","impacto","impedir","implante","impor","imprensa","impune","imunizar","inalador","inapto","inativo","incenso","inchar","incidir","incluir","incolor","indeciso","indireto","indutor","ineficaz","inerente","infantil","infestar","infinito","inflamar","informal","infrator","ingerir","inibido","inicial","inimigo","injetar","inocente","inodoro","inovador","inox","inquieto","inscrito","inseto","insistir","inspetor","instalar","insulto","intacto","integral","intimar","intocado","intriga","invasor","inverno","invicto","invocar","iogurte","iraniano","ironizar","irreal","irritado","isca","isento","isolado","isqueiro","italiano","janeiro","jangada","janta","jararaca","jardim","jarro","jasmim","jato","javali","jazida","jejum","joaninha","joelhada","jogador","joia","jornal","jorrar","jovem","juba","judeu","judoca","juiz","julgador","julho","jurado","jurista","juro","justa","labareda","laboral","lacre","lactante","ladrilho","lagarta","lagoa","laje","lamber","lamentar","laminar","lampejo","lanche","lapidar","lapso","laranja","lareira","largura","lasanha","lastro","lateral","latido","lavanda","lavoura","lavrador","laxante","lazer","lealdade","lebre","legado","legendar","legista","leigo","leiloar","leitura","lembrete","leme","lenhador","lentilha","leoa","lesma","leste","letivo","letreiro","levar","leveza","levitar","liberal","libido","liderar","ligar","ligeiro","limitar","limoeiro","limpador","linda","linear","linhagem","liquidez","listagem","lisura","litoral","livro","lixa","lixeira","locador","locutor","lojista","lombo","lona","longe","lontra","lorde","lotado","loteria","loucura","lousa","louvar","luar","lucidez","lucro","luneta","lustre","lutador","luva","macaco","macete","machado","macio","madeira","madrinha","magnata","magreza","maior","mais","malandro","malha","malote","maluco","mamilo","mamoeiro","mamute","manada","mancha","mandato","manequim","manhoso","manivela","manobrar","mansa","manter","manusear","mapeado","maquinar","marcador","maresia","marfim","margem","marinho","marmita","maroto","marquise","marreco","martelo","marujo","mascote","masmorra","massagem","mastigar","matagal","materno","matinal","matutar","maxilar","medalha","medida","medusa","megafone","meiga","melancia","melhor","membro","memorial","menino","menos","mensagem","mental","merecer","mergulho","mesada","mesclar","mesmo","mesquita","mestre","metade","meteoro","metragem","mexer","mexicano","micro","migalha","migrar","milagre","milenar","milhar","mimado","minerar","minhoca","ministro","minoria","miolo","mirante","mirtilo","misturar","mocidade","moderno","modular","moeda","moer","moinho","moita","moldura","moleza","molho","molinete","molusco","montanha","moqueca","morango","morcego","mordomo","morena","mosaico","mosquete","mostarda","motel","motim","moto","motriz","muda","muito","mulata","mulher","multar","mundial","munido","muralha","murcho","muscular","museu","musical","nacional","nadador","naja","namoro","narina","narrado","nascer","nativa","natureza","navalha","navegar","navio","neblina","nebuloso","negativa","negociar","negrito","nervoso","neta","neural","nevasca","nevoeiro","ninar","ninho","nitidez","nivelar","nobreza","noite","noiva","nomear","nominal","nordeste","nortear","notar","noticiar","noturno","novelo","novilho","novo","nublado","nudez","numeral","nupcial","nutrir","nuvem","obcecado","obedecer","objetivo","obrigado","obscuro","obstetra","obter","obturar","ocidente","ocioso","ocorrer","oculista","ocupado","ofegante","ofensiva","oferenda","oficina","ofuscado","ogiva","olaria","oleoso","olhar","oliveira","ombro","omelete","omisso","omitir","ondulado","oneroso","ontem","opcional","operador","oponente","oportuno","oposto","orar","orbitar","ordem","ordinal","orfanato","orgasmo","orgulho","oriental","origem","oriundo","orla","ortodoxo","orvalho","oscilar","ossada","osso","ostentar","otimismo","ousadia","outono","outubro","ouvido","ovelha","ovular","oxidar","oxigenar","pacato","paciente","pacote","pactuar","padaria","padrinho","pagar","pagode","painel","pairar","paisagem","palavra","palestra","palheta","palito","palmada","palpitar","pancada","panela","panfleto","panqueca","pantanal","papagaio","papelada","papiro","parafina","parcial","pardal","parede","partida","pasmo","passado","pastel","patamar","patente","patinar","patrono","paulada","pausar","peculiar","pedalar","pedestre","pediatra","pedra","pegada","peitoral","peixe","pele","pelicano","penca","pendurar","peneira","penhasco","pensador","pente","perceber","perfeito","pergunta","perito","permitir","perna","perplexo","persiana","pertence","peruca","pescado","pesquisa","pessoa","petiscar","piada","picado","piedade","pigmento","pilastra","pilhado","pilotar","pimenta","pincel","pinguim","pinha","pinote","pintar","pioneiro","pipoca","piquete","piranha","pires","pirueta","piscar","pistola","pitanga","pivete","planta","plaqueta","platina","plebeu","plumagem","pluvial","pneu","poda","poeira","poetisa","polegada","policiar","poluente","polvilho","pomar","pomba","ponderar","pontaria","populoso","porta","possuir","postal","pote","poupar","pouso","povoar","praia","prancha","prato","praxe","prece","predador","prefeito","premiar","prensar","preparar","presilha","pretexto","prevenir","prezar","primata","princesa","prisma","privado","processo","produto","profeta","proibido","projeto","prometer","propagar","prosa","protetor","provador","publicar","pudim","pular","pulmonar","pulseira","punhal","punir","pupilo","pureza","puxador","quadra","quantia","quarto","quase","quebrar","queda","queijo","quente","querido","quimono","quina","quiosque","rabanada","rabisco","rachar","racionar","radial","raiar","rainha","raio","raiva","rajada","ralado","ramal","ranger","ranhura","rapadura","rapel","rapidez","raposa","raquete","raridade","rasante","rascunho","rasgar","raspador","rasteira","rasurar","ratazana","ratoeira","realeza","reanimar","reaver","rebaixar","rebelde","rebolar","recado","recente","recheio","recibo","recordar","recrutar","recuar","rede","redimir","redonda","reduzida","reenvio","refinar","refletir","refogar","refresco","refugiar","regalia","regime","regra","reinado","reitor","rejeitar","relativo","remador","remendo","remorso","renovado","reparo","repelir","repleto","repolho","represa","repudiar","requerer","resenha","resfriar","resgatar","residir","resolver","respeito","ressaca","restante","resumir","retalho","reter","retirar","retomada","retratar","revelar","revisor","revolta","riacho","rica","rigidez","rigoroso","rimar","ringue","risada","risco","risonho","robalo","rochedo","rodada","rodeio","rodovia","roedor","roleta","romano","roncar","rosado","roseira","rosto","rota","roteiro","rotina","rotular","rouco","roupa","roxo","rubro","rugido","rugoso","ruivo","rumo","rupestre","russo","sabor","saciar","sacola","sacudir","sadio","safira","saga","sagrada","saibro","salada","saleiro","salgado","saliva","salpicar","salsicha","saltar","salvador","sambar","samurai","sanar","sanfona","sangue","sanidade","sapato","sarda","sargento","sarjeta","saturar","saudade","saxofone","sazonal","secar","secular","seda","sedento","sediado","sedoso","sedutor","segmento","segredo","segundo","seiva","seleto","selvagem","semanal","semente","senador","senhor","sensual","sentado","separado","sereia","seringa","serra","servo","setembro","setor","sigilo","silhueta","silicone","simetria","simpatia","simular","sinal","sincero","singular","sinopse","sintonia","sirene","siri","situado","soberano","sobra","socorro","sogro","soja","solda","soletrar","solteiro","sombrio","sonata","sondar","sonegar","sonhador","sono","soprano","soquete","sorrir","sorteio","sossego","sotaque","soterrar","sovado","sozinho","suavizar","subida","submerso","subsolo","subtrair","sucata","sucesso","suco","sudeste","sufixo","sugador","sugerir","sujeito","sulfato","sumir","suor","superior","suplicar","suposto","suprimir","surdina","surfista","surpresa","surreal","surtir","suspiro","sustento","tabela","tablete","tabuada","tacho","tagarela","talher","talo","talvez","tamanho","tamborim","tampa","tangente","tanto","tapar","tapioca","tardio","tarefa","tarja","tarraxa","tatuagem","taurino","taxativo","taxista","teatral","tecer","tecido","teclado","tedioso","teia","teimar","telefone","telhado","tempero","tenente","tensor","tentar","termal","terno","terreno","tese","tesoura","testado","teto","textura","texugo","tiara","tigela","tijolo","timbrar","timidez","tingido","tinteiro","tiragem","titular","toalha","tocha","tolerar","tolice","tomada","tomilho","tonel","tontura","topete","tora","torcido","torneio","torque","torrada","torto","tostar","touca","toupeira","toxina","trabalho","tracejar","tradutor","trafegar","trajeto","trama","trancar","trapo","traseiro","tratador","travar","treino","tremer","trepidar","trevo","triagem","tribo","triciclo","tridente","trilogia","trindade","triplo","triturar","triunfal","trocar","trombeta","trova","trunfo","truque","tubular","tucano","tudo","tulipa","tupi","turbo","turma","turquesa","tutelar","tutorial","uivar","umbigo","unha","unidade","uniforme","urologia","urso","urtiga","urubu","usado","usina","usufruir","vacina","vadiar","vagaroso","vaidoso","vala","valente","validade","valores","vantagem","vaqueiro","varanda","vareta","varrer","vascular","vasilha","vassoura","vazar","vazio","veado","vedar","vegetar","veicular","veleiro","velhice","veludo","vencedor","vendaval","venerar","ventre","verbal","verdade","vereador","vergonha","vermelho","verniz","versar","vertente","vespa","vestido","vetorial","viaduto","viagem","viajar","viatura","vibrador","videira","vidraria","viela","viga","vigente","vigiar","vigorar","vilarejo","vinco","vinheta","vinil","violeta","virada","virtude","visitar","visto","vitral","viveiro","vizinho","voador","voar","vogal","volante","voleibol","voltagem","volumoso","vontade","vulto","vuvuzela","xadrez","xarope","xeque","xeretar","xerife","xingar","zangado","zarpar","zebu","zelador","zombar","zoologia","zumbido"]')},376:e=>{"use strict";e.exports=JSON.parse('["ábaco","abdomen","abeja","abierto","abogado","abono","aborto","abrazo","abrir","abuelo","abuso","acabar","academia","acceso","acción","aceite","acelga","acento","aceptar","ácido","aclarar","acné","acoger","acoso","activo","acto","actriz","actuar","acudir","acuerdo","acusar","adicto","admitir","adoptar","adorno","aduana","adulto","aéreo","afectar","afición","afinar","afirmar","ágil","agitar","agonía","agosto","agotar","agregar","agrio","agua","agudo","águila","aguja","ahogo","ahorro","aire","aislar","ajedrez","ajeno","ajuste","alacrán","alambre","alarma","alba","álbum","alcalde","aldea","alegre","alejar","alerta","aleta","alfiler","alga","algodón","aliado","aliento","alivio","alma","almeja","almíbar","altar","alteza","altivo","alto","altura","alumno","alzar","amable","amante","amapola","amargo","amasar","ámbar","ámbito","ameno","amigo","amistad","amor","amparo","amplio","ancho","anciano","ancla","andar","andén","anemia","ángulo","anillo","ánimo","anís","anotar","antena","antiguo","antojo","anual","anular","anuncio","añadir","añejo","año","apagar","aparato","apetito","apio","aplicar","apodo","aporte","apoyo","aprender","aprobar","apuesta","apuro","arado","araña","arar","árbitro","árbol","arbusto","archivo","arco","arder","ardilla","arduo","área","árido","aries","armonía","arnés","aroma","arpa","arpón","arreglo","arroz","arruga","arte","artista","asa","asado","asalto","ascenso","asegurar","aseo","asesor","asiento","asilo","asistir","asno","asombro","áspero","astilla","astro","astuto","asumir","asunto","atajo","ataque","atar","atento","ateo","ático","atleta","átomo","atraer","atroz","atún","audaz","audio","auge","aula","aumento","ausente","autor","aval","avance","avaro","ave","avellana","avena","avestruz","avión","aviso","ayer","ayuda","ayuno","azafrán","azar","azote","azúcar","azufre","azul","baba","babor","bache","bahía","baile","bajar","balanza","balcón","balde","bambú","banco","banda","baño","barba","barco","barniz","barro","báscula","bastón","basura","batalla","batería","batir","batuta","baúl","bazar","bebé","bebida","bello","besar","beso","bestia","bicho","bien","bingo","blanco","bloque","blusa","boa","bobina","bobo","boca","bocina","boda","bodega","boina","bola","bolero","bolsa","bomba","bondad","bonito","bono","bonsái","borde","borrar","bosque","bote","botín","bóveda","bozal","bravo","brazo","brecha","breve","brillo","brinco","brisa","broca","broma","bronce","brote","bruja","brusco","bruto","buceo","bucle","bueno","buey","bufanda","bufón","búho","buitre","bulto","burbuja","burla","burro","buscar","butaca","buzón","caballo","cabeza","cabina","cabra","cacao","cadáver","cadena","caer","café","caída","caimán","caja","cajón","cal","calamar","calcio","caldo","calidad","calle","calma","calor","calvo","cama","cambio","camello","camino","campo","cáncer","candil","canela","canguro","canica","canto","caña","cañón","caoba","caos","capaz","capitán","capote","captar","capucha","cara","carbón","cárcel","careta","carga","cariño","carne","carpeta","carro","carta","casa","casco","casero","caspa","castor","catorce","catre","caudal","causa","cazo","cebolla","ceder","cedro","celda","célebre","celoso","célula","cemento","ceniza","centro","cerca","cerdo","cereza","cero","cerrar","certeza","césped","cetro","chacal","chaleco","champú","chancla","chapa","charla","chico","chiste","chivo","choque","choza","chuleta","chupar","ciclón","ciego","cielo","cien","cierto","cifra","cigarro","cima","cinco","cine","cinta","ciprés","circo","ciruela","cisne","cita","ciudad","clamor","clan","claro","clase","clave","cliente","clima","clínica","cobre","cocción","cochino","cocina","coco","código","codo","cofre","coger","cohete","cojín","cojo","cola","colcha","colegio","colgar","colina","collar","colmo","columna","combate","comer","comida","cómodo","compra","conde","conejo","conga","conocer","consejo","contar","copa","copia","corazón","corbata","corcho","cordón","corona","correr","coser","cosmos","costa","cráneo","cráter","crear","crecer","creído","crema","cría","crimen","cripta","crisis","cromo","crónica","croqueta","crudo","cruz","cuadro","cuarto","cuatro","cubo","cubrir","cuchara","cuello","cuento","cuerda","cuesta","cueva","cuidar","culebra","culpa","culto","cumbre","cumplir","cuna","cuneta","cuota","cupón","cúpula","curar","curioso","curso","curva","cutis","dama","danza","dar","dardo","dátil","deber","débil","década","decir","dedo","defensa","definir","dejar","delfín","delgado","delito","demora","denso","dental","deporte","derecho","derrota","desayuno","deseo","desfile","desnudo","destino","desvío","detalle","detener","deuda","día","diablo","diadema","diamante","diana","diario","dibujo","dictar","diente","dieta","diez","difícil","digno","dilema","diluir","dinero","directo","dirigir","disco","diseño","disfraz","diva","divino","doble","doce","dolor","domingo","don","donar","dorado","dormir","dorso","dos","dosis","dragón","droga","ducha","duda","duelo","dueño","dulce","dúo","duque","durar","dureza","duro","ébano","ebrio","echar","eco","ecuador","edad","edición","edificio","editor","educar","efecto","eficaz","eje","ejemplo","elefante","elegir","elemento","elevar","elipse","élite","elixir","elogio","eludir","embudo","emitir","emoción","empate","empeño","empleo","empresa","enano","encargo","enchufe","encía","enemigo","enero","enfado","enfermo","engaño","enigma","enlace","enorme","enredo","ensayo","enseñar","entero","entrar","envase","envío","época","equipo","erizo","escala","escena","escolar","escribir","escudo","esencia","esfera","esfuerzo","espada","espejo","espía","esposa","espuma","esquí","estar","este","estilo","estufa","etapa","eterno","ética","etnia","evadir","evaluar","evento","evitar","exacto","examen","exceso","excusa","exento","exigir","exilio","existir","éxito","experto","explicar","exponer","extremo","fábrica","fábula","fachada","fácil","factor","faena","faja","falda","fallo","falso","faltar","fama","familia","famoso","faraón","farmacia","farol","farsa","fase","fatiga","fauna","favor","fax","febrero","fecha","feliz","feo","feria","feroz","fértil","fervor","festín","fiable","fianza","fiar","fibra","ficción","ficha","fideo","fiebre","fiel","fiera","fiesta","figura","fijar","fijo","fila","filete","filial","filtro","fin","finca","fingir","finito","firma","flaco","flauta","flecha","flor","flota","fluir","flujo","flúor","fobia","foca","fogata","fogón","folio","folleto","fondo","forma","forro","fortuna","forzar","fosa","foto","fracaso","frágil","franja","frase","fraude","freír","freno","fresa","frío","frito","fruta","fuego","fuente","fuerza","fuga","fumar","función","funda","furgón","furia","fusil","fútbol","futuro","gacela","gafas","gaita","gajo","gala","galería","gallo","gamba","ganar","gancho","ganga","ganso","garaje","garza","gasolina","gastar","gato","gavilán","gemelo","gemir","gen","género","genio","gente","geranio","gerente","germen","gesto","gigante","gimnasio","girar","giro","glaciar","globo","gloria","gol","golfo","goloso","golpe","goma","gordo","gorila","gorra","gota","goteo","gozar","grada","gráfico","grano","grasa","gratis","grave","grieta","grillo","gripe","gris","grito","grosor","grúa","grueso","grumo","grupo","guante","guapo","guardia","guerra","guía","guiño","guion","guiso","guitarra","gusano","gustar","haber","hábil","hablar","hacer","hacha","hada","hallar","hamaca","harina","haz","hazaña","hebilla","hebra","hecho","helado","helio","hembra","herir","hermano","héroe","hervir","hielo","hierro","hígado","higiene","hijo","himno","historia","hocico","hogar","hoguera","hoja","hombre","hongo","honor","honra","hora","hormiga","horno","hostil","hoyo","hueco","huelga","huerta","hueso","huevo","huida","huir","humano","húmedo","humilde","humo","hundir","huracán","hurto","icono","ideal","idioma","ídolo","iglesia","iglú","igual","ilegal","ilusión","imagen","imán","imitar","impar","imperio","imponer","impulso","incapaz","índice","inerte","infiel","informe","ingenio","inicio","inmenso","inmune","innato","insecto","instante","interés","íntimo","intuir","inútil","invierno","ira","iris","ironía","isla","islote","jabalí","jabón","jamón","jarabe","jardín","jarra","jaula","jazmín","jefe","jeringa","jinete","jornada","joroba","joven","joya","juerga","jueves","juez","jugador","jugo","juguete","juicio","junco","jungla","junio","juntar","júpiter","jurar","justo","juvenil","juzgar","kilo","koala","labio","lacio","lacra","lado","ladrón","lagarto","lágrima","laguna","laico","lamer","lámina","lámpara","lana","lancha","langosta","lanza","lápiz","largo","larva","lástima","lata","látex","latir","laurel","lavar","lazo","leal","lección","leche","lector","leer","legión","legumbre","lejano","lengua","lento","leña","león","leopardo","lesión","letal","letra","leve","leyenda","libertad","libro","licor","líder","lidiar","lienzo","liga","ligero","lima","límite","limón","limpio","lince","lindo","línea","lingote","lino","linterna","líquido","liso","lista","litera","litio","litro","llaga","llama","llanto","llave","llegar","llenar","llevar","llorar","llover","lluvia","lobo","loción","loco","locura","lógica","logro","lombriz","lomo","lonja","lote","lucha","lucir","lugar","lujo","luna","lunes","lupa","lustro","luto","luz","maceta","macho","madera","madre","maduro","maestro","mafia","magia","mago","maíz","maldad","maleta","malla","malo","mamá","mambo","mamut","manco","mando","manejar","manga","maniquí","manjar","mano","manso","manta","mañana","mapa","máquina","mar","marco","marea","marfil","margen","marido","mármol","marrón","martes","marzo","masa","máscara","masivo","matar","materia","matiz","matriz","máximo","mayor","mazorca","mecha","medalla","medio","médula","mejilla","mejor","melena","melón","memoria","menor","mensaje","mente","menú","mercado","merengue","mérito","mes","mesón","meta","meter","método","metro","mezcla","miedo","miel","miembro","miga","mil","milagro","militar","millón","mimo","mina","minero","mínimo","minuto","miope","mirar","misa","miseria","misil","mismo","mitad","mito","mochila","moción","moda","modelo","moho","mojar","molde","moler","molino","momento","momia","monarca","moneda","monja","monto","moño","morada","morder","moreno","morir","morro","morsa","mortal","mosca","mostrar","motivo","mover","móvil","mozo","mucho","mudar","mueble","muela","muerte","muestra","mugre","mujer","mula","muleta","multa","mundo","muñeca","mural","muro","músculo","museo","musgo","música","muslo","nácar","nación","nadar","naipe","naranja","nariz","narrar","nasal","natal","nativo","natural","náusea","naval","nave","navidad","necio","néctar","negar","negocio","negro","neón","nervio","neto","neutro","nevar","nevera","nicho","nido","niebla","nieto","niñez","niño","nítido","nivel","nobleza","noche","nómina","noria","norma","norte","nota","noticia","novato","novela","novio","nube","nuca","núcleo","nudillo","nudo","nuera","nueve","nuez","nulo","número","nutria","oasis","obeso","obispo","objeto","obra","obrero","observar","obtener","obvio","oca","ocaso","océano","ochenta","ocho","ocio","ocre","octavo","octubre","oculto","ocupar","ocurrir","odiar","odio","odisea","oeste","ofensa","oferta","oficio","ofrecer","ogro","oído","oír","ojo","ola","oleada","olfato","olivo","olla","olmo","olor","olvido","ombligo","onda","onza","opaco","opción","ópera","opinar","oponer","optar","óptica","opuesto","oración","orador","oral","órbita","orca","orden","oreja","órgano","orgía","orgullo","oriente","origen","orilla","oro","orquesta","oruga","osadía","oscuro","osezno","oso","ostra","otoño","otro","oveja","óvulo","óxido","oxígeno","oyente","ozono","pacto","padre","paella","página","pago","país","pájaro","palabra","palco","paleta","pálido","palma","paloma","palpar","pan","panal","pánico","pantera","pañuelo","papá","papel","papilla","paquete","parar","parcela","pared","parir","paro","párpado","parque","párrafo","parte","pasar","paseo","pasión","paso","pasta","pata","patio","patria","pausa","pauta","pavo","payaso","peatón","pecado","pecera","pecho","pedal","pedir","pegar","peine","pelar","peldaño","pelea","peligro","pellejo","pelo","peluca","pena","pensar","peñón","peón","peor","pepino","pequeño","pera","percha","perder","pereza","perfil","perico","perla","permiso","perro","persona","pesa","pesca","pésimo","pestaña","pétalo","petróleo","pez","pezuña","picar","pichón","pie","piedra","pierna","pieza","pijama","pilar","piloto","pimienta","pino","pintor","pinza","piña","piojo","pipa","pirata","pisar","piscina","piso","pista","pitón","pizca","placa","plan","plata","playa","plaza","pleito","pleno","plomo","pluma","plural","pobre","poco","poder","podio","poema","poesía","poeta","polen","policía","pollo","polvo","pomada","pomelo","pomo","pompa","poner","porción","portal","posada","poseer","posible","poste","potencia","potro","pozo","prado","precoz","pregunta","premio","prensa","preso","previo","primo","príncipe","prisión","privar","proa","probar","proceso","producto","proeza","profesor","programa","prole","promesa","pronto","propio","próximo","prueba","público","puchero","pudor","pueblo","puerta","puesto","pulga","pulir","pulmón","pulpo","pulso","puma","punto","puñal","puño","pupa","pupila","puré","quedar","queja","quemar","querer","queso","quieto","química","quince","quitar","rábano","rabia","rabo","ración","radical","raíz","rama","rampa","rancho","rango","rapaz","rápido","rapto","rasgo","raspa","rato","rayo","raza","razón","reacción","realidad","rebaño","rebote","recaer","receta","rechazo","recoger","recreo","recto","recurso","red","redondo","reducir","reflejo","reforma","refrán","refugio","regalo","regir","regla","regreso","rehén","reino","reír","reja","relato","relevo","relieve","relleno","reloj","remar","remedio","remo","rencor","rendir","renta","reparto","repetir","reposo","reptil","res","rescate","resina","respeto","resto","resumen","retiro","retorno","retrato","reunir","revés","revista","rey","rezar","rico","riego","rienda","riesgo","rifa","rígido","rigor","rincón","riñón","río","riqueza","risa","ritmo","rito","rizo","roble","roce","rociar","rodar","rodeo","rodilla","roer","rojizo","rojo","romero","romper","ron","ronco","ronda","ropa","ropero","rosa","rosca","rostro","rotar","rubí","rubor","rudo","rueda","rugir","ruido","ruina","ruleta","rulo","rumbo","rumor","ruptura","ruta","rutina","sábado","saber","sabio","sable","sacar","sagaz","sagrado","sala","saldo","salero","salir","salmón","salón","salsa","salto","salud","salvar","samba","sanción","sandía","sanear","sangre","sanidad","sano","santo","sapo","saque","sardina","sartén","sastre","satán","sauna","saxofón","sección","seco","secreto","secta","sed","seguir","seis","sello","selva","semana","semilla","senda","sensor","señal","señor","separar","sepia","sequía","ser","serie","sermón","servir","sesenta","sesión","seta","setenta","severo","sexo","sexto","sidra","siesta","siete","siglo","signo","sílaba","silbar","silencio","silla","símbolo","simio","sirena","sistema","sitio","situar","sobre","socio","sodio","sol","solapa","soldado","soledad","sólido","soltar","solución","sombra","sondeo","sonido","sonoro","sonrisa","sopa","soplar","soporte","sordo","sorpresa","sorteo","sostén","sótano","suave","subir","suceso","sudor","suegra","suelo","sueño","suerte","sufrir","sujeto","sultán","sumar","superar","suplir","suponer","supremo","sur","surco","sureño","surgir","susto","sutil","tabaco","tabique","tabla","tabú","taco","tacto","tajo","talar","talco","talento","talla","talón","tamaño","tambor","tango","tanque","tapa","tapete","tapia","tapón","taquilla","tarde","tarea","tarifa","tarjeta","tarot","tarro","tarta","tatuaje","tauro","taza","tazón","teatro","techo","tecla","técnica","tejado","tejer","tejido","tela","teléfono","tema","temor","templo","tenaz","tender","tener","tenis","tenso","teoría","terapia","terco","término","ternura","terror","tesis","tesoro","testigo","tetera","texto","tez","tibio","tiburón","tiempo","tienda","tierra","tieso","tigre","tijera","tilde","timbre","tímido","timo","tinta","tío","típico","tipo","tira","tirón","titán","títere","título","tiza","toalla","tobillo","tocar","tocino","todo","toga","toldo","tomar","tono","tonto","topar","tope","toque","tórax","torero","tormenta","torneo","toro","torpedo","torre","torso","tortuga","tos","tosco","toser","tóxico","trabajo","tractor","traer","tráfico","trago","traje","tramo","trance","trato","trauma","trazar","trébol","tregua","treinta","tren","trepar","tres","tribu","trigo","tripa","triste","triunfo","trofeo","trompa","tronco","tropa","trote","trozo","truco","trueno","trufa","tubería","tubo","tuerto","tumba","tumor","túnel","túnica","turbina","turismo","turno","tutor","ubicar","úlcera","umbral","unidad","unir","universo","uno","untar","uña","urbano","urbe","urgente","urna","usar","usuario","útil","utopía","uva","vaca","vacío","vacuna","vagar","vago","vaina","vajilla","vale","válido","valle","valor","válvula","vampiro","vara","variar","varón","vaso","vecino","vector","vehículo","veinte","vejez","vela","velero","veloz","vena","vencer","venda","veneno","vengar","venir","venta","venus","ver","verano","verbo","verde","vereda","verja","verso","verter","vía","viaje","vibrar","vicio","víctima","vida","vídeo","vidrio","viejo","viernes","vigor","vil","villa","vinagre","vino","viñedo","violín","viral","virgo","virtud","visor","víspera","vista","vitamina","viudo","vivaz","vivero","vivir","vivo","volcán","volumen","volver","voraz","votar","voto","voz","vuelo","vulgar","yacer","yate","yegua","yema","yerno","yeso","yodo","yoga","yogur","zafiro","zanja","zapato","zarza","zona","zorro","zumo","zurdo"]')}},r={};function t(a){var o=r[a];if(void 0!==o)return o.exports;var i=r[a]={exports:{}};return e[a](i,i.exports,t),i.exports}return(()=>{"use strict";var e=t(287),r=t(749);function a(e){if(!Number.isSafeInteger(e)||e<0)throw new Error(`Wrong positive integer: ${e}`)}function o(e,...r){if(!(e instanceof Uint8Array))throw new Error("Expected Uint8Array");if(r.length>0&&!r.includes(e.length))throw new Error(`Expected Uint8Array of length ${r}, not of length=${e.length}`)}function i(e,r=!0){if(e.destroyed)throw new Error("Hash instance has been destroyed");if(r&&e.finished)throw new Error("Hash#digest() has already been called")}const n=e=>e instanceof Uint8Array,s=e=>new DataView(e.buffer,e.byteOffset,e.byteLength),l=(e,r)=>e<<32-r|e>>>r;if(68!==new Uint8Array(new Uint32Array([287454020]).buffer)[0])throw new Error("Non little-endian hardware is not supported");function c(e){if("string"==typeof e&&(e=function(e){if("string"!=typeof e)throw new Error("utf8ToBytes expected string, got "+typeof e);return new Uint8Array((new TextEncoder).encode(e))}(e)),!n(e))throw new Error("expected Uint8Array, got "+typeof e);return e}class u{clone(){return this._cloneInto()}}function d(e){const r=r=>e().update(c(r)).digest(),t=e();return r.outputLen=t.outputLen,r.blockLen=t.blockLen,r.create=()=>e(),r}class f extends u{constructor(e,r){super(),this.finished=!1,this.destroyed=!1,function(e){if("function"!=typeof e||"function"!=typeof e.create)throw new Error("Hash should be wrapped by utils.wrapConstructor");a(e.outputLen),a(e.blockLen)}(e);const t=c(r);if(this.iHash=e.create(),"function"!=typeof this.iHash.update)throw new Error("Expected instance of class which extends utils.Hash");this.blockLen=this.iHash.blockLen,this.outputLen=this.iHash.outputLen;const o=this.blockLen,i=new Uint8Array(o);i.set(t.length>o?e.create().update(t).digest():t);for(let e=0;e<i.length;e++)i[e]^=54;this.iHash.update(i),this.oHash=e.create();for(let e=0;e<i.length;e++)i[e]^=106;this.oHash.update(i),i.fill(0)}update(e){return i(this),this.iHash.update(e),this}digestInto(e){i(this),o(e,this.outputLen),this.finished=!0,this.iHash.digestInto(e),this.oHash.update(e),this.oHash.digestInto(e),this.destroy()}digest(){const e=new Uint8Array(this.oHash.outputLen);return this.digestInto(e),e}_cloneInto(e){e||(e=Object.create(Object.getPrototypeOf(this),{}));const{oHash:r,iHash:t,finished:a,destroyed:o,blockLen:i,outputLen:n}=this;return e.finished=a,e.destroyed=o,e.blockLen=i,e.outputLen=n,e.oHash=r._cloneInto(e.oHash),e.iHash=t._cloneInto(e.iHash),e}destroy(){this.destroyed=!0,this.oHash.destroy(),this.iHash.destroy()}}const p=(e,r,t)=>new f(e,r).update(t).digest();p.create=(e,r)=>new f(e,r);class h extends u{constructor(e,r,t,a){super(),this.blockLen=e,this.outputLen=r,this.padOffset=t,this.isLE=a,this.finished=!1,this.length=0,this.pos=0,this.destroyed=!1,this.buffer=new Uint8Array(e),this.view=s(this.buffer)}update(e){i(this);const{view:r,buffer:t,blockLen:a}=this,o=(e=c(e)).length;for(let i=0;i<o;){const n=Math.min(a-this.pos,o-i);if(n!==a)t.set(e.subarray(i,i+n),this.pos),this.pos+=n,i+=n,this.pos===a&&(this.process(r,0),this.pos=0);else{const r=s(e);for(;a<=o-i;i+=a)this.process(r,i)}}return this.length+=e.length,this.roundClean(),this}digestInto(e){i(this),function(e,r){o(e);const t=r.outputLen;if(e.length<t)throw new Error(`digestInto() expects output buffer of length at least ${t}`)}(e,this),this.finished=!0;const{buffer:r,view:t,blockLen:a,isLE:n}=this;let{pos:l}=this;r[l++]=128,this.buffer.subarray(l).fill(0),this.padOffset>a-l&&(this.process(t,0),l=0);for(let e=l;e<a;e++)r[e]=0;!function(e,r,t,a){if("function"==typeof e.setBigUint64)return e.setBigUint64(r,t,a);const o=BigInt(32),i=BigInt(4294967295),n=Number(t>>o&i),s=Number(t&i),l=a?4:0,c=a?0:4;e.setUint32(r+l,n,a),e.setUint32(r+c,s,a)}(t,a-8,BigInt(8*this.length),n),this.process(t,0);const c=s(e),u=this.outputLen;if(u%4)throw new Error("_sha2: outputLen should be aligned to 32bit");const d=u/4,f=this.get();if(d>f.length)throw new Error("_sha2: outputLen bigger than state");for(let e=0;e<d;e++)c.setUint32(4*e,f[e],n)}digest(){const{buffer:e,outputLen:r}=this;this.digestInto(e);const t=e.slice(0,r);return this.destroy(),t}_cloneInto(e){e||(e=new this.constructor),e.set(...this.get());const{blockLen:r,buffer:t,length:a,finished:o,destroyed:i,pos:n}=this;return e.length=a,e.pos=n,e.finished=o,e.destroyed=i,a%r&&e.buffer.set(t),e}}const m=new Uint8Array([7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8]),b=Uint8Array.from({length:16},((e,r)=>r));let g=[b],v=[b.map((e=>(9*e+5)%16))];for(let e=0;e<4;e++)for(let r of[g,v])r.push(r[e].map((e=>m[e])));const y=[[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8],[12,13,11,15,6,9,9,7,12,15,11,13,7,8,7,7],[13,15,14,11,7,7,6,8,13,14,13,12,5,5,6,9],[14,11,12,14,8,6,5,5,15,12,15,14,9,9,8,6],[15,12,13,13,9,5,8,6,14,11,12,11,8,6,5,5]].map((e=>new Uint8Array(e))),w=g.map(((e,r)=>e.map((e=>y[r][e])))),k=v.map(((e,r)=>e.map((e=>y[r][e])))),x=new Uint32Array([0,1518500249,1859775393,2400959708,2840853838]),z=new Uint32Array([1352829926,1548603684,1836072691,2053994217,0]),E=(e,r)=>e<<r|e>>>32-r;function B(e,r,t,a){return 0===e?r^t^a:1===e?r&t|~r&a:2===e?(r|~t)^a:3===e?r&a|t&~a:r^(t|~a)}const j=new Uint32Array(16);class A extends h{constructor(){super(64,20,8,!0),this.h0=1732584193,this.h1=-271733879,this.h2=-1732584194,this.h3=271733878,this.h4=-1009589776}get(){const{h0:e,h1:r,h2:t,h3:a,h4:o}=this;return[e,r,t,a,o]}set(e,r,t,a,o){this.h0=0|e,this.h1=0|r,this.h2=0|t,this.h3=0|a,this.h4=0|o}process(e,r){for(let t=0;t<16;t++,r+=4)j[t]=e.getUint32(r,!0);let t=0|this.h0,a=t,o=0|this.h1,i=o,n=0|this.h2,s=n,l=0|this.h3,c=l,u=0|this.h4,d=u;for(let e=0;e<5;e++){const r=4-e,f=x[e],p=z[e],h=g[e],m=v[e],b=w[e],y=k[e];for(let r=0;r<16;r++){const a=E(t+B(e,o,n,l)+j[h[r]]+f,b[r])+u|0;t=u,u=l,l=0|E(n,10),n=o,o=a}for(let e=0;e<16;e++){const t=E(a+B(r,i,s,c)+j[m[e]]+p,y[e])+d|0;a=d,d=c,c=0|E(s,10),s=i,i=t}}this.set(this.h1+n+c|0,this.h2+l+d|0,this.h3+u+a|0,this.h4+t+i|0,this.h0+o+s|0)}roundClean(){j.fill(0)}destroy(){this.destroyed=!0,this.buffer.fill(0),this.set(0,0,0,0,0)}}const L=d((()=>new A)),S=(e,r,t)=>e&r^e&t^r&t,I=new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]),q=new Uint32Array([1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225]),U=new Uint32Array(64);class H extends h{constructor(){super(64,32,8,!1),this.A=0|q[0],this.B=0|q[1],this.C=0|q[2],this.D=0|q[3],this.E=0|q[4],this.F=0|q[5],this.G=0|q[6],this.H=0|q[7]}get(){const{A:e,B:r,C:t,D:a,E:o,F:i,G:n,H:s}=this;return[e,r,t,a,o,i,n,s]}set(e,r,t,a,o,i,n,s){this.A=0|e,this.B=0|r,this.C=0|t,this.D=0|a,this.E=0|o,this.F=0|i,this.G=0|n,this.H=0|s}process(e,r){for(let t=0;t<16;t++,r+=4)U[t]=e.getUint32(r,!1);for(let e=16;e<64;e++){const r=U[e-15],t=U[e-2],a=l(r,7)^l(r,18)^r>>>3,o=l(t,17)^l(t,19)^t>>>10;U[e]=o+U[e-7]+a+U[e-16]|0}let{A:t,B:a,C:o,D:i,E:n,F:s,G:c,H:u}=this;for(let e=0;e<64;e++){const r=u+(l(n,6)^l(n,11)^l(n,25))+((d=n)&s^~d&c)+I[e]+U[e]|0,f=(l(t,2)^l(t,13)^l(t,22))+S(t,a,o)|0;u=c,c=s,s=n,n=i+r|0,i=o,o=a,a=t,t=r+f|0}var d;t=t+this.A|0,a=a+this.B|0,o=o+this.C|0,i=i+this.D|0,n=n+this.E|0,s=s+this.F|0,c=c+this.G|0,u=u+this.H|0,this.set(t,a,o,i,n,s,c,u)}roundClean(){U.fill(0)}destroy(){this.set(0,0,0,0,0,0,0,0),this.buffer.fill(0)}}const O=d((()=>new H)),T=BigInt(2**32-1),_=BigInt(32);function R(e,r=!1){return r?{h:Number(e&T),l:Number(e>>_&T)}:{h:0|Number(e>>_&T),l:0|Number(e&T)}}const C={fromBig:R,split:function(e,r=!1){let t=new Uint32Array(e.length),a=new Uint32Array(e.length);for(let o=0;o<e.length;o++){const{h:i,l:n}=R(e[o],r);[t[o],a[o]]=[i,n]}return[t,a]},toBig:(e,r)=>BigInt(e>>>0)<<_|BigInt(r>>>0),shrSH:(e,r,t)=>e>>>t,shrSL:(e,r,t)=>e<<32-t|r>>>t,rotrSH:(e,r,t)=>e>>>t|r<<32-t,rotrSL:(e,r,t)=>e<<32-t|r>>>t,rotrBH:(e,r,t)=>e<<64-t|r>>>t-32,rotrBL:(e,r,t)=>e>>>t-32|r<<64-t,rotr32H:(e,r)=>r,rotr32L:(e,r)=>e,rotlSH:(e,r,t)=>e<<t|r>>>32-t,rotlSL:(e,r,t)=>r<<t|e>>>32-t,rotlBH:(e,r,t)=>r<<t-32|e>>>64-t,rotlBL:(e,r,t)=>e<<t-32|r>>>64-t,add:function(e,r,t,a){const o=(r>>>0)+(a>>>0);return{h:e+t+(o/2**32|0)|0,l:0|o}},add3L:(e,r,t)=>(e>>>0)+(r>>>0)+(t>>>0),add3H:(e,r,t,a)=>r+t+a+(e/2**32|0)|0,add4L:(e,r,t,a)=>(e>>>0)+(r>>>0)+(t>>>0)+(a>>>0),add4H:(e,r,t,a,o)=>r+t+a+o+(e/2**32|0)|0,add5H:(e,r,t,a,o,i)=>r+t+a+o+i+(e/2**32|0)|0,add5L:(e,r,t,a,o)=>(e>>>0)+(r>>>0)+(t>>>0)+(a>>>0)+(o>>>0)},N=C,[P,F]=(()=>N.split(["0x428a2f98d728ae22","0x7137449123ef65cd","0xb5c0fbcfec4d3b2f","0xe9b5dba58189dbbc","0x3956c25bf348b538","0x59f111f1b605d019","0x923f82a4af194f9b","0xab1c5ed5da6d8118","0xd807aa98a3030242","0x12835b0145706fbe","0x243185be4ee4b28c","0x550c7dc3d5ffb4e2","0x72be5d74f27b896f","0x80deb1fe3b1696b1","0x9bdc06a725c71235","0xc19bf174cf692694","0xe49b69c19ef14ad2","0xefbe4786384f25e3","0x0fc19dc68b8cd5b5","0x240ca1cc77ac9c65","0x2de92c6f592b0275","0x4a7484aa6ea6e483","0x5cb0a9dcbd41fbd4","0x76f988da831153b5","0x983e5152ee66dfab","0xa831c66d2db43210","0xb00327c898fb213f","0xbf597fc7beef0ee4","0xc6e00bf33da88fc2","0xd5a79147930aa725","0x06ca6351e003826f","0x142929670a0e6e70","0x27b70a8546d22ffc","0x2e1b21385c26c926","0x4d2c6dfc5ac42aed","0x53380d139d95b3df","0x650a73548baf63de","0x766a0abb3c77b2a8","0x81c2c92e47edaee6","0x92722c851482353b","0xa2bfe8a14cf10364","0xa81a664bbc423001","0xc24b8b70d0f89791","0xc76c51a30654be30","0xd192e819d6ef5218","0xd69906245565a910","0xf40e35855771202a","0x106aa07032bbd1b8","0x19a4c116b8d2d0c8","0x1e376c085141ab53","0x2748774cdf8eeb99","0x34b0bcb5e19b48a8","0x391c0cb3c5c95a63","0x4ed8aa4ae3418acb","0x5b9cca4f7763e373","0x682e6ff3d6b2b8a3","0x748f82ee5defb2fc","0x78a5636f43172f60","0x84c87814a1f0ab72","0x8cc702081a6439ec","0x90befffa23631e28","0xa4506cebde82bde9","0xbef9a3f7b2c67915","0xc67178f2e372532b","0xca273eceea26619c","0xd186b8c721c0c207","0xeada7dd6cde0eb1e","0xf57d4f7fee6ed178","0x06f067aa72176fba","0x0a637dc5a2c898a6","0x113f9804bef90dae","0x1b710b35131c471b","0x28db77f523047d84","0x32caab7b40c72493","0x3c9ebe0a15c9bebc","0x431d67c49c100d4c","0x4cc5d4becb3e42b6","0x597f299cfc657e2a","0x5fcb6fab3ad6faec","0x6c44198c4a475817"].map((e=>BigInt(e)))))(),D=new Uint32Array(80),M=new Uint32Array(80);class K extends h{constructor(){super(128,64,16,!1),this.Ah=1779033703,this.Al=-205731576,this.Bh=-1150833019,this.Bl=-2067093701,this.Ch=1013904242,this.Cl=-23791573,this.Dh=-1521486534,this.Dl=1595750129,this.Eh=1359893119,this.El=-1377402159,this.Fh=-1694144372,this.Fl=725511199,this.Gh=528734635,this.Gl=-79577749,this.Hh=1541459225,this.Hl=327033209}get(){const{Ah:e,Al:r,Bh:t,Bl:a,Ch:o,Cl:i,Dh:n,Dl:s,Eh:l,El:c,Fh:u,Fl:d,Gh:f,Gl:p,Hh:h,Hl:m}=this;return[e,r,t,a,o,i,n,s,l,c,u,d,f,p,h,m]}set(e,r,t,a,o,i,n,s,l,c,u,d,f,p,h,m){this.Ah=0|e,this.Al=0|r,this.Bh=0|t,this.Bl=0|a,this.Ch=0|o,this.Cl=0|i,this.Dh=0|n,this.Dl=0|s,this.Eh=0|l,this.El=0|c,this.Fh=0|u,this.Fl=0|d,this.Gh=0|f,this.Gl=0|p,this.Hh=0|h,this.Hl=0|m}process(e,r){for(let t=0;t<16;t++,r+=4)D[t]=e.getUint32(r),M[t]=e.getUint32(r+=4);for(let e=16;e<80;e++){const r=0|D[e-15],t=0|M[e-15],a=N.rotrSH(r,t,1)^N.rotrSH(r,t,8)^N.shrSH(r,t,7),o=N.rotrSL(r,t,1)^N.rotrSL(r,t,8)^N.shrSL(r,t,7),i=0|D[e-2],n=0|M[e-2],s=N.rotrSH(i,n,19)^N.rotrBH(i,n,61)^N.shrSH(i,n,6),l=N.rotrSL(i,n,19)^N.rotrBL(i,n,61)^N.shrSL(i,n,6),c=N.add4L(o,l,M[e-7],M[e-16]),u=N.add4H(c,a,s,D[e-7],D[e-16]);D[e]=0|u,M[e]=0|c}let{Ah:t,Al:a,Bh:o,Bl:i,Ch:n,Cl:s,Dh:l,Dl:c,Eh:u,El:d,Fh:f,Fl:p,Gh:h,Gl:m,Hh:b,Hl:g}=this;for(let e=0;e<80;e++){const r=N.rotrSH(u,d,14)^N.rotrSH(u,d,18)^N.rotrBH(u,d,41),v=N.rotrSL(u,d,14)^N.rotrSL(u,d,18)^N.rotrBL(u,d,41),y=u&f^~u&h,w=d&p^~d&m,k=N.add5L(g,v,w,F[e],M[e]),x=N.add5H(k,b,r,y,P[e],D[e]),z=0|k,E=N.rotrSH(t,a,28)^N.rotrBH(t,a,34)^N.rotrBH(t,a,39),B=N.rotrSL(t,a,28)^N.rotrBL(t,a,34)^N.rotrBL(t,a,39),j=t&o^t&n^o&n,A=a&i^a&s^i&s;b=0|h,g=0|m,h=0|f,m=0|p,f=0|u,p=0|d,({h:u,l:d}=N.add(0|l,0|c,0|x,0|z)),l=0|n,c=0|s,n=0|o,s=0|i,o=0|t,i=0|a;const L=N.add3L(z,B,A);t=N.add3H(L,x,E,j),a=0|L}({h:t,l:a}=N.add(0|this.Ah,0|this.Al,0|t,0|a)),({h:o,l:i}=N.add(0|this.Bh,0|this.Bl,0|o,0|i)),({h:n,l:s}=N.add(0|this.Ch,0|this.Cl,0|n,0|s)),({h:l,l:c}=N.add(0|this.Dh,0|this.Dl,0|l,0|c)),({h:u,l:d}=N.add(0|this.Eh,0|this.El,0|u,0|d)),({h:f,l:p}=N.add(0|this.Fh,0|this.Fl,0|f,0|p)),({h,l:m}=N.add(0|this.Gh,0|this.Gl,0|h,0|m)),({h:b,l:g}=N.add(0|this.Hh,0|this.Hl,0|b,0|g)),this.set(t,a,o,i,n,s,l,c,u,d,f,p,h,m,b,g)}roundClean(){D.fill(0),M.fill(0)}destroy(){this.buffer.fill(0),this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)}}const V=d((()=>new K));function $(e,r){return p(V,e,r)}const G="0123456789abcdefABCDEF",Z=(G.split("").map((e=>e.codePointAt(0))),Array(256).fill(!0).map(((e,r)=>{const t=String.fromCodePoint(r),a=G.indexOf(t);return a<0?void 0:a<16?a:a-6}))),W=new TextEncoder;function Y(e,r){const t=Math.min(e.length,r.length);for(let a=0;a<t;++a)if(e[a]!==r[a])return e[a]<r[a]?-1:1;return e.length===r.length?0:e.length>r.length?1:-1}function J(e,r,t){if(r+1>e.length)throw new Error("Offset is outside the bounds of Uint8Array");if(t>255)throw new Error(`The value of "value" is out of range. It must be >= 0 and <= 255. Received ${t}`);e[r]=t}function X(e,r,t,a){if(r+4>e.length)throw new Error("Offset is outside the bounds of Uint8Array");if(a=a.toUpperCase(),t>4294967295)throw new Error(`The value of "value" is out of range. It must be >= 0 and <= 4294967295. Received ${t}`);"LE"===a?(e[r]=255&t,e[r+1]=t>>8&255,e[r+2]=t>>16&255,e[r+3]=t>>24&255):(e[r]=t>>24&255,e[r+1]=t>>16&255,e[r+2]=t>>8&255,e[r+3]=255&t)}function Q(e,r,t){if(r+4>e.length)throw new Error("Offset is outside the bounds of Uint8Array");if("LE"===(t=t.toUpperCase())){let t=0;return t=(t<<8)+e[r+3]>>>0,t=(t<<8)+e[r+2]>>>0,t=(t<<8)+e[r+1]>>>0,t=(t<<8)+e[r]>>>0,t}{let t=0;return t=(t<<8)+e[r]>>>0,t=(t<<8)+e[r+1]>>>0,t=(t<<8)+e[r+2]>>>0,t=(t<<8)+e[r+3]>>>0,t}}new TextDecoder;const ee=e=>function(e){const r=W.encode(e||""),t=new Uint8Array(Math.floor(r.length/2));let a;for(a=0;a<t.length;a++){const e=Z[r[2*a]],o=Z[r[2*a+1]];if(void 0===e||void 0===o)break;t[a]=e<<4|o}return a===t.length?t:t.slice(0,a)}(e);function re(e){if(!e)throw new Error("ecc library invalid")}function te(e){if(!Number.isSafeInteger(e))throw new Error(`Wrong integer: ${e}`)}function ae(e){return e instanceof Uint8Array||null!=e&&"object"==typeof e&&"Uint8Array"===e.constructor.name}function oe(...e){const r=e=>e,t=(e,r)=>t=>e(r(t));return{encode:e.map((e=>e.encode)).reduceRight(t,r),decode:e.map((e=>e.decode)).reduce(t,r)}}function ie(e){return{encode:r=>{if(!Array.isArray(r)||r.length&&"number"!=typeof r[0])throw new Error("alphabet.encode input should be an array of numbers");return r.map((r=>{if(te(r),r<0||r>=e.length)throw new Error(`Digit index outside alphabet: ${r} (alphabet: ${e.length})`);return e[r]}))},decode:r=>{if(!Array.isArray(r)||r.length&&"string"!=typeof r[0])throw new Error("alphabet.decode input should be array of strings");return r.map((r=>{if("string"!=typeof r)throw new Error(`alphabet.decode: not string element=${r}`);const t=e.indexOf(r);if(-1===t)throw new Error(`Unknown letter: "${r}". Allowed: ${e}`);return t}))}}}function ne(e=""){if("string"!=typeof e)throw new Error("join separator should be string");return{encode:r=>{if(!Array.isArray(r)||r.length&&"string"!=typeof r[0])throw new Error("join.encode input should be array of strings");for(let e of r)if("string"!=typeof e)throw new Error(`join.encode: non-string input=${e}`);return r.join(e)},decode:r=>{if("string"!=typeof r)throw new Error("join.decode input should be string");return r.split(e)}}}function se(e,r="="){if(te(e),"string"!=typeof r)throw new Error("padding chr should be string");return{encode(t){if(!Array.isArray(t)||t.length&&"string"!=typeof t[0])throw new Error("padding.encode input should be array of strings");for(let e of t)if("string"!=typeof e)throw new Error(`padding.encode: non-string input=${e}`);for(;t.length*e%8;)t.push(r);return t},decode(t){if(!Array.isArray(t)||t.length&&"string"!=typeof t[0])throw new Error("padding.encode input should be array of strings");for(let e of t)if("string"!=typeof e)throw new Error(`padding.decode: non-string input=${e}`);let a=t.length;if(a*e%8)throw new Error("Invalid padding: string should have whole number of bytes");for(;a>0&&t[a-1]===r;a--)if(!((a-1)*e%8))throw new Error("Invalid padding: string has too much padding");return t.slice(0,a)}}}function le(e){if("function"!=typeof e)throw new Error("normalize fn should be function");return{encode:e=>e,decode:r=>e(r)}}function ce(e,r,t){if(r<2)throw new Error(`convertRadix: wrong from=${r}, base cannot be less than 2`);if(t<2)throw new Error(`convertRadix: wrong to=${t}, base cannot be less than 2`);if(!Array.isArray(e))throw new Error("convertRadix: data should be array");if(!e.length)return[];let a=0;const o=[],i=Array.from(e);for(i.forEach((e=>{if(te(e),e<0||e>=r)throw new Error(`Wrong integer: ${e}`)}));;){let e=0,n=!0;for(let o=a;o<i.length;o++){const s=i[o],l=r*e+s;if(!Number.isSafeInteger(l)||r*e/r!==e||l-s!=r*e)throw new Error("convertRadix: carry overflow");e=l%t;const c=Math.floor(l/t);if(i[o]=c,!Number.isSafeInteger(c)||c*t+e!==l)throw new Error("convertRadix: carry overflow");n&&(c?n=!1:a=o)}if(o.push(e),n)break}for(let r=0;r<e.length-1&&0===e[r];r++)o.push(0);return o.reverse()}const ue=(e,r)=>r?ue(r,e%r):e,de=(e,r)=>e+(r-ue(e,r));function fe(e,r,t,a){if(!Array.isArray(e))throw new Error("convertRadix2: data should be array");if(r<=0||r>32)throw new Error(`convertRadix2: wrong from=${r}`);if(t<=0||t>32)throw new Error(`convertRadix2: wrong to=${t}`);if(de(r,t)>32)throw new Error(`convertRadix2: carry overflow from=${r} to=${t} carryBits=${de(r,t)}`);let o=0,i=0;const n=2**t-1,s=[];for(const a of e){if(te(a),a>=2**r)throw new Error(`convertRadix2: invalid data word=${a} from=${r}`);if(o=o<<r|a,i+r>32)throw new Error(`convertRadix2: carry overflow pos=${i} from=${r}`);for(i+=r;i>=t;i-=t)s.push((o>>i-t&n)>>>0);o&=2**i-1}if(o=o<<t-i&n,!a&&i>=r)throw new Error("Excess padding");if(!a&&o)throw new Error(`Non-zero padding: ${o}`);return a&&i>0&&s.push(o>>>0),s}function pe(e,r=!1){if(te(e),e<=0||e>32)throw new Error("radix2: bits should be in (0..32]");if(de(8,e)>32||de(e,8)>32)throw new Error("radix2: carry overflow");return{encode:t=>{if(!ae(t))throw new Error("radix2.encode input should be Uint8Array");return fe(Array.from(t),8,e,!r)},decode:t=>{if(!Array.isArray(t)||t.length&&"number"!=typeof t[0])throw new Error("radix2.decode input should be array of numbers");return Uint8Array.from(fe(t,e,8,r))}}}pe(4),ie("0123456789ABCDEF"),ne(""),pe(5),ie("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"),se(5),ne(""),pe(5),ie("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"),ne(""),pe(5),ie("0123456789ABCDEFGHIJKLMNOPQRSTUV"),se(5),ne(""),pe(5),ie("0123456789ABCDEFGHIJKLMNOPQRSTUV"),ne(""),pe(5),ie("0123456789ABCDEFGHJKMNPQRSTVWXYZ"),ne(""),le((e=>e.toUpperCase().replace(/O/g,"0").replace(/[IL]/g,"1"))),pe(6),ie("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"),se(6),ne(""),pe(6),ie("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"),ne(""),pe(6),ie("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"),se(6),ne("");const he=(pe(6),ie("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"),ne(""),e=>{return oe((te(r=58),{encode:e=>{if(!ae(e))throw new Error("radix.encode input should be Uint8Array");return ce(Array.from(e),256,r)},decode:e=>{if(!Array.isArray(e)||e.length&&"number"!=typeof e[0])throw new Error("radix.decode input should be array of numbers");return Uint8Array.from(ce(e,r,256))}}),ie(e),ne(""));var r}),me=he("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");ie("qpzry9x8gf2tvdw0s3jn54khce6mua7l"),ne("");var be,ge,ve,ye;function we(e){const r=typeof e;return"string"===r?`"${e}"`:"number"===r||"bigint"===r||"boolean"===r?`${e}`:"object"===r||"function"===r?(e&&Object.getPrototypeOf(e)?.constructor?.name)??"null":r}function ke(e,r,t,a,o){const i=o&&"input"in o?o.input:t.value,n=o?.expected??e.expects??null,s=o?.received??we(i),l={kind:e.kind,type:e.type,input:i,expected:n,received:s,message:`Invalid ${r}: ${n?`Expected ${n} but r`:"R"}eceived ${s}`,requirement:e.requirement,path:o?.path,issues:o?.issues,lang:a.lang,abortEarly:a.abortEarly,abortPipeEarly:a.abortPipeEarly},c="schema"===e.kind,u=o?.message??e.message??(d=e.reference,f=l.lang,ye?.get(d)?.get(f))??(c?function(e){return ve?.get(e)}(l.lang):null)??a.message??function(e){return ge?.get(e)}(l.lang);var d,f;u&&(l.message="function"==typeof u?u(l):u),c&&(t.typed=!1),t.issues?t.issues.push(l):t.issues=[l]}pe(4),ie("0123456789abcdef"),ne(""),le((e=>{if("string"!=typeof e||e.length%2)throw new TypeError(`hex.decode: expected string, got ${typeof e} with length ${e.length}`);return e.toLowerCase()}));var xe=class extends Error{issues;constructor(e){super(e[0].message),this.name="ValiError",this.issues=e}};function ze(e){return{kind:"validation",type:"integer",reference:ze,async:!1,expects:null,requirement:Number.isInteger,message:e,_run(e,r){return e.typed&&!this.requirement(e.value)&&ke(this,"integer",e,r),e}}}function Ee(e,r){return{kind:"validation",type:"length",reference:Ee,async:!1,expects:`${e}`,requirement:e,message:r,_run(e,r){return e.typed&&e.value.length!==this.requirement&&ke(this,"length",e,r,{received:`${e.value.length}`}),e}}}function Be(e,r){return{kind:"validation",type:"max_value",reference:Be,async:!1,expects:`<=${e instanceof Date?e.toJSON():we(e)}`,requirement:e,message:r,_run(e,r){return e.typed&&e.value>this.requirement&&ke(this,"value",e,r,{received:e.value instanceof Date?e.value.toJSON():we(e.value)}),e}}}function je(e,r){return{kind:"validation",type:"min_value",reference:je,async:!1,expects:`>=${e instanceof Date?e.toJSON():we(e)}`,requirement:e,message:r,_run(e,r){return e.typed&&e.value<this.requirement&&ke(this,"value",e,r,{received:e.value instanceof Date?e.value.toJSON():we(e.value)}),e}}}function Ae(e,r){return{kind:"schema",type:"instance",reference:Ae,expects:e.name,async:!1,class:e,message:r,_run(e,r){return e.value instanceof this.class?e.typed=!0:ke(this,"type",e,r),e}}}function Le(e){return{kind:"schema",type:"number",reference:Le,expects:"number",async:!1,message:e,_run(e,r){return"number"!=typeof e.value||isNaN(e.value)?ke(this,"type",e,r):e.typed=!0,e}}}function Se(e,r){return{kind:"schema",type:"object",reference:Se,expects:"Object",async:!1,entries:e,message:r,_run(e,r){const t=e.value;if(t&&"object"==typeof t){e.typed=!0,e.value={};for(const a in this.entries){const o=t[a],i=this.entries[a]._run({typed:!1,value:o},r);if(i.issues){const n={type:"object",origin:"value",input:t,key:a,value:o};for(const r of i.issues)r.path?r.path.unshift(n):r.path=[n],e.issues?.push(r);if(e.issues||(e.issues=i.issues),r.abortEarly){e.typed=!1;break}}i.typed||(e.typed=!1),(void 0!==i.value||a in t)&&(e.value[a]=i.value)}}else ke(this,"type",e,r);return e}}}function Ie(e,r,t){const a=e._run({typed:!1,value:r},function(e){return{lang:e?.lang??be?.lang,message:e?.message,abortEarly:e?.abortEarly??be?.abortEarly,abortPipeEarly:e?.abortPipeEarly??be?.abortPipeEarly}}(t));if(a.issues)throw new xe(a.issues);return a.value}function qe(...e){return{...e[0],pipe:e,_run(r,t){for(const a of e)if("metadata"!==a.kind){if(r.issues&&("schema"===a.kind||"transformation"===a.kind)){r.typed=!1;break}r.issues&&(t.abortEarly||t.abortPipeEarly)||(r=a._run(r,t))}return r}}}const Ue=qe(Le(),ze(),je(0),Be(4294967295)),He=qe(Le(),ze(),je(0),Be(2147483647)),Oe=qe(Le(),ze(),je(0),Be(255)),Te=qe(Ae(Uint8Array),Ee(32)),_e=qe(Ae(Uint8Array),Ee(33)),Re=Se({wif:Oe,bip32:Se({public:Ue,private:Ue})}),Ce=qe(function e(r){return{kind:"schema",type:"string",reference:e,expects:"string",async:!1,message:r,_run(e,r){return"string"==typeof e.value?e.typed=!0:ke(this,"type",e,r),e}}}(),function e(r,t){return{kind:"validation",type:"regex",reference:e,async:!1,expects:`${r}`,requirement:r,message:t,_run(e,r){return e.typed&&!this.requirement.test(e.value)&&ke(this,"format",e,r),e}}}(/^(m\/)?(\d+'?\/)*\d+'?$/)),Ne=function(e){if(e.length>=255)throw new TypeError("Alphabet too long");const r=new Uint8Array(256);for(let e=0;e<r.length;e++)r[e]=255;for(let t=0;t<e.length;t++){const a=e.charAt(t),o=a.charCodeAt(0);if(255!==r[o])throw new TypeError(a+" is ambiguous");r[o]=t}const t=e.length,a=e.charAt(0),o=Math.log(t)/Math.log(256),i=Math.log(256)/Math.log(t);function n(e){if("string"!=typeof e)throw new TypeError("Expected String");if(0===e.length)return new Uint8Array;let i=0,n=0,s=0;for(;e[i]===a;)n++,i++;const l=(e.length-i)*o+1>>>0,c=new Uint8Array(l);for(;e[i];){let a=r[e.charCodeAt(i)];if(255===a)return;let o=0;for(let e=l-1;(0!==a||o<s)&&-1!==e;e--,o++)a+=t*c[e]>>>0,c[e]=a%256>>>0,a=a/256>>>0;if(0!==a)throw new Error("Non-zero carry");s=o,i++}let u=l-s;for(;u!==l&&0===c[u];)u++;const d=new Uint8Array(n+(l-u));let f=n;for(;u!==l;)d[f++]=c[u++];return d}return{encode:function(r){if(r instanceof Uint8Array||(ArrayBuffer.isView(r)?r=new Uint8Array(r.buffer,r.byteOffset,r.byteLength):Array.isArray(r)&&(r=Uint8Array.from(r))),!(r instanceof Uint8Array))throw new TypeError("Expected Uint8Array");if(0===r.length)return"";let o=0,n=0,s=0;const l=r.length;for(;s!==l&&0===r[s];)s++,o++;const c=(l-s)*i+1>>>0,u=new Uint8Array(c);for(;s!==l;){let e=r[s],a=0;for(let r=c-1;(0!==e||a<n)&&-1!==r;r--,a++)e+=256*u[r]>>>0,u[r]=e%t>>>0,e=e/t>>>0;if(0!==e)throw new Error("Non-zero carry");n=a,s++}let d=c-n;for(;d!==c&&0===u[d];)d++;let f=a.repeat(o);for(;d<c;++d)f+=e.charAt(u[d]);return f},decodeUnsafe:n,decode:function(e){const r=n(e);if(r)return r;throw new Error("Non-base"+t+" character")}}}("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"),Pe=function(e){function r(r){var t=r.slice(0,-4),a=r.slice(-4),o=e(t);if(!(a[0]^o[0]|a[1]^o[1]|a[2]^o[2]|a[3]^o[3]))return t}return{encode:function(r){var t=Uint8Array.from(r),a=e(t),o=t.length+4,i=new Uint8Array(o);return i.set(t,0),i.set(a.subarray(0,4),t.length),Ne.encode(i)},decode:function(e){var t=r(Ne.decode(e));if(null==t)throw new Error("Invalid checksum");return t},decodeUnsafe:function(e){var t=Ne.decodeUnsafe(e);if(null!=t)return r(t)}}}((function(e){return O(O(e))}));const Fe=(e=>oe(function(e,r){if(te(e),"function"!=typeof r)throw new Error("checksum fn should be function");return{encode(t){if(!ae(t))throw new Error("checksum.encode: input should be Uint8Array");const a=r(t).slice(0,e),o=new Uint8Array(t.length+e);return o.set(t),o.set(a,t.length),o},decode(t){if(!ae(t))throw new Error("checksum.decode: input should be Uint8Array");const a=t.slice(0,-e),o=r(a).slice(0,e),i=t.slice(-e);for(let r=0;r<e;r++)if(o[r]!==i[r])throw new Error("Invalid checksum");return a}}}(4,(r=>e(e(r)))),me))(O);var De=t(513);window.Buffer=e.hp,window.bip39=r,window.bip32=function(e){!function(e){if(re(e.isPoint(ee("0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798"))),re(!e.isPoint(ee("030000000000000000000000000000000000000000000000000000000000000005"))),re(e.isPrivate(ee("79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798"))),re(e.isPrivate(ee("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140"))),re(!e.isPrivate(ee("0000000000000000000000000000000000000000000000000000000000000000"))),re(!e.isPrivate(ee("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"))),re(!e.isPrivate(ee("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142"))),re(0===Y(e.pointFromScalar(ee("b1121e4088a66a28f5b6b0f5844943ecd9f610196d7bb83b25214b60452c09af")),ee("02b07ba9dca9523b7ef4bd97703d43d20399eb698e194704791a25ce77a400df99"))),e.xOnlyPointAddTweak){re(null===e.xOnlyPointAddTweak(ee("79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798"),ee("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140")));let r=e.xOnlyPointAddTweak(ee("1617d38ed8d8657da4d4761e8057bc396ea9e4b9d29776d4be096016dbd2509b"),ee("a8397a935f0dfceba6ba9618f6451ef4d80637abf4e6af2669fbc9de6a8fd2ac"));re(0===Y(r.xOnlyPubkey,ee("e478f99dab91052ab39a33ea35fd5e6e4933f4d28023cd597c9a1f6760346adf"))&&1===r.parity),r=e.xOnlyPointAddTweak(ee("2c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991"),ee("823c3cd2142744b075a87eade7e1b8678ba308d566226a0056ca2b7a76f86b47"))}re(0===Y(e.pointAddScalar(ee("0379be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798"),ee("0000000000000000000000000000000000000000000000000000000000000003")),ee("02c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5"))),re(0===Y(e.privateAdd(ee("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413e"),ee("0000000000000000000000000000000000000000000000000000000000000002")),ee("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140"))),e.privateNegate&&(re(0===Y(e.privateNegate(ee("0000000000000000000000000000000000000000000000000000000000000001")),ee("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140"))),re(0===Y(e.privateNegate(ee("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413e")),ee("0000000000000000000000000000000000000000000000000000000000000003"))),re(0===Y(e.privateNegate(ee("b1121e4088a66a28f5b6b0f5844943ecd9f610196d7bb83b25214b60452c09af")),ee("4eede1bf775995d70a494f0a7bb6bc11e0b8cccd41cce8009ab1132c8b0a3792")))),re(0===Y(e.sign(ee("5e9f0a0d593efdcf78ac923bc3313e4e7d408d574354ee2b3288c0da9fbba6ed"),ee("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140")),ee("54c4a33c6423d689378f160a7ff8b61330444abb58fb470f96ea16d99d4a2fed07082304410efa6b2943111b6a4e0aaa7b7db55a07e9861d1fb3cb1f421044a5"))),re(e.verify(ee("5e9f0a0d593efdcf78ac923bc3313e4e7d408d574354ee2b3288c0da9fbba6ed"),ee("0379be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798"),ee("54c4a33c6423d689378f160a7ff8b61330444abb58fb470f96ea16d99d4a2fed07082304410efa6b2943111b6a4e0aaa7b7db55a07e9861d1fb3cb1f421044a5"))),e.signSchnorr&&re(0===Y(e.signSchnorr(ee("7e2d58d8b3bcdf1abadec7829054f90dda9805aab56c77333024b9d0a508b75c"),ee("c90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b14e5c9"),ee("c87aa53824b4d7ae2eb035a2b5bbbccc080e76cdc6d1692c4b0b62d798e6d906")),ee("5831aaeed7b44bb74e5eab94ba9d4294c49bcf2a60728d8b4c200f50dd313c1bab745879a5ad954a72c45a91c3a51d3c7adea98d82f8481e0e1e03674a6f3fb7"))),e.verifySchnorr&&re(e.verifySchnorr(ee("7e2d58d8b3bcdf1abadec7829054f90dda9805aab56c77333024b9d0a508b75c"),ee("dd308afec5777e13121fa72b9cc1b7cc0139715309b086c960e18fd969774eb8"),ee("5831aaeed7b44bb74e5eab94ba9d4294c49bcf2a60728d8b4c200f50dd313c1bab745879a5ad954a72c45a91c3a51d3c7adea98d82f8481e0e1e03674a6f3fb7")))}(e);const r={messagePrefix:"Bitcoin Signed Message:\n",bech32:"bc",bip32:{public:76067358,private:76066276},pubKeyHash:0,scriptHash:5,wif:128},t=2147483648;class a{__D;__Q;lowR=!1;constructor(e,r){this.__D=e,this.__Q=r}get publicKey(){return void 0===this.__Q&&(this.__Q=e.pointFromScalar(this.__D,!0)),this.__Q}get privateKey(){return this.__D}sign(r,t){if(!this.privateKey)throw new Error("Missing private key");if(void 0===t&&(t=this.lowR),!1===t)return e.sign(r,this.privateKey);{let t=e.sign(r,this.privateKey);const a=new Uint8Array(32);let o=0;for(;t[0]>127;)o++,X(a,0,o,"LE"),t=e.sign(r,this.privateKey,a);return t}}signSchnorr(r){if(!this.privateKey)throw new Error("Missing private key");if(!e.signSchnorr)throw new Error("signSchnorr not supported by ecc library");return e.signSchnorr(r,this.privateKey)}verify(r,t){return e.verify(r,this.publicKey,t)}verifySchnorr(r,t){if(!e.verifySchnorr)throw new Error("verifySchnorr not supported by ecc library");return e.verifySchnorr(r,this.publicKey.subarray(1,33),t)}}class o extends a{chainCode;network;__DEPTH;__INDEX;__PARENT_FINGERPRINT;constructor(e,r,t,a,o=0,i=0,n=0){super(e,r),this.chainCode=t,this.network=a,this.__DEPTH=o,this.__INDEX=i,this.__PARENT_FINGERPRINT=n,Ie(Re,a)}get depth(){return this.__DEPTH}get index(){return this.__INDEX}get parentFingerprint(){return this.__PARENT_FINGERPRINT}get identifier(){return function(e){return L(O(e))}(this.publicKey)}get fingerprint(){return this.identifier.slice(0,4)}get compressed(){return!0}isNeutered(){return void 0===this.__D}neutered(){return s(this.publicKey,this.chainCode,this.network,this.depth,this.index,this.parentFingerprint)}toBase58(){const e=this.network,r=this.isNeutered()?e.bip32.public:e.bip32.private,t=new Uint8Array(78);return X(t,0,r,"BE"),J(t,4,this.depth),X(t,5,this.parentFingerprint,"BE"),X(t,9,this.index,"BE"),t.set(this.chainCode,13),this.isNeutered()?t.set(this.publicKey,45):(J(t,45,0),t.set(this.privateKey,46)),a=t,Fe.encode(a);var a}toWIF(){if(!this.privateKey)throw new TypeError("Missing private key");return e={version:this.network.wif,privateKey:this.privateKey,compressed:!0},Pe.encode(function(e,r,t){if(32!==r.length)throw new TypeError("Invalid privateKey length");var a=new Uint8Array(t?34:33);return new DataView(a.buffer).setUint8(0,e),a.set(r,1),t&&(a[33]=1),a}(e.version,e.privateKey,e.compressed));var e}derive(r){Ie(Ue,r);const a=r>=t,o=new Uint8Array(37);if(a){if(this.isNeutered())throw new TypeError("Missing private key for hardened child key");o[0]=0,o.set(this.privateKey,1),X(o,33,r,"BE")}else o.set(this.publicKey,0),X(o,33,r,"BE");const i=$(this.chainCode,o),l=i.slice(0,32),c=i.slice(32);if(!e.isPrivate(l))return this.derive(r+1);let u;if(this.isNeutered()){const t=e.pointAddScalar(this.publicKey,l,!0);if(null===t)return this.derive(r+1);u=s(t,c,this.network,this.depth+1,r,Q(this.fingerprint,0,"BE"))}else{const t=e.privateAdd(this.privateKey,l);if(null==t)return this.derive(r+1);u=n(t,c,this.network,this.depth+1,r,Q(this.fingerprint,0,"BE"))}return u}deriveHardened(e){if("number"==typeof Ie(He,e))return this.derive(e+t);throw new TypeError("Expected UInt31, got "+e)}derivePath(e){Ie(Ce,e);let r=e.split("/");if("m"===r[0]){if(this.parentFingerprint)throw new TypeError("Expected master, got child");r=r.slice(1)}return r.reduce(((e,r)=>{let t;return"'"===r.slice(-1)?(t=parseInt(r.slice(0,-1),10),e.deriveHardened(t)):(t=parseInt(r,10),e.derive(t))}),this)}tweak(e){return this.privateKey?this.tweakFromPrivateKey(e):this.tweakFromPublicKey(e)}tweakFromPublicKey(r){const t=32===(o=this.publicKey).length?o:o.slice(1,33);var o;if(!e.xOnlyPointAddTweak)throw new Error("xOnlyPointAddTweak not supported by ecc library");const i=e.xOnlyPointAddTweak(t,r);if(!i||null===i.xOnlyPubkey)throw new Error("Cannot tweak public key!");const n=function(e){const r=e.reduce(((e,r)=>e+r.length),0),t=new Uint8Array(r);let a=0;for(const r of e)t.set(r,a),a+=r.length;return t}([Uint8Array.from([0===i.parity?2:3]),i.xOnlyPubkey]);return new a(void 0,n)}tweakFromPrivateKey(r){const t=3===this.publicKey[0]||4===this.publicKey[0]&&!(1&~this.publicKey[64]),o=(()=>{if(t){if(e.privateNegate)return e.privateNegate(this.privateKey);throw new Error("privateNegate not supported by ecc library")}return this.privateKey})(),i=e.privateAdd(o,r);if(!i)throw new Error("Invalid tweaked private key!");return new a(i,void 0)}}function i(e,r,t){return n(e,r,t)}function n(t,a,i,n,s,l){if(Ie(Te,t),Ie(Te,a),i=i||r,!e.isPrivate(t))throw new TypeError("Private key not in range [1, n)");return new o(t,void 0,a,i,n,s,l)}function s(t,a,i,n,s,l){if(Ie(_e,t),Ie(Te,a),i=i||r,!e.isPoint(t))throw new TypeError("Point is not on the curve");return new o(void 0,t,a,i,n,s,l)}return{fromSeed:function(e,t){if(Ie(Ae(Uint8Array),e),e.length<16)throw new TypeError("Seed should be at least 128 bits");if(e.length>64)throw new TypeError("Seed should be at most 512 bits");t=t||r;const a=$(W.encode("Bitcoin seed"),e);return i(a.slice(0,32),a.slice(32),t)},fromBase58:function(e,t){const a=(o=e,Fe.decode(o));var o;if(78!==a.length)throw new TypeError("Invalid buffer length");t=t||r;const i=Q(a,0,"BE");if(i!==t.bip32.private&&i!==t.bip32.public)throw new TypeError("Invalid network version");const l=a[4],c=Q(a,5,"BE");if(0===l&&0!==c)throw new TypeError("Invalid parent fingerprint");const u=Q(a,9,"BE");if(0===l&&0!==u)throw new TypeError("Invalid index");const d=a.slice(13,45);let f;if(i===t.bip32.private){if(0!==a[45])throw new TypeError("Invalid private key");f=n(a.slice(46,78),d,t,l,u,c)}else f=s(a.slice(45,78),d,t,l,u,c);return f},fromPublicKey:function(e,r,t){return s(e,r,t)},fromPrivateKey:i}}(De)})(),{}})()));
//# sourceMappingURL=newbundle.js.map